{"litestar-litestar/file_system.py-info": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 8 items\n\ntests/unit/test_file_system.py FF                                        [ 25%]\ntests/unit/test_response/test_file_response.py F                         [ 37%]\ntests/unit/test_file_system.py F.                                        [ 62%]\ntests/unit/test_response/test_file_response.py .                         [ 75%]\ntests/unit/test_file_system.py F.                                        [100%]\n\n=================================== FAILURES ===================================\n______ test_file_adapter_info_handles_permission_exception[file_system0] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2581/test_file_adapter_info_handles0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f16f6380b20>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        with pytest.raises(NotAuthorizedException):\n>           await adapter.info(path=file)\n\ntests/unit/test_file_system.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/file_system.py:94: in info\n    return cast(\"FileInfo\", await awaitable)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f16f6380b20>\npath = '/tmp/pytest-of-root/pytest-2581/test_file_adapter_info_handles0/test.txt'\nkwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n        try:\n            awaitable = (\n                self.file_system.info(str(path))\n>               if is_async_callable(self.file_system.info)\n                else sync_to_thread(self.file_system.info, str(path))\n            )\nE           AttributeError: 'BaseLocalFileSystem' object has no attribute 'file_system'\n\nlitestar/file_system.py:41: AttributeError\n______ test_file_adapter_info_handles_permission_exception[file_system1] _______\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2581/test_file_adapter_info_handles1')\nfile_system = <fsspec.implementations.local.LocalFileSystem object at 0x7f16f6380760>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"permissions equivalent missing on windows\")\n    async def test_file_adapter_info_handles_permission_exception(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n    \n        owner_permissions = file.stat().st_mode\n        Path(tmpdir).chmod(S_IRWXO)\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n>       with pytest.raises(NotAuthorizedException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.NotAuthorizedException'>\n\ntests/unit/test_file_system.py:94: Failed\n_________________________ test_file_with_symbolic_link _________________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2581/test_file_with_symbolic_link0')\n\n    async def test_file_with_symbolic_link(tmpdir: \"Path\") -> None:\n        path = tmpdir / \"text.txt\"\n        path.write_text(\"content\", \"utf-8\")\n    \n        linked = tmpdir / \"alt.txt\"\n        os.symlink(path, linked, target_is_directory=False)\n    \n        fs = BaseLocalFileSystem()\n>       file_info = await fs.info(linked)\n\ntests/unit/test_response/test_file_response.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f16f60a9120>\npath = local('/tmp/pytest-of-root/pytest-2581/test_file_with_symbolic_link0/alt.txt')\nkwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n        try:\n            awaitable = (\n                self.file_system.info(str(path))\n>               if is_async_callable(self.file_system.info)\n                else sync_to_thread(self.file_system.info, str(path))\n            )\nE           AttributeError: 'BaseLocalFileSystem' object has no attribute 'file_system'\n\nlitestar/file_system.py:41: AttributeError\n____ test_file_adapter_info_handles_file_not_found_exception[file_system0] _____\n\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f16f6380ac0>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    async def test_file_adapter_info_handles_file_not_found_exception(file_system: \"FileSystemProtocol\") -> None:\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        with pytest.raises(FileNotFoundError):\n>           await adapter.info(path=\"non_existing_file.txt\")\n\ntests/unit/test_file_system.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/file_system.py:94: in info\n    return cast(\"FileInfo\", await awaitable)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f16f6380ac0>\npath = 'non_existing_file.txt', kwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n        try:\n            awaitable = (\n                self.file_system.info(str(path))\n>               if is_async_callable(self.file_system.info)\n                else sync_to_thread(self.file_system.info, str(path))\n            )\nE           AttributeError: 'BaseLocalFileSystem' object has no attribute 'file_system'\n\nlitestar/file_system.py:41: AttributeError\n_____________________ test_file_adapter_info[file_system0] _____________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2581/test_file_adapter_info_file_sy0')\nfile_system = <litestar.file_system.BaseLocalFileSystem object at 0x7f16f6380a30>\n\n    @pytest.mark.parametrize(\"file_system\", (BaseLocalFileSystem(), LocalFileSystem()))\n    @pytest.mark.xfail(sys.platform == \"win32\", reason=\"Suspected fsspec issue\", strict=False)\n    async def test_file_adapter_info(tmpdir: Path, file_system: \"FileSystemProtocol\") -> None:\n        file = Path(tmpdir / \"test.txt\")\n        file.write_bytes(b\"test\")\n        adapter = FileSystemAdapter(file_system=file_system)\n    \n        result = file.stat()\n    \n>       assert await adapter.info(file) == {\n            \"gid\": result.st_gid,\n            \"ino\": result.st_ino,\n            \"islink\": False,\n            \"mode\": result.st_mode,\n            \"mtime\": result.st_mtime,\n            \"name\": str(file),\n            \"nlink\": 1,\n            \"created\": result.st_ctime,\n            \"size\": result.st_size,\n            \"type\": \"file\",\n            \"uid\": result.st_uid,\n        }\n\ntests/unit/test_file_system.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/file_system.py:94: in info\n    return cast(\"FileInfo\", await awaitable)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.file_system.BaseLocalFileSystem object at 0x7f16f6380a30>\npath = '/tmp/pytest-of-root/pytest-2581/test_file_adapter_info_file_sy0/test.txt'\nkwargs = {}\n\n    async def info(self, path: PathType, **kwargs: Any) -> FileInfo:\n        \"\"\"Retrieve information about a given file path.\n    \n        Args:\n            path: A file path.\n            **kwargs: Any additional kwargs.\n    \n        Returns:\n            A dictionary of file info.\n        \"\"\"\n        try:\n            awaitable = (\n                self.file_system.info(str(path))\n>               if is_async_callable(self.file_system.info)\n                else sync_to_thread(self.file_system.info, str(path))\n            )\nE           AttributeError: 'BaseLocalFileSystem' object has no attribute 'file_system'\n\nlitestar/file_system.py:41: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_permission_exception[file_system1]\nFAILED tests/unit/test_response/test_file_response.py::test_file_with_symbolic_link\nFAILED tests/unit/test_file_system.py::test_file_adapter_info_handles_file_not_found_exception[file_system0]\nFAILED tests/unit/test_file_system.py::test_file_adapter_info[file_system0]\n========================= 5 failed, 3 passed in 0.18s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-has_inner_subclass_of": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py ..       [100%]\n\n============================== 2 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-get_type_hints": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_typing.py .                                              [100%]\n\n============================== 1 passed in 0.07s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-from_kwarg": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 29 items\n\ntests/unit/test_dto/test_factory/test_dataclass_dto.py s                 [  3%]\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [ 10%]\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py F               [ 13%]\ntests/unit/test_openapi/test_schema.py FF                                [ 20%]\ntests/unit/test_dto/test_factory/test_base_dto.py E                      [ 24%]\ntests/unit/test_dto/test_factory/test_backends/test_utils.py F           [ 27%]\ntests/unit/test_openapi/test_schema.py F                                 [ 31%]\ntests/unit/test_dto/test_factory/test_dataclass_dto.py F                 [ 34%]\ntests/unit/test_contrib/test_pydantic/test_openapi.py F                  [ 37%]\ntests/unit/test_openapi/test_schema.py FFF                               [ 48%]\ntests/unit/test_contrib/test_pydantic/test_openapi.py F                  [ 51%]\ntests/unit/test_openapi/test_schema.py FFFFF                             [ 68%]\ntests/unit/test_dto/test_factory/test_base_dto.py F                      [ 72%]\ntests/unit/test_dto/test_factory/test_backends/test_utils.py F           [ 75%]\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py FF           [ 82%]\ntests/unit/test_typing.py F                                              [ 86%]\ntests/unit/test_contrib/test_pydantic/test_openapi.py F                  [ 89%]\ntests/unit/test_openapi/test_schema.py FF                                [ 96%]\ntests/unit/test_dto/test_factory/test_base_dto.py E                      [100%]\n\n==================================== ERRORS ====================================\n______________________ ERROR at setup of test_from_bytes _______________________\n\n    @pytest.fixture()\n    def asgi_connection() -> Request[Any, Any, Any]:\n        @get(\"/\", name=\"handler_id\", media_type=MediaType.JSON)\n        def _handler() -> None: ...\n    \n>       return RequestFactory().get(path=\"/\", route_handler=_handler)\n\ntests/unit/test_dto/conftest.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/testing/request_factory.py:122: in __init__\n    self.app = app if app is not None else _create_default_app()\nlitestar/testing/request_factory.py:50: in _create_default_app\n    return Litestar(route_handlers=[])\nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:668: in register\n    route_handler.on_registration(self)\nlitestar/handlers/http_handlers/base.py:560: in on_registration\n    super().on_registration(app)\nlitestar/handlers/base.py:538: in on_registration\n    self._validate_handler_function()\nlitestar/handlers/http_handlers/base.py:571: in _validate_handler_function\n    super()._validate_handler_function()\nlitestar/handlers/base.py:549: in _validate_handler_function\n    self.parsed_data_field is not None\nlitestar/handlers/base.py:242: in parsed_data_field\n    self._parsed_data_field = self.parsed_fn_signature.parameters.get(\"data\")\nlitestar/handlers/base.py:227: in parsed_fn_signature\n    self._parsed_fn_signature = ParsedSignature.from_fn(\nlitestar/utils/signature.py:217: in from_fn\n    return cls.from_signature(signature, expanded_type_hints)\nlitestar/utils/signature.py:231: in from_signature\n    parameters = tuple(\nlitestar/utils/signature.py:232: in <genexpr>\n    FieldDefinition.from_parameter(parameter=parameter, fn_type_hints=fn_type_hints)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.typing.FieldDefinition'>\nparameter = <Parameter \"request: 'Request'\">\nfn_type_hints = {'request': <class 'litestar.connection.request.Request'>, 'return': <class 'bytes'>}\n\n    @classmethod\n    def from_parameter(cls, parameter: Parameter, fn_type_hints: dict[str, Any]) -> FieldDefinition:\n        \"\"\"Initialize ParsedSignatureParameter.\n    \n        Args:\n            parameter: inspect.Parameter\n            fn_type_hints: mapping of names to types. Should be result of ``get_type_hints()``, preferably via the\n                :attr:``get_fn_type_hints() <.utils.signature_parsing.get_fn_type_hints>`` helper.\n    \n        Returns:\n            ParsedSignatureParameter.\n    \n        \"\"\"\n        from litestar.datastructures import ImmutableState\n    \n        try:\n            annotation = fn_type_hints[parameter.name]\n        except KeyError as e:\n            raise ImproperlyConfiguredException(\n                f\"'{parameter.name}' does not have a type annotation. If it should receive any value, use 'Any'.\"\n            ) from e\n    \n        if parameter.name == \"state\" and not issubclass(annotation, ImmutableState):\n            raise ImproperlyConfiguredException(\n                f\"The type annotation `{annotation}` is an invalid type for the 'state' reserved kwarg. \"\n                \"It must be typed to a subclass of `litestar.datastructures.ImmutableState` or \"\n                \"`litestar.datastructures.State`.\"\n            )\n    \n>       return FieldDefinition.from_kwarg(\n            annotation=annotation,\n            name=parameter.name,\n            default=Empty if parameter.default is Signature.empty else parameter.default,\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\nlitestar/typing.py:629: TypeError\n__________________ ERROR at setup of test_config_field_rename __________________\n\n    @pytest.fixture()\n    def asgi_connection() -> Request[Any, Any, Any]:\n        @get(\"/\", name=\"handler_id\", media_type=MediaType.JSON)\n        def _handler() -> None: ...\n    \n>       return RequestFactory().get(path=\"/\", route_handler=_handler)\n\ntests/unit/test_dto/conftest.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/testing/request_factory.py:122: in __init__\n    self.app = app if app is not None else _create_default_app()\nlitestar/testing/request_factory.py:50: in _create_default_app\n    return Litestar(route_handlers=[])\nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:668: in register\n    route_handler.on_registration(self)\nlitestar/handlers/http_handlers/base.py:560: in on_registration\n    super().on_registration(app)\nlitestar/handlers/base.py:538: in on_registration\n    self._validate_handler_function()\nlitestar/handlers/http_handlers/base.py:571: in _validate_handler_function\n    super()._validate_handler_function()\nlitestar/handlers/base.py:549: in _validate_handler_function\n    self.parsed_data_field is not None\nlitestar/handlers/base.py:242: in parsed_data_field\n    self._parsed_data_field = self.parsed_fn_signature.parameters.get(\"data\")\nlitestar/handlers/base.py:227: in parsed_fn_signature\n    self._parsed_fn_signature = ParsedSignature.from_fn(\nlitestar/utils/signature.py:217: in from_fn\n    return cls.from_signature(signature, expanded_type_hints)\nlitestar/utils/signature.py:231: in from_signature\n    parameters = tuple(\nlitestar/utils/signature.py:232: in <genexpr>\n    FieldDefinition.from_parameter(parameter=parameter, fn_type_hints=fn_type_hints)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'litestar.typing.FieldDefinition'>\nparameter = <Parameter \"request: 'Request'\">\nfn_type_hints = {'request': <class 'litestar.connection.request.Request'>, 'return': <class 'bytes'>}\n\n    @classmethod\n    def from_parameter(cls, parameter: Parameter, fn_type_hints: dict[str, Any]) -> FieldDefinition:\n        \"\"\"Initialize ParsedSignatureParameter.\n    \n        Args:\n            parameter: inspect.Parameter\n            fn_type_hints: mapping of names to types. Should be result of ``get_type_hints()``, preferably via the\n                :attr:``get_fn_type_hints() <.utils.signature_parsing.get_fn_type_hints>`` helper.\n    \n        Returns:\n            ParsedSignatureParameter.\n    \n        \"\"\"\n        from litestar.datastructures import ImmutableState\n    \n        try:\n            annotation = fn_type_hints[parameter.name]\n        except KeyError as e:\n            raise ImproperlyConfiguredException(\n                f\"'{parameter.name}' does not have a type annotation. If it should receive any value, use 'Any'.\"\n            ) from e\n    \n        if parameter.name == \"state\" and not issubclass(annotation, ImmutableState):\n            raise ImproperlyConfiguredException(\n                f\"The type annotation `{annotation}` is an invalid type for the 'state' reserved kwarg. \"\n                \"It must be typed to a subclass of `litestar.datastructures.ImmutableState` or \"\n                \"`litestar.datastructures.State`.\"\n            )\n    \n>       return FieldDefinition.from_kwarg(\n            annotation=annotation,\n            name=parameter.name,\n            default=Empty if parameter.default is Signature.empty else parameter.default,\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\nlitestar/typing.py:629: TypeError\n=================================== FAILURES ===================================\n___________ test_backend_model_name_uniqueness[experimental_backend] ___________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_codegen_backend.py:73: in __init__\n    super().__init__(\nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:140: in parse_model\n    for field_definition in self.dto_factory.generate_field_definitions(model_type):\nlitestar/dto/dataclass_dto.py:33: in generate_field_definitions\n    for key, field_definition in cls.get_model_type_hints(model_type).items():\nlitestar/dto/base_dto.py:289: in get_model_type_hints\n    return {\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_itemiterator object at 0x7f3afe01fbf0>\n\n    return {\n>       k: FieldDefinition.from_kwarg(annotation=v, name=k)\n        for k, v in get_type_hints(model_type, localns=namespace, include_extras=True).items()  # pyright: ignore\n    }\nE   TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\nlitestar/dto/base_dto.py:290: TypeError\n_____________ test_backend_model_name_uniqueness[default_backend] ______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:140: in parse_model\n    for field_definition in self.dto_factory.generate_field_definitions(model_type):\nlitestar/dto/dataclass_dto.py:33: in generate_field_definitions\n    for key, field_definition in cls.get_model_type_hints(model_type).items():\nlitestar/dto/base_dto.py:289: in get_model_type_hints\n    return {\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_itemiterator object at 0x7f3afd7244f0>\n\n    return {\n>       k: FieldDefinition.from_kwarg(annotation=v, name=k)\n        for k, v in get_type_hints(model_type, localns=namespace, include_extras=True).items()  # pyright: ignore\n    }\nE   TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\nlitestar/dto/base_dto.py:290: TypeError\n_________________ test_schema_generation_with_generic_classes __________________\n\n    def test_schema_generation_with_generic_classes() -> None:\n        cls = AttrsGeneric[int]\n        expected_foo_schema = Schema(type=OpenAPIType.INTEGER)\n        expected_optional_foo_schema = Schema(one_of=[Schema(type=OpenAPIType.NULL), Schema(type=OpenAPIType.INTEGER)])\n    \n>       field_definition = FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py:28: TypeError\n________ test_schema_generation_with_generic_classes[DataclassGeneric] _________\n\ncls = tests.unit.test_openapi.test_schema.DataclassGeneric[int]\n\n    @pytest.mark.parametrize(\"cls\", annotations)\n    def test_schema_generation_with_generic_classes(cls: Any) -> None:\n        expected_foo_schema = Schema(type=OpenAPIType.INTEGER)\n        expected_optional_foo_schema = Schema(one_of=[Schema(type=OpenAPIType.NULL), Schema(type=OpenAPIType.INTEGER)])\n    \n        properties = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\n        ).properties\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:376: TypeError\n_________ test_schema_generation_with_generic_classes[MsgspecGeneric] __________\n\ncls = tests.unit.test_openapi.test_schema.MsgspecGeneric[int]\n\n    @pytest.mark.parametrize(\"cls\", annotations)\n    def test_schema_generation_with_generic_classes(cls: Any) -> None:\n        expected_foo_schema = Schema(type=OpenAPIType.INTEGER)\n        expected_optional_foo_schema = Schema(one_of=[Schema(type=OpenAPIType.NULL), Schema(type=OpenAPIType.INTEGER)])\n    \n        properties = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\n        ).properties\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:376: TypeError\n___________ test_should_mark_private_underscore_fields_private_false ___________\n\n    def test_should_mark_private_underscore_fields_private_false() -> None:\n>       assert (\n            _should_mark_private(\n                DTOFieldDefinition.from_field_definition(\n                    field_definition=FieldDefinition.from_kwarg(annotation=int, name=\"a\", default=1),\n                    model_name=\"A\",\n                    default_factory=None,\n                    dto_field=DTOField(),\n                ),\n                False,\n            )\n            is False\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:172: TypeError\n__________________________ test_handling_of_literals ___________________________\n\n    def test_handling_of_literals() -> None:\n        @dataclass\n        class DataclassWithLiteral:\n            value: ValueType\n            const: ConstType\n            composite: Literal[ValueType, ConstType]\n    \n>       schema = get_schema_for_field_definition(FieldDefinition.from_kwarg(name=\"\", annotation=DataclassWithLiteral))\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:204: TypeError\n_______________________ test_dataclass_field_definitions _______________________\n\ndto_type = <class 'litestar.dto.base_dto.DataclassDTO[<class 'tests.unit.test_dto.test_factory.test_dataclass_dto.Model'>]'>\n\n    def test_dataclass_field_definitions(dto_type: type[DataclassDTO[Model]]) -> None:\n        expected = [\n            replace(\n                DTOFieldDefinition.from_field_definition(\n>                   field_definition=FieldDefinition.from_kwarg(\n                        name=\"a\",\n                        annotation=int,\n                    ),\n                    default_factory=None,\n                    model_name=Model.__name__,\n                    dto_field=DTOField(),\n                ),\n                metadata=ANY,\n                type_wrappers=ANY,\n                raw=ANY,\n            ),\n            replace(\n                DTOFieldDefinition.from_field_definition(\n                    field_definition=FieldDefinition.from_kwarg(name=\"b\", annotation=str, default=\"b\"),\n                    default_factory=None,\n                    model_name=Model.__name__,\n                    dto_field=DTOField(),\n                ),\n                metadata=ANY,\n                type_wrappers=ANY,\n                raw=ANY,\n            ),\n            replace(\n                DTOFieldDefinition.from_field_definition(\n                    field_definition=FieldDefinition.from_kwarg(\n                        name=\"c\",\n                        annotation=List[int],\n                    ),\n                    default_factory=list,\n                    model_name=Model.__name__,\n                    dto_field=DTOField(),\n                ),\n                metadata=ANY,\n                type_wrappers=ANY,\n                raw=ANY,\n            ),\n        ]\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_dto/test_factory/test_dataclass_dto.py:80: TypeError\n_______________________ test_create_schema_for_field_v1 ________________________\n\n    def test_create_schema_for_field_v1() -> None:\n        class Model(pydantic_v1.BaseModel):\n            value: str = pydantic_v1.Field(\n                title=\"title\",\n                description=\"description\",\n                example=\"example\",\n                max_length=16,  # pyright: ignore\n            )\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Model\", annotation=Model), plugins=[PydanticSchemaPlugin()]\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:551: TypeError\n___________________________ test_type_union[Struct] ____________________________\n\nbase_type = <class 'msgspec.Struct'>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union(base_type: type) -> None:\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:524: TypeError\n__________________________ test_type_union[TypedDict] __________________________\n\nbase_type = <function TypedDict at 0x7f3b0630c310>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union(base_type: type) -> None:\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:524: TypeError\n__________________________ test_type_union[dataclass] __________________________\n\nbase_type = <function dataclass at 0x7f3b062c7910>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union(base_type: type) -> None:\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:524: TypeError\n__________________ test_create_schema_for_field_v2__examples ___________________\n\n    def test_create_schema_for_field_v2__examples() -> None:\n        class Model(pydantic_v2.BaseModel):\n            value: str = pydantic_v2.Field(\n                title=\"title\", description=\"description\", max_length=16, json_schema_extra={\"examples\": [\"example\"]}\n            )\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Model\", annotation=Model), plugins=[PydanticSchemaPlugin()]\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:591: TypeError\n________________ test_create_schema_from_msgspec_annotated_type ________________\n\n    def test_create_schema_from_msgspec_annotated_type() -> None:\n        class Lookup(msgspec.Struct):\n            id: Annotated[str, msgspec.Meta(max_length=16, examples=[\"example\"], description=\"description\", title=\"title\")]\n    \n>       schema = get_schema_for_field_definition(FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Lookup))\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:290: TypeError\n______________________ test_type_union_with_none[Struct] _______________________\n\nbase_type = <class 'msgspec.Struct'>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union_with_none(base_type: type) -> None:\n        # https://github.com/litestar-org/litestar/issues/2971\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB, None])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:554: TypeError\n_____________________ test_type_union_with_none[TypedDict] _____________________\n\nbase_type = <function TypedDict at 0x7f3b0630c310>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union_with_none(base_type: type) -> None:\n        # https://github.com/litestar-org/litestar/issues/2971\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB, None])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:554: TypeError\n_____________________ test_type_union_with_none[dataclass] _____________________\n\nbase_type = <function dataclass at 0x7f3b062c7910>\n\n    @pytest.mark.parametrize(\"base_type\", [msgspec.Struct, TypedDict, dataclass])\n    def test_type_union_with_none(base_type: type) -> None:\n        # https://github.com/litestar-org/litestar/issues/2971\n        if base_type is dataclass:  # type: ignore[comparison-overlap]\n    \n            @dataclass\n            class ModelA:  # pyright: ignore\n                pass\n    \n            @dataclass\n            class ModelB:  # pyright: ignore\n                pass\n    \n        else:\n    \n            class ModelA(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n            class ModelB(base_type):  # type: ignore[no-redef, misc]\n                pass\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Lookup\", annotation=Union[ModelA, ModelB, None])\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:554: TypeError\n_____________________________ test_annotated_types _____________________________\n\n    def test_annotated_types() -> None:\n        historical_date = date(year=1980, day=1, month=1)\n        today = date.today()\n    \n        @dataclass\n        class MyDataclass:\n            constrained_int: Annotated[int, annotated_types.Gt(1), annotated_types.Lt(10)]\n            constrained_float: Annotated[float, annotated_types.Ge(1), annotated_types.Le(10)]\n            constrained_date: Annotated[date, annotated_types.Interval(gt=historical_date, lt=today)]\n            constrained_lower_case: Annotated[str, annotated_types.LowerCase]\n            constrained_upper_case: Annotated[str, annotated_types.UpperCase]\n            constrained_is_ascii: Annotated[str, annotated_types.IsAscii]\n            constrained_is_digit: Annotated[str, annotated_types.IsDigits]\n    \n>       schema = get_schema_for_field_definition(FieldDefinition.from_kwarg(name=\"MyDataclass\", annotation=MyDataclass))\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:314: TypeError\n___________________________ test_sub_types_supported ___________________________\n\n    def test_sub_types_supported() -> None:\n        DataclassDTO._dto_backends = {}\n        dto_type = DataclassDTO[Model]\n    \n        @dataclass\n        class SubType(Model):\n            c: int\n    \n        dto_type.create_for_field_definition(\n>           handler_id=\"handler_id\", field_definition=FieldDefinition.from_kwarg(SubType, name=\"data\")\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'name'\n\ntests/unit/test_dto/test_factory/test_base_dto.py:158: TypeError\n___________ test_should_mark_private_underscore_fields_private_true ____________\n\n    def test_should_mark_private_underscore_fields_private_true() -> None:\n>       assert (\n            _should_mark_private(\n                DTOFieldDefinition.from_field_definition(\n                    field_definition=FieldDefinition.from_kwarg(annotation=int, name=\"a\", default=1),\n                    model_name=\"A\",\n                    default_factory=None,\n                    dto_field=DTOField(),\n                ),\n                True,\n            )\n            is False\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:133: TypeError\n________ test_schema_generation_with_generic_classes[PydanticV1Generic] ________\n\nmodel = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.PydanticV1Generic'>\n\n    @pytest.mark.parametrize(\"model\", [PydanticV1Generic, PydanticV2Generic])\n    def test_schema_generation_with_generic_classes(model: Type[Union[PydanticV1Generic, PydanticV2Generic]]) -> None:\n        cls = model[int]  # type: ignore[index]\n>       field_definition = FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:37: TypeError\n________ test_schema_generation_with_generic_classes[PydanticV2Generic] ________\n\nmodel = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.PydanticV2Generic'>\n\n    @pytest.mark.parametrize(\"model\", [PydanticV1Generic, PydanticV2Generic])\n    def test_schema_generation_with_generic_classes(model: Type[Union[PydanticV1Generic, PydanticV2Generic]]) -> None:\n        cls = model[int]  # type: ignore[index]\n>       field_definition = FieldDefinition.from_kwarg(name=get_name(cls), annotation=cls)\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:37: TypeError\n_______________________________ test_is_required _______________________________\n\n    def test_is_required() -> None:\n        class Foo(TypedDict):\n            required: Required[str]\n            not_required: NotRequired[str]\n    \n        class Bar(msgspec.Struct):\n            unset: Union[str, msgspec.UnsetType] = msgspec.UNSET  # noqa: UP007\n            with_default: str = \"\"\n            with_none_default: Union[str, None] = None  # noqa: UP007\n    \n        assert FieldDefinition.from_annotation(get_type_hints(Foo, include_extras=True)[\"required\"]).is_required is True\n        assert (\n            FieldDefinition.from_annotation(get_type_hints(Foo, include_extras=True)[\"not_required\"]).is_required is False\n        )\n        assert FieldDefinition.from_annotation(get_type_hints(Bar, include_extras=True)[\"unset\"]).is_required is False\n    \n>       assert (\n            FieldDefinition.from_kwarg(\n                name=\"foo\", kwarg_definition=ParameterKwarg(required=False), annotation=str\n            ).is_required\n            is False\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_typing.py:317: TypeError\n_______________________ test_create_schema_for_field_v2 ________________________\n\n    def test_create_schema_for_field_v2() -> None:\n        class Model(pydantic_v2.BaseModel):\n            value: str = pydantic_v2.Field(\n                title=\"title\", description=\"description\", max_length=16, json_schema_extra={\"example\": \"example\"}\n            )\n    \n        schema = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=\"Model\", annotation=Model), plugins=[PydanticSchemaPlugin()]\n        )\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:571: TypeError\n____________________________ test_title_validation _____________________________\n\n    def test_title_validation() -> None:\n        # TODO: what is this actually testing?\n        creator = SchemaCreator(plugins=openapi_schema_plugins)\n>       person_ref = creator.for_field_definition(FieldDefinition.from_kwarg(name=\"Person\", annotation=DataclassPerson))\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:237: TypeError\n___________ test_schema_generation_with_generic_classes_constrained ____________\n\n    def test_schema_generation_with_generic_classes_constrained() -> None:\n        cls = ConstrainedGenericDataclass\n        properties = get_schema_for_field_definition(\n>           FieldDefinition.from_kwarg(name=cls.__name__, annotation=cls)\n        ).properties\nE       TypeError: FieldDefinition.from_kwarg() got multiple values for argument 'annotation'\n\ntests/unit/test_openapi/test_schema.py:400: TypeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[default_backend]\nFAILED tests/unit/test_contrib/test_attrs/test_schema_plugin.py::test_schema_generation_with_generic_classes\nFAILED tests/unit/test_openapi/test_schema.py::test_schema_generation_with_generic_classes[DataclassGeneric]\nFAILED tests/unit/test_openapi/test_schema.py::test_schema_generation_with_generic_classes[MsgspecGeneric]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_should_mark_private_underscore_fields_private_false\nFAILED tests/unit/test_openapi/test_schema.py::test_handling_of_literals - Ty...\nFAILED tests/unit/test_dto/test_factory/test_dataclass_dto.py::test_dataclass_field_definitions\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_field_v1\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union[Struct] - Type...\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union[TypedDict] - T...\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union[dataclass] - T...\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_field_v2__examples\nFAILED tests/unit/test_openapi/test_schema.py::test_create_schema_from_msgspec_annotated_type\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union_with_none[Struct]\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union_with_none[TypedDict]\nFAILED tests/unit/test_openapi/test_schema.py::test_type_union_with_none[dataclass]\nFAILED tests/unit/test_openapi/test_schema.py::test_annotated_types - TypeErr...\nFAILED tests/unit/test_dto/test_factory/test_base_dto.py::test_sub_types_supported\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_should_mark_private_underscore_fields_private_true\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_schema_generation_with_generic_classes[PydanticV1Generic]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_schema_generation_with_generic_classes[PydanticV2Generic]\nFAILED tests/unit/test_typing.py::test_is_required - TypeError: FieldDefiniti...\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_field_v2\nFAILED tests/unit/test_openapi/test_schema.py::test_title_validation - TypeEr...\nFAILED tests/unit/test_openapi/test_schema.py::test_schema_generation_with_generic_classes_constrained\nERROR tests/unit/test_dto/test_factory/test_base_dto.py::test_from_bytes - Ty...\nERROR tests/unit/test_dto/test_factory/test_base_dto.py::test_config_field_rename\n============= 26 failed, 1 skipped, 2 warnings, 2 errors in 0.49s ==============\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/typing.py-from_parameter": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/unit/test_utils/test_signature.py F.FF                             [100%]\n\n=================================== FAILURES ===================================\n_ test_field_definition_from_parameter_raises_improperly_configured_if_no_annotation _\n\n    def test_field_definition_from_parameter_raises_improperly_configured_if_no_annotation() -> None:\n        \"\"\"Test FieldDefinition raises ImproperlyConfigured if no annotation.\"\"\"\n        param = Parameter(\"foo\", Parameter.POSITIONAL_OR_KEYWORD)\n>       with pytest.raises(ImproperlyConfiguredException):\nE       Failed: DID NOT RAISE <class 'litestar.exceptions.http_exceptions.ImproperlyConfiguredException'>\n\ntests/unit/test_utils/test_signature.py:116: Failed\n__________ test_field_definition_from_parameter_has_default_predicate __________\n\n    def test_field_definition_from_parameter_has_default_predicate() -> None:\n        \"\"\"Test FieldDefinition.has_default.\"\"\"\n        param = Parameter(\"foo\", Parameter.POSITIONAL_OR_KEYWORD, annotation=int)\n        parsed_param = FieldDefinition.from_parameter(param, {\"foo\": int})\n>       assert parsed_param.has_default is False\nE       AssertionError: assert True is False\nE        +  where True = FieldDefinition(raw=<class 'int'>, annotation=<class 'int'>, type_wrappers=set(), origin=None, args=(), metadata=(), i...afe_generic_origin=None, inner_types=(), default=<class 'inspect._empty'>, extra={}, kwarg_definition=None, name='foo').has_default\n\ntests/unit/test_utils/test_signature.py:124: AssertionError\n_____________________ test_field_definition_from_parameter _____________________\n\n    def test_field_definition_from_parameter() -> None:\n        \"\"\"Test FieldDefinition.\"\"\"\n        param = Parameter(\"foo\", Parameter.POSITIONAL_OR_KEYWORD, annotation=int)\n        parsed_param = FieldDefinition.from_parameter(param, {\"foo\": int})\n        assert parsed_param.name == \"foo\"\n>       assert parsed_param.default is Empty\nE       AssertionError: assert <class 'inspect._empty'> is <_EmptyEnum.EMPTY: 0>\nE        +  where <class 'inspect._empty'> = FieldDefinition(raw=<class 'int'>, annotation=<class 'int'>, type_wrappers=set(), origin=None, args=(), metadata=(), i...afe_generic_origin=None, inner_types=(), default=<class 'inspect._empty'>, extra={}, kwarg_definition=None, name='foo').default\n\ntests/unit/test_utils/test_signature.py:109: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_signature.py::test_field_definition_from_parameter_raises_improperly_configured_if_no_annotation\nFAILED tests/unit/test_utils/test_signature.py::test_field_definition_from_parameter_has_default_predicate\nFAILED tests/unit/test_utils/test_signature.py::test_field_definition_from_parameter\n========================= 3 failed, 1 passed in 0.11s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/responses.py-create_success_response": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_responses.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n__________________ test_create_response_for_response_subclass __________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f3142ef9750>\n\n    def test_create_response_for_response_subclass(create_factory: CreateFactoryFixture) -> None:\n        class CustomResponse(Response[T]):\n            pass\n    \n        @get(path=\"/test\", name=\"test\", signature_types=[CustomResponse])\n        def handler() -> CustomResponse[DataclassPerson]:\n            return CustomResponse(content=DataclassPersonFactory.build())\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler, True)\n        response = factory.create_success_response()\n    \n>       assert response.content\nE       AssertionError: assert None\nE        +  where None = OpenAPIResponse(description='Request fulfilled, document follows', headers={}, content=None, links=None).content\n\ntests/unit/test_openapi/test_responses.py:477: AssertionError\n______________________ test_response_generation_with_dto _______________________\n\nself = <MagicMock name='mock.create_openapi_schema' id='139849542423104'>\nargs = ()\nkwargs = {'field_definition': FieldDefinition(raw=typing.Dict[str, typing.Any], annotation=typing.Dict[str, typing.Any], type_w...34233654270752', 'schema_creator': <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f31424dbb00>}\nmsg = \"Expected 'create_openapi_schema' to be called once. Called 0 times.\"\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n>           raise AssertionError(msg)\nE           AssertionError: Expected 'create_openapi_schema' to be called once. Called 0 times.\n\n/usr/local/lib/python3.10/unittest/mock.py:930: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f3142efa440>\n\n    def test_response_generation_with_dto(create_factory: CreateFactoryFixture) -> None:\n        mock_dto = MagicMock(spec=AbstractDTO)\n        mock_dto.create_openapi_schema.return_value = Schema()\n    \n        @post(path=\"/form-upload\", return_dto=mock_dto)  # pyright: ignore\n        async def handler(data: Dict[str, Any]) -> Dict[str, Any]:\n            return data\n    \n        Litestar(route_handlers=[handler])\n    \n        factory = create_factory(handler)\n        field_definition = FieldDefinition.from_annotation(Dict[str, Any])\n        factory.create_success_response()\n>       mock_dto.create_openapi_schema.assert_called_once_with(\n            field_definition=field_definition, handler_id=handler.handler_id, schema_creator=factory.schema_creator\n        )\nE       AssertionError: Expected 'create_openapi_schema' to be called once. Called 0 times.\n\ntests/unit/test_openapi/test_responses.py:516: AssertionError\n_______________ test_create_success_response_with_response_class _______________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f31424d3f40>\n\n    def test_create_success_response_with_response_class(create_factory: CreateFactoryFixture) -> None:\n        @get(path=\"/test\", name=\"test\")\n        def handler() -> Response[DataclassPerson]:\n            return Response(content=DataclassPersonFactory.build())\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler, True)\n        response = factory.create_success_response()\n    \n>       assert response.content\nE       AssertionError: assert None\nE        +  where None = OpenAPIResponse(description='Request fulfilled, document follows', headers={}, content=None, links=None).content\n\ntests/unit/test_openapi/test_responses.py:237: AssertionError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_responses.py::test_create_response_for_response_subclass\nFAILED tests/unit/test_openapi/test_responses.py::test_response_generation_with_dto\nFAILED tests/unit/test_openapi/test_responses.py::test_create_success_response_with_response_class\n======================== 3 failed, 2 warnings in 0.13s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/responses.py-create_additional_responses": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_responses.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_create_additional_responses _______________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f6f2e2b1870>\n\n    def test_create_additional_responses(create_factory: CreateFactoryFixture) -> None:\n        @dataclass\n        class ServerError:\n            message: str\n    \n        class AuthenticationError(TypedDict):\n            message: str\n    \n        class UnknownError(TypedDict):\n            message: str\n    \n        @get(\n            responses={\n                401: ResponseSpec(data_container=AuthenticationError, description=\"Authentication error\"),\n                500: ResponseSpec(data_container=ServerError, generate_examples=False, media_type=MediaType.TEXT),\n                505: ResponseSpec(data_container=UnknownError),\n            }\n        )\n        def handler() -> DataclassPerson:\n            return DataclassPersonFactory.build()\n    \n        factory = create_factory(handler)\n        responses = factory.create_additional_responses()\n    \n>       first_response = next(responses)\n\ntests/unit/test_openapi/test_responses.py:372: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f6f2e364280>\n\n    def create_additional_responses(self) -> Iterator[tuple[str, OpenAPIResponse]]:\n        \"\"\"Create the schema for additional responses, if any.\"\"\"\n>       for status_code, response_handler in self.route_handler.additional_responses.items():\nE       AttributeError: 'get' object has no attribute 'additional_responses'\n\nlitestar/_openapi/responses.py:235: AttributeError\n________________ test_additional_responses_with_custom_examples ________________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f6f2e1977f0>\n\n    def test_additional_responses_with_custom_examples(create_factory: CreateFactoryFixture) -> None:\n        @get(responses={200: ResponseSpec(DataclassPerson, examples=[Example(value={\"string\": \"example\", \"number\": 1})])})\n        def handler() -> DataclassPerson:\n            return DataclassPersonFactory.build()\n    \n        factory = create_factory(handler)\n        responses = factory.create_additional_responses()\n>       status_code, response = next(responses)\n\ntests/unit/test_openapi/test_responses.py:450: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f6f2e2cf8e0>\n\n    def create_additional_responses(self) -> Iterator[tuple[str, OpenAPIResponse]]:\n        \"\"\"Create the schema for additional responses, if any.\"\"\"\n>       for status_code, response_handler in self.route_handler.additional_responses.items():\nE       AttributeError: 'get' object has no attribute 'additional_responses'\n\nlitestar/_openapi/responses.py:235: AttributeError\n________ test_create_success_response_no_content_explicit_responsespec _________\n\ncreate_factory = <function create_factory.<locals>._create_factory at 0x7f6f2e196dd0>\n\n    def test_create_success_response_no_content_explicit_responsespec(\n        create_factory: CreateFactoryFixture,\n    ) -> None:\n        @delete(\n            path=\"/test\",\n            responses={HTTP_204_NO_CONTENT: ResponseSpec(None, description=\"Custom description\")},\n            name=\"test\",\n        )\n        def handler() -> None:\n            return None\n    \n        handler = get_registered_route_handler(handler, \"test\")\n        factory = create_factory(handler)\n        responses = factory.create_additional_responses()\n>       status, response = next(responses)\n\ntests/unit/test_openapi/test_responses.py:300: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.responses.ResponseFactory object at 0x7f6f2e1cf1f0>\n\n    def create_additional_responses(self) -> Iterator[tuple[str, OpenAPIResponse]]:\n        \"\"\"Create the schema for additional responses, if any.\"\"\"\n>       for status_code, response_handler in self.route_handler.additional_responses.items():\nE       AttributeError: 'delete' object has no attribute 'additional_responses'\n\nlitestar/_openapi/responses.py:235: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_responses.py::test_create_additional_responses\nFAILED tests/unit/test_openapi/test_responses.py::test_additional_responses_with_custom_examples\nFAILED tests/unit/test_openapi/test_responses.py::test_create_success_response_no_content_explicit_responsespec\n======================== 3 failed, 2 warnings in 0.13s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/path_item.py-create_path_item": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_openapi/test_path_item.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n______________________ test_handler_excluded_from_schema _______________________\n\ncreate_factory = <function create_factory.<locals>.factory at 0x7f41ee611990>\n\n    def test_handler_excluded_from_schema(create_factory: CreateFactoryFixture) -> None:\n        @get(\"/\", sync_to_thread=False)\n        def handler_1() -> None: ...\n    \n        @delete(\"/\", include_in_schema=False, sync_to_thread=False)\n        def handler_2() -> None: ...\n    \n        app = Litestar(route_handlers=[handler_1, handler_2])\n        index = find_index(app.routes, lambda x: x.path_format == \"/\")\n        route_with_multiple_methods = cast(\"HTTPRoute\", app.routes[index])\n        factory = create_factory(route_with_multiple_methods)\n>       schema = factory.create_path_item()\n\ntests/unit/test_openapi/test_path_item.py:217: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/_openapi/path_item.py:40: in create_path_item\n    operation = self.create_operation_for_handler_method(route_handler, http_method)\nlitestar/_openapi/path_item.py:57: in create_operation_for_handler_method\n    operation_id = self.create_operation_id(route_handler, http_method)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.path_item.PathItemFactory object at 0x7f41ee658250>\nroute_handler = <litestar._kwargs.kwargs_model.KwargsModel object at 0x7f41ee5312d0>\nhttp_method = 'DELETE'\n\n    def create_operation_id(self, route_handler: HTTPRouteHandler, http_method: HttpMethod) -> str:\n        \"\"\"Create an operation id for a given route handler and http method.\n    \n        Adds the operation id to the context's operation id set, where it is checked for uniqueness.\n    \n        Args:\n            route_handler: A route handler instance.\n            http_method: An HttpMethod enum value.\n    \n        Returns:\n            An operation id string.\n        \"\"\"\n>       if isinstance(route_handler.operation_id, str):\nE       AttributeError: 'KwargsModel' object has no attribute 'operation_id'\n\nlitestar/_openapi/path_item.py:96: AttributeError\n_______________ test_create_path_item_use_handler_docstring_true _______________\n\nroute = <litestar.routes.http.HTTPRoute object at 0x7f41ee5c90e0>\ncreate_factory = <function create_factory.<locals>.factory at 0x7f41edc4a830>\n\n    def test_create_path_item_use_handler_docstring_true(route: HTTPRoute, create_factory: CreateFactoryFixture) -> None:\n        factory = create_factory(route)\n        factory.context.openapi_config.use_handler_docstrings = True\n>       schema = factory.create_path_item()\n\ntests/unit/test_openapi/test_path_item.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/_openapi/path_item.py:40: in create_path_item\n    operation = self.create_operation_for_handler_method(route_handler, http_method)\nlitestar/_openapi/path_item.py:57: in create_operation_for_handler_method\n    operation_id = self.create_operation_id(route_handler, http_method)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.path_item.PathItemFactory object at 0x7f41ee5e90f0>\nroute_handler = <litestar._kwargs.kwargs_model.KwargsModel object at 0x7f41edc49c60>\nhttp_method = 'GET'\n\n    def create_operation_id(self, route_handler: HTTPRouteHandler, http_method: HttpMethod) -> str:\n        \"\"\"Create an operation id for a given route handler and http method.\n    \n        Adds the operation id to the context's operation id set, where it is checked for uniqueness.\n    \n        Args:\n            route_handler: A route handler instance.\n            http_method: An HttpMethod enum value.\n    \n        Returns:\n            An operation id string.\n        \"\"\"\n>       if isinstance(route_handler.operation_id, str):\nE       AttributeError: 'KwargsModel' object has no attribute 'operation_id'\n\nlitestar/_openapi/path_item.py:96: AttributeError\n______________ test_create_path_item_use_handler_docstring_false _______________\n\nroute = <litestar.routes.http.HTTPRoute object at 0x7f41ee5caf10>\ncreate_factory = <function create_factory.<locals>.factory at 0x7f41edc8e200>\n\n    def test_create_path_item_use_handler_docstring_false(route: HTTPRoute, create_factory: CreateFactoryFixture) -> None:\n        factory = create_factory(route)\n        assert not factory.context.openapi_config.use_handler_docstrings\n>       schema = factory.create_path_item()\n\ntests/unit/test_openapi/test_path_item.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/_openapi/path_item.py:40: in create_path_item\n    operation = self.create_operation_for_handler_method(route_handler, http_method)\nlitestar/_openapi/path_item.py:57: in create_operation_for_handler_method\n    operation_id = self.create_operation_id(route_handler, http_method)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.path_item.PathItemFactory object at 0x7f41edc900a0>\nroute_handler = <litestar._kwargs.kwargs_model.KwargsModel object at 0x7f41edc8d630>\nhttp_method = 'PATCH'\n\n    def create_operation_id(self, route_handler: HTTPRouteHandler, http_method: HttpMethod) -> str:\n        \"\"\"Create an operation id for a given route handler and http method.\n    \n        Adds the operation id to the context's operation id set, where it is checked for uniqueness.\n    \n        Args:\n            route_handler: A route handler instance.\n            http_method: An HttpMethod enum value.\n    \n        Returns:\n            An operation id string.\n        \"\"\"\n>       if isinstance(route_handler.operation_id, str):\nE       AttributeError: 'KwargsModel' object has no attribute 'operation_id'\n\nlitestar/_openapi/path_item.py:96: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_path_item.py::test_handler_excluded_from_schema\nFAILED tests/unit/test_openapi/test_path_item.py::test_create_path_item_use_handler_docstring_true\nFAILED tests/unit/test_openapi/test_path_item.py::test_create_path_item_use_handler_docstring_false\n======================== 3 failed, 2 warnings in 0.14s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/schema_generation/schema.py-for_field_definition": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py FFFFFFF            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_create_for_computed_field[True] _____________________\n\nprefer_alias = True\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f42cb9be600>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        if field_definition.is_optional:\n            return self.for_optional_field(field_definition)\n    \n        if field_definition.is_union:\n            return self.for_union_field(field_definition)\n    \n        if field_definition.is_literal:\n            return create_literal_schema(field_definition.annotation, include_null=field_definition.is_optional)\n    \n>       if field_definition.is_enum:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_enum'\n\nlitestar/_openapi/schema_generation/schema.py:335: AttributeError\n____________________ test_create_for_computed_field[False] _____________________\n\nprefer_alias = False\n\n    @pytest.mark.parametrize(\"prefer_alias\", [True, False])\n    def test_create_for_computed_field(prefer_alias: bool) -> None:\n        class Sample(pydantic_v2.BaseModel):\n            property_one: str\n    \n            @pydantic_v2.computed_field(\n                description=\"a description\", title=\"a title\", alias=\"prop_two\" if prefer_alias else None\n            )\n            def property_two(self) -> bool:\n                return True\n    \n        field_definition = FieldDefinition.from_annotation(Sample)\n        schema_creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       ref = schema_creator.for_field_definition(field_definition)\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:678: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f42cb990240>\nfield_definition = FieldDefinition(raw=<class 'tests.unit.test_contrib.test_pydantic.test_openapi.test_create_for_computed_field.<locals>...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        if field_definition.is_optional:\n            return self.for_optional_field(field_definition)\n    \n        if field_definition.is_union:\n            return self.for_union_field(field_definition)\n    \n        if field_definition.is_literal:\n            return create_literal_schema(field_definition.annotation, include_null=field_definition.is_optional)\n    \n>       if field_definition.is_enum:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_enum'\n\nlitestar/_openapi/schema_generation/schema.py:335: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7f42cb7ed900>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f42cb782240>\nfield_definition = FieldDefinition(raw=<class 'czyzwaxuac.Foo'>, annotation=<class 'czyzwaxuac.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        if field_definition.is_optional:\n            return self.for_optional_field(field_definition)\n    \n        if field_definition.is_union:\n            return self.for_union_field(field_definition)\n    \n        if field_definition.is_literal:\n            return create_literal_schema(field_definition.annotation, include_null=field_definition.is_optional)\n    \n>       if field_definition.is_enum:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_enum'\n\nlitestar/_openapi/schema_generation/schema.py:335: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7f42cb86d510>\npydantic_version = 'v1'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f42cb79fb80>\nfield_definition = FieldDefinition(raw=<class 'raiqxnlnmt.Foo'>, annotation=<class 'raiqxnlnmt.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        if field_definition.is_optional:\n            return self.for_optional_field(field_definition)\n    \n        if field_definition.is_union:\n            return self.for_union_field(field_definition)\n    \n        if field_definition.is_literal:\n            return create_literal_schema(field_definition.annotation, include_null=field_definition.is_optional)\n    \n>       if field_definition.is_enum:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_enum'\n\nlitestar/_openapi/schema_generation/schema.py:335: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True] _\n\nwith_future_annotations = True\ncreate_module = <function create_module.<locals>.wrapped at 0x7f42cb86c1f0>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f42cb625800>\nfield_definition = FieldDefinition(raw=<class 'lqaqrowunm.Foo'>, annotation=<class 'lqaqrowunm.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        if field_definition.is_optional:\n            return self.for_optional_field(field_definition)\n    \n        if field_definition.is_union:\n            return self.for_union_field(field_definition)\n    \n        if field_definition.is_literal:\n            return create_literal_schema(field_definition.annotation, include_null=field_definition.is_optional)\n    \n>       if field_definition.is_enum:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_enum'\n\nlitestar/_openapi/schema_generation/schema.py:335: AttributeError\n_ test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False] _\n\nwith_future_annotations = False\ncreate_module = <function create_module.<locals>.wrapped at 0x7f42cb86dab0>\npydantic_version = 'v2'\n\n    @pytest.mark.parametrize(\"with_future_annotations\", [True, False])\n    def test_create_schema_for_pydantic_model_with_annotated_model_attribute(\n        with_future_annotations: bool, create_module: \"Callable[[str], ModuleType]\", pydantic_version: PydanticVersion\n    ) -> None:\n        \"\"\"Test that a model with an annotated attribute is correctly handled.\"\"\"\n        module = create_module(\n            f\"\"\"\n    {'from __future__ import annotations' if with_future_annotations else ''}\n    from typing_extensions import Annotated\n    {'from pydantic import BaseModel' if pydantic_version == 'v2' else 'from pydantic.v1 import BaseModel'}\n    \n    class Foo(BaseModel):\n        foo: Annotated[int, \"Foo description\"]\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Foo))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:620: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f42cb834180>\nfield_definition = FieldDefinition(raw=<class 'dxndngoipk.Foo'>, annotation=<class 'dxndngoipk.Foo'>, type_wrappers=set(), origin=None, a...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        if field_definition.is_optional:\n            return self.for_optional_field(field_definition)\n    \n        if field_definition.is_union:\n            return self.for_union_field(field_definition)\n    \n        if field_definition.is_literal:\n            return create_literal_schema(field_definition.annotation, include_null=field_definition.is_optional)\n    \n>       if field_definition.is_enum:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_enum'\n\nlitestar/_openapi/schema_generation/schema.py:335: AttributeError\n____ test_create_schema_for_pydantic_model_with_unhashable_literal_default _____\n\ncreate_module = <function create_module.<locals>.wrapped at 0x7f42cb86e320>\n\n    def test_create_schema_for_pydantic_model_with_unhashable_literal_default(\n        create_module: \"Callable[[str], ModuleType]\",\n    ) -> None:\n        \"\"\"Test that a model with unhashable literal defaults is correctly handled.\"\"\"\n        module = create_module(\n            \"\"\"\n    from pydantic import BaseModel, Field\n    \n    class Model(BaseModel):\n        id: int\n        dict_default: dict = {}\n        dict_default_in_field: dict = Field(default={})\n        dict_default_in_factory: dict = Field(default_factory=dict)\n        list_default: list = []\n        list_default_in_field: list = Field(default=[])\n        list_default_in_factory: list = Field(default_factory=list)\n    \"\"\"\n        )\n        creator = SchemaCreator(plugins=[PydanticSchemaPlugin()])\n>       creator.for_field_definition(FieldDefinition.from_annotation(module.Model))\n\ntests/unit/test_contrib/test_pydantic/test_openapi.py:645: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar._openapi.schema_generation.schema.SchemaCreator object at 0x7f42cb8373c0>\nfield_definition = FieldDefinition(raw=<class 'zmpgcnptxq.Model'>, annotation=<class 'zmpgcnptxq.Model'>, type_wrappers=set(), origin=Non...one, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')\n\n    def for_field_definition(self, field_definition: FieldDefinition) -> Schema | Reference:\n        \"\"\"Create a Schema for a given FieldDefinition.\n    \n        Args:\n            field_definition: A signature field instance.\n    \n        Returns:\n            A schema instance.\n        \"\"\"\n        if field_definition.is_optional:\n            return self.for_optional_field(field_definition)\n    \n        if field_definition.is_union:\n            return self.for_union_field(field_definition)\n    \n        if field_definition.is_literal:\n            return create_literal_schema(field_definition.annotation, include_null=field_definition.is_optional)\n    \n>       if field_definition.is_enum:\nE       AttributeError: 'FieldDefinition' object has no attribute 'is_enum'\n\nlitestar/_openapi/schema_generation/schema.py:335: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_for_computed_field[False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v1-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-True]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_annotated_model_attribute[v2-False]\nFAILED tests/unit/test_contrib/test_pydantic/test_openapi.py::test_create_schema_for_pydantic_model_with_unhashable_literal_default\n============================== 7 failed in 0.25s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_openapi/typescript_converter/converter.py-convert_openapi_to_typescript": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_ ERROR collecting tests/unit/test_openapi/test_typescript_converter/test_converter.py _\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/unit/test_openapi/test_typescript_converter/test_converter.py:6: in <module>\n    from litestar._openapi.typescript_converter.converter import (\nE     File \"/root/repos/py_data/litestar/litestar/_openapi/typescript_converter/converter.py\", line 254\nE       from __future__ import annotations\nE       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   SyntaxError: from __future__ imports must occur at the beginning of the file\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/unit/test_openapi/test_typescript_converter/test_converter.py\n========================= 2 warnings, 1 error in 0.09s =========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_openapi/test_typescript_converter/test_converter.py::test_openapi_to_typescript_converter\n\n"], "litestar-litestar/_openapi/typescript_converter/types.py-write": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py . [ 11%]\n.FF.F...                                                                 [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_typescript_named_interface ________________________\n\n    def test_typescript_named_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n>       assert interface.write() == \"export interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\"\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/_openapi/typescript_converter/types.py:220: in write\n    return f\"export interface {self.name} {interface.write()};\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TypeScriptAnonymousInterface(properties=(TypeScriptProperty(required=True, key='aProp', value=TypeScriptPrimitive(type='string')), TypeScriptProperty(required=True, key='bProp', value=TypeScriptPrimitive(type='number'))))\n\n    def write(self) -> str:\n        \"\"\"Write a typescript intersection value.\n    \n        Example:\n            { prop: string } & { another: number }\n    \n        Returns:\n            A typescript string\n        \"\"\"\n>       return \" & \".join(sorted(t.write() for t in self.types))\nE       AttributeError: 'TypeScriptAnonymousInterface' object has no attribute 'types'\n\nlitestar/_openapi/typescript_converter/types.py:196: AttributeError\n__________________________ test_typescript_namespace ___________________________\n\n    def test_typescript_namespace() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptInterface(name=\"MyInterface\", properties=(first_prop, second_prop))\n    \n        enum = TypeScriptEnum(name=\"MyEnum\", values=((\"FIRST\", \"a\"), (\"SECOND\", \"b\")))\n        namespace = TypeScriptNamespace(\"MyNamespace\", values=(interface, enum))\n    \n>       assert (\n            namespace.write()\n            == 'export namespace MyNamespace {\\n\\texport enum MyEnum {\\n\\tFIRST = \"a\",\\n\\tSECOND = \"b\",\\n};\\n\\n\\texport interface MyInterface {\\n\\taProp: string;\\n\\tbProp: number;\\n};\\n};'\n        )\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/_openapi/typescript_converter/types.py:304: in write\n    members = \"\\t\" + \"\\n\\n\\t\".join([value.write() for value in sorted(self.values, key=lambda el: el.name)])\nlitestar/_openapi/typescript_converter/types.py:304: in <listcomp>\n    members = \"\\t\" + \"\\n\\n\\t\".join([value.write() for value in sorted(self.values, key=lambda el: el.name)])\nlitestar/_openapi/typescript_converter/types.py:220: in write\n    return f\"export interface {self.name} {interface.write()};\"\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TypeScriptAnonymousInterface(properties=(TypeScriptProperty(required=True, key='aProp', value=TypeScriptPrimitive(type='string')), TypeScriptProperty(required=True, key='bProp', value=TypeScriptPrimitive(type='number'))))\n\n    def write(self) -> str:\n        \"\"\"Write a typescript intersection value.\n    \n        Example:\n            { prop: string } & { another: number }\n    \n        Returns:\n            A typescript string\n        \"\"\"\n>       return \" & \".join(sorted(t.write() for t in self.types))\nE       AttributeError: 'TypeScriptAnonymousInterface' object has no attribute 'types'\n\nlitestar/_openapi/typescript_converter/types.py:196: AttributeError\n_____________________ test_typescript_anonymous_interface ______________________\n\n    def test_typescript_anonymous_interface() -> None:\n        first_prop = TypeScriptProperty(required=True, key=\"aProp\", value=TypeScriptPrimitive(\"string\"))\n        second_prop = TypeScriptProperty(required=True, key=\"bProp\", value=TypeScriptPrimitive(\"number\"))\n        interface = TypeScriptAnonymousInterface(properties=(first_prop, second_prop))\n>       assert interface.write() == \"{\\n\\taProp: string;\\n\\tbProp: number;\\n}\"\n\ntests/unit/test_openapi/test_typescript_converter/test_typescript_types.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TypeScriptAnonymousInterface(properties=(TypeScriptProperty(required=True, key='aProp', value=TypeScriptPrimitive(type='string')), TypeScriptProperty(required=True, key='bProp', value=TypeScriptPrimitive(type='number'))))\n\n    def write(self) -> str:\n        \"\"\"Write a typescript intersection value.\n    \n        Example:\n            { prop: string } & { another: number }\n    \n        Returns:\n            A typescript string\n        \"\"\"\n>       return \" & \".join(sorted(t.write() for t in self.types))\nE       AttributeError: 'TypeScriptAnonymousInterface' object has no attribute 'types'\n\nlitestar/_openapi/typescript_converter/types.py:196: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_named_interface\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_namespace\nFAILED tests/unit/test_openapi/test_typescript_converter/test_typescript_types.py::test_typescript_anonymous_interface\n=================== 3 failed, 6 passed, 2 warnings in 0.09s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/testing/helpers.py-create_test_client": ["FAILED: No code block"], "litestar-litestar/testing/client/sync_client.py-websocket_connect": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/examples/test_websockets.py .                                      [100%]\n\n============================== 1 passed in 0.22s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/contrib/pydantic/pydantic_schema_plugin.py-for_pydantic_model": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 5 items\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py FFFFF        [100%]\n\n=================================== FAILURES ===================================\n____________ test_exclude_private_fields[V1ModelWithPrivateFields] _____________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1ModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/contrib/pydantic/pydantic_schema_plugin.py:260: in for_pydantic_model\n    type_hints = pydantic_get_type_hints_with_generics_resolved(model_class)\nlitestar/contrib/pydantic/utils.py:137: in pydantic_get_type_hints_with_generics_resolved\n    return get_type_hints_with_generics_resolved(annotation, type_hints=model_annotations)\nlitestar/utils/typing.py:262: in get_type_hints_with_generics_resolved\n    type_hints = get_type_hints(annotation, globalns=globalns, localns=localns, include_extras=include_extras)\n/usr/local/lib/python3.10/site-packages/typing_extensions.py:1230: in get_type_hints\n    hint = typing.get_type_hints(\n/usr/local/lib/python3.10/typing.py:1808: in get_type_hints\n    value = _eval_type(value, base_globals, base_locals)\n/usr/local/lib/python3.10/typing.py:326: in _eval_type\n    return t._evaluate(globalns, localns, recursive_guard)\n/usr/local/lib/python3.10/typing.py:691: in _evaluate\n    eval(self.__forward_code__, globalns, localns),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   ???\nE   NameError: name 'foo' is not defined\n\n<string>:1: NameError\n_________ test_exclude_private_fields[V1GenericModelWithPrivateFields] _________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V1GenericModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/contrib/pydantic/pydantic_schema_plugin.py:260: in for_pydantic_model\n    type_hints = pydantic_get_type_hints_with_generics_resolved(model_class)\nlitestar/contrib/pydantic/utils.py:137: in pydantic_get_type_hints_with_generics_resolved\n    return get_type_hints_with_generics_resolved(annotation, type_hints=model_annotations)\nlitestar/utils/typing.py:262: in get_type_hints_with_generics_resolved\n    type_hints = get_type_hints(annotation, globalns=globalns, localns=localns, include_extras=include_extras)\n/usr/local/lib/python3.10/site-packages/typing_extensions.py:1230: in get_type_hints\n    hint = typing.get_type_hints(\n/usr/local/lib/python3.10/typing.py:1808: in get_type_hints\n    value = _eval_type(value, base_globals, base_locals)\n/usr/local/lib/python3.10/typing.py:326: in _eval_type\n    return t._evaluate(globalns, localns, recursive_guard)\n/usr/local/lib/python3.10/typing.py:691: in _evaluate\n    eval(self.__forward_code__, globalns, localns),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   ???\nE   NameError: name 'foo' is not defined\n\n<string>:1: NameError\n____________ test_exclude_private_fields[V2ModelWithPrivateFields] _____________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2ModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/contrib/pydantic/pydantic_schema_plugin.py:260: in for_pydantic_model\n    type_hints = pydantic_get_type_hints_with_generics_resolved(model_class)\nlitestar/contrib/pydantic/utils.py:142: in pydantic_get_type_hints_with_generics_resolved\n    model_annotations = get_type_hints(\n/usr/local/lib/python3.10/site-packages/typing_extensions.py:1230: in get_type_hints\n    hint = typing.get_type_hints(\n/usr/local/lib/python3.10/typing.py:1808: in get_type_hints\n    value = _eval_type(value, base_globals, base_locals)\n/usr/local/lib/python3.10/typing.py:326: in _eval_type\n    return t._evaluate(globalns, localns, recursive_guard)\n/usr/local/lib/python3.10/typing.py:691: in _evaluate\n    eval(self.__forward_code__, globalns, localns),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   ???\nE   NameError: name 'foo' is not defined\n\n<string>:1: NameError\n_________ test_exclude_private_fields[V2GenericModelWithPrivateFields] _________\n\nmodel_class = <class 'tests.unit.test_contrib.test_pydantic.test_schema_plugin.V2GenericModelWithPrivateFields'>\n\n    @pytest.mark.parametrize(\n        \"model_class\",\n        [\n            V1ModelWithPrivateFields,\n            V1GenericModelWithPrivateFields,\n            V2ModelWithPrivateFields,\n            V2GenericModelWithPrivateFields,\n        ],\n    )\n    def test_exclude_private_fields(model_class: Type[Union[pydantic_v1.BaseModel, pydantic_v2.BaseModel]]) -> None:\n        # https://github.com/litestar-org/litestar/issues/3150\n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(model_class), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/contrib/pydantic/pydantic_schema_plugin.py:260: in for_pydantic_model\n    type_hints = pydantic_get_type_hints_with_generics_resolved(model_class)\nlitestar/contrib/pydantic/utils.py:142: in pydantic_get_type_hints_with_generics_resolved\n    model_annotations = get_type_hints(\n/usr/local/lib/python3.10/site-packages/typing_extensions.py:1230: in get_type_hints\n    hint = typing.get_type_hints(\n/usr/local/lib/python3.10/typing.py:1808: in get_type_hints\n    value = _eval_type(value, base_globals, base_locals)\n/usr/local/lib/python3.10/typing.py:326: in _eval_type\n    return t._evaluate(globalns, localns, recursive_guard)\n/usr/local/lib/python3.10/typing.py:691: in _evaluate\n    eval(self.__forward_code__, globalns, localns),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   ???\nE   NameError: name 'foo' is not defined\n\n<string>:1: NameError\n_________________________ test_v2_constrained_secrets __________________________\n\n    def test_v2_constrained_secrets() -> None:\n        # https://github.com/litestar-org/litestar/issues/3148\n        class Model(pydantic_v2.BaseModel):\n            string: pydantic_v2.SecretStr = pydantic_v2.Field(min_length=1)\n            bytes_: pydantic_v2.SecretBytes = pydantic_v2.Field(min_length=1)\n    \n>       schema = PydanticSchemaPlugin.for_pydantic_model(\n            FieldDefinition.from_annotation(Model), schema_creator=SchemaCreator(plugins=[PydanticSchemaPlugin()])\n        )\n\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/contrib/pydantic/pydantic_schema_plugin.py:275: in for_pydantic_model\n    required_fields = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <dict_itemiterator object at 0x7f7433a1d850>\n\n    required_fields = [\n        field_name\n        for field_name, field_type in all_fields.items()\n>       if not is_pydantic_undefined(getattr(model_class.__fields__[field_name].field_info, \"default\", Empty))\n    ]\nE   AttributeError: 'FieldInfo' object has no attribute 'field_info'\n\nlitestar/contrib/pydantic/pydantic_schema_plugin.py:278: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V1ModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V1GenericModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V2ModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_exclude_private_fields[V2GenericModelWithPrivateFields]\nFAILED tests/unit/test_contrib/test_pydantic/test_schema_plugin.py::test_v2_constrained_secrets\n============================== 5 failed in 0.39s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_kwargs/cleanup.py-cleanup": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/unit/test_kwargs/test_cleanup_group.py FFFF                        [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_add_on_closed_raises ___________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7fe6eb860510>\nasync_generator = <async_generator object async_generator.<locals>.func at 0x7fe6eb83e2c0>\n\n    async def test_add_on_closed_raises(\n        generator: Generator[str, None, None], async_generator: AsyncGenerator[str, None]\n    ) -> None:\n        next(generator)\n        group = DependencyCleanupGroup([generator])\n    \n        await group.cleanup()\n    \n>       with pytest.raises(RuntimeError):\nE       Failed: DID NOT RAISE <class 'RuntimeError'>\n\ntests/unit/test_kwargs/test_cleanup_group.py:90: Failed\n____________________________ test_cleanup_multiple _____________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7fe6eb74cc80>\nasync_generator = <async_generator object async_generator.<locals>.func at 0x7fe6eb83ddc0>\ncleanup_mock = <MagicMock id='140629769535152'>\nasync_cleanup_mock = <MagicMock id='140629769526560'>\n\n    async def test_cleanup_multiple(\n        generator: Generator[str, None, None],\n        async_generator: AsyncGenerator[str, None],\n        cleanup_mock: MagicMock,\n        async_cleanup_mock: MagicMock,\n    ) -> None:\n        next(generator)\n        await async_next(async_generator)\n        group = DependencyCleanupGroup([generator, async_generator])\n    \n        await group.cleanup()\n    \n        cleanup_mock.assert_called_once()\n        async_cleanup_mock.assert_called_once()\n>       assert group._closed\nE       assert False\nE        +  where False = <litestar._kwargs.cleanup.DependencyCleanupGroup object at 0x7fe6eb6c87f0>._closed\n\ntests/unit/test_kwargs/test_cleanup_group.py:70: AssertionError\n________________________ test_cleanup_on_closed_raises _________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7fe6eb74cdd0>\n\n    async def test_cleanup_on_closed_raises(generator: Generator[str, None, None]) -> None:\n        next(generator)\n        group = DependencyCleanupGroup([generator])\n    \n        await group.cleanup()\n>       with pytest.raises(RuntimeError):\nE       Failed: DID NOT RAISE <class 'RuntimeError'>\n\ntests/unit/test_kwargs/test_cleanup_group.py:78: Failed\n_________________________________ test_cleanup _________________________________\n\ngenerator = <generator object generator.<locals>.func at 0x7fe6eb74d5b0>\ncleanup_mock = <MagicMock id='140629769883360'>\n\n    async def test_cleanup(generator: Generator[str, None, None], cleanup_mock: MagicMock) -> None:\n        next(generator)\n        group = DependencyCleanupGroup([generator])\n    \n        await group.cleanup()\n    \n        cleanup_mock.assert_called_once()\n>       assert group._closed\nE       assert False\nE        +  where False = <litestar._kwargs.cleanup.DependencyCleanupGroup object at 0x7fe6eb720160>._closed\n\ntests/unit/test_kwargs/test_cleanup_group.py:53: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_add_on_closed_raises\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_multiple - ...\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup_on_closed_raises\nFAILED tests/unit/test_kwargs/test_cleanup_group.py::test_cleanup - assert False\n============================== 4 failed in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/_asgi/routing_trie/mapping.py-build_route_middleware_stack": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py FFF               [100%]\n\n=================================== FAILURES ===================================\n_______________ test_build_route_middleware_stack_no_middleware ________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ff58f7024d0>\n\n    def test_build_route_middleware_stack_no_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # if there is no middleware for the route, then we don't need to wrap route.handle in\n        # exception handling middleware. Exceptions can safely be caught by the outermost exception\n        # handling middleware.\n    \n        @get(\"/\")\n        async def handler() -> None:\n            pass\n    \n>       app = Litestar(route_handlers=[handler], openapi_config=None)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7ff58f70ecd0>\nroute = <litestar.routes.http.HTTPRoute object at 0x7ff58f518350>\nroute_handler = <litestar.handlers.http_handlers.decorators.get object at 0x5580c84a2c10>\n\n    def build_route_middleware_stack(\n        app: \"Litestar\",\n        route: \"HTTPRoute | WebSocketRoute | ASGIRoute\",\n        route_handler: \"RouteHandlerType\",\n    ) -> ASGIApp:\n        \"\"\"Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n        # Assuming `wrap_in_exception_handler` is a utility function that wraps the route handler in exception handling middleware\n>       return wrap_in_exception_handler(app, route_handler)\nE       TypeError: wrap_in_exception_handler() takes 1 positional argument but 2 were given\n\nlitestar/_asgi/routing_trie/mapping.py:190: TypeError\n______________ test_build_route_middleware_stack_with_middleware _______________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ff58f534340>\n\n    def test_build_route_middleware_stack_with_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # proves that if there is middleware, the route handler is wrapped in the exception handling\n        # middleware, before being wrapped in the middleware stack.\n        mock_middleware = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[mock_middleware])\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7ff58f65d780>\nroute = <litestar.routes.http.HTTPRoute object at 0x7ff58f5b6a40>\nroute_handler = <litestar.handlers.http_handlers.base.HTTPRouteHandler object at 0x5580c850d6c0>\n\n    def build_route_middleware_stack(\n        app: \"Litestar\",\n        route: \"HTTPRoute | WebSocketRoute | ASGIRoute\",\n        route_handler: \"RouteHandlerType\",\n    ) -> ASGIApp:\n        \"\"\"Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n        # Assuming `wrap_in_exception_handler` is a utility function that wraps the route handler in exception handling middleware\n>       return wrap_in_exception_handler(app, route_handler)\nE       TypeError: wrap_in_exception_handler() takes 1 positional argument but 2 were given\n\nlitestar/_asgi/routing_trie/mapping.py:190: TypeError\n_________ test_build_route_middleware_stack_with_starlette_middleware __________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7ff58f40fb80>\n\n    def test_build_route_middleware_stack_with_starlette_middleware(monkeypatch: pytest.MonkeyPatch) -> None:\n        # test our support for starlette's Middleware class\n        class Middleware:\n            \"\"\"A Starlette ``Middleware`` class.\n    \n            See https://github.com/encode/starlette/blob/23c81da94b57701eabd43f582093442e6811f81d/starlette/middleware/__init__.py#L4-L17\n            \"\"\"\n    \n            def __init__(self, cls: Any, **options: Any) -> None:\n                self.cls = cls\n                self.options = options\n    \n            def __iter__(self) -> Iterator[Any]:\n                as_tuple = (self.cls, self.options)\n                return iter(as_tuple)\n    \n        mock_middleware = MagicMock()\n        mock_middleware_arg = MagicMock()\n        del mock_middleware.__iter__\n    \n        @get(\"/\", middleware=[Middleware(mock_middleware, arg=mock_middleware_arg)])  # type: ignore[list-item]\n        async def handler() -> None:\n            pass\n    \n        route = HTTPRoute(path=\"/\", route_handlers=[handler])\n>       build_route_middleware_stack(app=Litestar(), route=route, route_handler=handler)\n\ntests/unit/test_asgi/test_routing_trie/test_mapping.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/app.py:484: in __init__\n    self.register(route_handler)\nlitestar/app.py:680: in register\n    self.asgi_router.construct_routing_trie()\nlitestar/_asgi/asgi_router.py:147: in construct_routing_trie\n    add_route_to_trie(\nlitestar/_asgi/routing_trie/mapping.py:122: in add_route_to_trie\n    configure_node(route=route, app=app, node=current_node)\nlitestar/_asgi/routing_trie/mapping.py:150: in configure_node\n    asgi_app=build_route_middleware_stack(app=app, route=route, route_handler=handler),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napp = <litestar.app.Litestar object at 0x7ff58f65e320>\nroute = <litestar.routes.http.HTTPRoute object at 0x7ff58f5c2c70>\nroute_handler = <litestar.handlers.http_handlers.base.HTTPRouteHandler object at 0x5580c8533030>\n\n    def build_route_middleware_stack(\n        app: \"Litestar\",\n        route: \"HTTPRoute | WebSocketRoute | ASGIRoute\",\n        route_handler: \"RouteHandlerType\",\n    ) -> ASGIApp:\n        \"\"\"Construct a middleware stack that serves as the point of entry for each route.\n    \n        Args:\n            app: The Litestar app instance.\n            route: The route that is being added.\n            route_handler: The route handler that is being wrapped.\n    \n        Returns:\n            An ASGIApp that is composed of a \"stack\" of middlewares.\n        \"\"\"\n        # Assuming `wrap_in_exception_handler` is a utility function that wraps the route handler in exception handling middleware\n>       return wrap_in_exception_handler(app, route_handler)\nE       TypeError: wrap_in_exception_handler() takes 1 positional argument but 2 were given\n\nlitestar/_asgi/routing_trie/mapping.py:190: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_no_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_middleware\nFAILED tests/unit/test_asgi/test_routing_trie/test_mapping.py::test_build_route_middleware_stack_with_starlette_middleware\n============================== 3 failed in 0.17s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/signature.py-from_fn": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 12 items\n\ntests/unit/test_signature/test_validation.py .                           [  8%]\ntests/unit/test_response/test_response_to_asgi_response.py ..            [ 25%]\ntests/unit/test_signature/test_parsing.py ..                             [ 41%]\ntests/unit/test_utils/test_signature.py .                                [ 50%]\ntests/unit/test_signature/test_parsing.py ..                             [ 66%]\ntests/unit/test_signature/test_validation.py ...                         [ 91%]\ntests/unit/test_signature/test_parsing.py .                              [100%]\n\n============================== 12 passed in 0.19s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/deprecation.py-deprecated": ["FAILED: No code block"], "litestar-litestar/utils/sync.py-ensure_async_callable": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 31, in <module>\n    from .sync import AsyncIteratorWrapper, ensure_async_callable\n  File \"/root/repos/py_data/litestar/litestar/utils/sync.py\", line 28, in <module>\n    from litestar.utils.sync import AsyncCallable\nImportError: cannot import name 'AsyncCallable' from partially initialized module 'litestar.utils.sync' (most likely due to a circular import) (/root/repos/py_data/litestar/litestar/utils/sync.py)\n\n\n"], "litestar-litestar/utils/typing.py-expand_type_var_in_type_hint": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_typing.py ...FF...FF                          [100%]\n\n=================================== FAILURES ===================================\n_____ test_expand_type_var_in_type_hints[type_hint3-namespace3-expected3] ______\n\ntype_hint = {'arg1': ~T, 'return': <class 'int'>}\nnamespace = {~T: <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nexpected = {'arg1': <class 'tests.unit.test_utils.test_typing.ConcreteT'>, 'return': <class 'int'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': ~T, ...<class 'int'>} == {'arg1': <cla...<class 'int'>}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'arg1': ~T} != {'arg1': <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n_____ test_expand_type_var_in_type_hints[type_hint4-namespace4-expected4] ______\n\ntype_hint = {'arg1': ~T, 'return': <class 'int'>}\nnamespace = {~T: <class 'int'>}\nexpected = {'arg1': <class 'int'>, 'return': <class 'int'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': ~T, ...<class 'int'>} == {'arg1': <cla...<class 'int'>}\nE         \nE         Omitting 1 identical items, use -vv to show\nE         Differing items:\nE         {'arg1': ~T} != {'arg1': <class 'int'>}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n_____ test_expand_type_var_in_type_hints[type_hint8-namespace8-expected8] ______\n\ntype_hint = {'arg1': ~T, 'return': ~T}\nnamespace = {~T: <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nexpected = {'arg1': <class 'tests.unit.test_utils.test_typing.ConcreteT'>, 'return': <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': ~T, 'return': ~T} == {'arg1': <cla...g.ConcreteT'>}\nE         \nE         Differing items:\nE         {'return': ~T} != {'return': <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nE         {'arg1': ~T} != {'arg1': <class 'tests.unit.test_utils.test_typing.ConcreteT'>}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n_____ test_expand_type_var_in_type_hints[type_hint9-namespace9-expected9] ______\n\ntype_hint = {'arg1': ~T, 'return': ~T}, namespace = {~T: <class 'int'>}\nexpected = {'arg1': <class 'int'>, 'return': <class 'int'>}\n\n    @pytest.mark.parametrize(\n        (\"type_hint\", \"namespace\", \"expected\"),\n        (\n            ({\"arg1\": T, \"return\": int}, {}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, None, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {U: ConcreteT}, {\"arg1\": T, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": int}),\n            ({\"arg1\": T, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, None, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": int, \"return\": int}, {T: int}, {\"arg1\": int, \"return\": int}),\n            ({\"arg1\": T, \"return\": T}, {T: ConcreteT}, {\"arg1\": ConcreteT, \"return\": ConcreteT}),\n            ({\"arg1\": T, \"return\": T}, {T: int}, {\"arg1\": int, \"return\": int}),\n        ),\n    )\n    def test_expand_type_var_in_type_hints(\n        type_hint: dict[str, Any], namespace: dict[str, Any] | None, expected: dict[str, Any]\n    ) -> None:\n>       assert expand_type_var_in_type_hint(type_hint, namespace) == expected\nE       AssertionError: assert {'arg1': ~T, 'return': ~T} == {'arg1': <cla...<class 'int'>}\nE         \nE         Differing items:\nE         {'return': ~T} != {'return': <class 'int'>}\nE         {'arg1': ~T} != {'arg1': <class 'int'>}\nE         Use -v to get more diff\n\ntests/unit/test_utils/test_typing.py:161: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint3-namespace3-expected3]\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint4-namespace4-expected4]\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint8-namespace8-expected8]\nFAILED tests/unit/test_utils/test_typing.py::test_expand_type_var_in_type_hints[type_hint9-namespace9-expected9]\n========================= 4 failed, 6 passed in 0.14s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/dataclass.py-simple_asdict": ["\nERROR: while parsing the following warning configuration:\n\n  ignore: Dropping max_length:litestar.exceptions.LitestarWarning:litestar.contrib.piccolo\n\nThis error occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1921, in parse_warning_filter\n    category: Type[Warning] = _resolve_warning_category(category_)\n  File \"/usr/local/lib/python3.10/site-packages/_pytest/config/__init__.py\", line 1959, in _resolve_warning_category\n    m = __import__(module, None, None, [klass])\n  File \"/root/repos/py_data/litestar/litestar/__init__.py\", line 1, in <module>\n    from litestar.app import Litestar\n  File \"/root/repos/py_data/litestar/litestar/app.py\", line 19, in <module>\n    from litestar._asgi import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/__init__.py\", line 1, in <module>\n    from litestar._asgi.asgi_router import ASGIRouter\n  File \"/root/repos/py_data/litestar/litestar/_asgi/asgi_router.py\", line 9, in <module>\n    from litestar._asgi.routing_trie import validate_node\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/__init__.py\", line 1, in <module>\n    from litestar._asgi.routing_trie.mapping import add_route_to_trie\n  File \"/root/repos/py_data/litestar/litestar/_asgi/routing_trie/mapping.py\", line 12, in <module>\n    from litestar.types.internal_types import PathParameterDefinition\n  File \"/root/repos/py_data/litestar/litestar/types/__init__.py\", line 77, in <module>\n    from .internal_types import ControllerRouterHandler, ReservedKwargs, RouteHandlerMapItem, RouteHandlerType\n  File \"/root/repos/py_data/litestar/litestar/types/internal_types.py\", line 5, in <module>\n    from litestar.utils.deprecation import warn_deprecation\n  File \"/root/repos/py_data/litestar/litestar/utils/__init__.py\", line 24, in <module>\n    from .scope import (  # type: ignore[attr-defined]\n  File \"/root/repos/py_data/litestar/litestar/utils/scope/__init__.py\", line 5, in <module>\n    from litestar.serialization import get_serializer\n  File \"/root/repos/py_data/litestar/litestar/serialization/__init__.py\", line 1, in <module>\n    from .msgspec_hooks import (\n  File \"/root/repos/py_data/litestar/litestar/serialization/msgspec_hooks.py\", line 22, in <module>\n    from litestar.datastructures.secret_values import SecretBytes, SecretString\n  File \"/root/repos/py_data/litestar/litestar/datastructures/__init__.py\", line 2, in <module>\n    from litestar.datastructures.headers import (\n  File \"/root/repos/py_data/litestar/litestar/datastructures/headers.py\", line 30, in <module>\n    from litestar.utils.dataclass import simple_asdict\n  File \"/root/repos/py_data/litestar/litestar/utils/dataclass.py\", line 85\n    from __future__ import annotations\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSyntaxError: from __future__ imports must occur at the beginning of the file\n\n\n"], "litestar-litestar/utils/path.py-join_paths": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 10 items\n\ntests/unit/test_utils/test_path.py ..........                            [100%]\n\n============================== 10 passed in 0.07s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/helpers.py-get_name": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 11 items\n\ntests/unit/test_contrib/test_attrs/test_schema_plugin.py .               [  9%]\ntests/unit/test_utils/test_helpers.py .F...F                             [ 63%]\ntests/unit/test_contrib/test_pydantic/test_schema_plugin.py ..           [ 81%]\ntests/unit/test_openapi/test_schema.py ..                                [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_name[value1-Foo] ___________________________\n\nvalue = <tests.unit.test_utils.test_helpers.Foo object at 0x7fa95ab00a30>\nexpected = 'Foo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\n\ntests/unit/test_utils/test_helpers.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = <tests.unit.test_utils.test_helpers.Foo object at 0x7fa95ab00a30>\n\n    def get_name(value: object) -> str:\n        \"\"\"Get the ``__name__`` of an object.\n    \n        Args:\n            value: An arbitrary object.\n    \n        Returns:\n            A name string.\n        \"\"\"\n>       return value.__name__\nE       AttributeError: 'Foo' object has no attribute '__name__'. Did you mean: '__ne__'?\n\nlitestar/utils/helpers.py:35: AttributeError\n_______________________ test_get_name[value5-GenericFoo] _______________________\n\nvalue = <tests.unit.test_utils.test_helpers.GenericFoo object at 0x7fa95ab00b50>\nexpected = 'GenericFoo'\n\n    @pytest.mark.parametrize(\n        (\"value\", \"expected\"),\n        (\n            (Foo, \"Foo\"),\n            (Foo(), \"Foo\"),\n            (GenericFoo, \"GenericFoo\"),\n            (GenericFoo[int], \"GenericFoo\"),\n            (GenericFoo[T], \"GenericFoo\"),  # type: ignore[valid-type]\n            (GenericFoo(), \"GenericFoo\"),\n        ),\n    )\n    def test_get_name(value: Any, expected: str) -> None:\n>       assert get_name(value) == expected\n\ntests/unit/test_utils/test_helpers.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nvalue = <tests.unit.test_utils.test_helpers.GenericFoo object at 0x7fa95ab00b50>\n\n    def get_name(value: object) -> str:\n        \"\"\"Get the ``__name__`` of an object.\n    \n        Args:\n            value: An arbitrary object.\n    \n        Returns:\n            A name string.\n        \"\"\"\n>       return value.__name__\nE       AttributeError: 'GenericFoo' object has no attribute '__name__'. Did you mean: '__ne__'?\n\nlitestar/utils/helpers.py:35: AttributeError\n=============================== warnings summary ===============================\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n../../../../usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306\n  /usr/local/lib/python3.10/site-packages/_pytest/fixtures.py:1306: PytestRemovedIn9Warning: Marks applied to fixtures have no effect\n  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function\n    return fixture_marker(fixture_function)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[value1-Foo] - Att...\nFAILED tests/unit/test_utils/test_helpers.py::test_get_name[value5-GenericFoo]\n=================== 2 failed, 9 passed, 2 warnings in 0.12s ====================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/predicates.py-is_dataclass_class": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_utils/test_dataclass.py F                                [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_is_dataclass_class ____________________________\n\n    def test_is_dataclass_class() -> None:\n        \"\"\"is_dataclass_class() should return True for types and False for instances.\"\"\"\n    \n        @dataclass\n        class Foo:\n            \"\"\"A Foo model.\"\"\"\n    \n            bar: str = \"bar\"\n    \n        assert is_dataclass_class(Foo)\n>       assert not is_dataclass_class(Foo())\nE       AssertionError: assert not True\nE        +  where True = is_dataclass_class(test_is_dataclass_class.<locals>.Foo(bar='bar'))\nE        +    where test_is_dataclass_class.<locals>.Foo(bar='bar') = <class 'tests.unit.test_utils.test_dataclass.test_is_dataclass_class.<locals>.Foo'>()\n\ntests/unit/test_utils/test_dataclass.py:190: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_utils/test_dataclass.py::test_is_dataclass_class - Ass...\n============================== 1 failed in 0.10s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/utils/predicates.py-is_class_var": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_utils/test_predicates.py ___________\ntests/unit/test_utils/test_predicates.py:204: in <module>\n    (Annotated[ClassVar[int], \"abc\"], True),\n/usr/local/lib/python3.10/typing.py:311: in inner\n    return func(*args, **kwds)\n/usr/local/lib/python3.10/typing.py:1677: in __class_getitem__\n    origin = _type_check(params[0], msg)\n/usr/local/lib/python3.10/typing.py:167: in _type_check\n    raise TypeError(f\"{arg} is not valid as type argument\")\nE   TypeError: typing.ClassVar[int] is not valid as type argument\n=========================== short test summary info ============================\nERROR tests/unit/test_utils/test_predicates.py - TypeError: typing.ClassVar[i...\n=============================== 1 error in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_utils/test_predicates.py::test_is_class_var\n\n"], "litestar-litestar/utils/module_loader.py-import_string": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_utils/test_module_loader.py ...                          [100%]\n\n============================== 3 passed in 0.06s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/channels/backends/redis.py-unsubscribe": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_unsubscribe_without_subscription\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\n"], "litestar-litestar/channels/backends/redis.py-publish": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_stream_backend_expires\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_redis_streams_backend_flushall\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_shutdown_leftover_messages\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_publish_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_publish_not_initialized_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n"], "litestar-litestar/channels/backends/redis.py-stream_events": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.01s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_unsubscribe\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions_by_unsubscribes\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_memory_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_backend_stream_before_startup_raises\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_pub_sub_no_subscriptions\n\n"], "litestar-litestar/channels/backends/redis.py-get_history": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n__________ ERROR collecting tests/unit/test_channels/test_backends.py __________\n'flaky' not found in `markers` configuration option\n=========================== short test summary info ============================\nERROR tests/unit/test_channels/test_backends.py - Failed: 'flaky' not found i...\n=============================== 1 error in 0.02s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_asyncpg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_psycopg_get_history\n\nERROR: found no collectors for /root/repos/py_data/litestar/tests/unit/test_channels/test_backends.py::test_discards_history_entries\n\n"], "litestar-litestar/dto/_backend.py-create_transfer_model_type": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py FF       [100%]\n\n=================================== FAILURES ===================================\n___________ test_backend_model_name_uniqueness[experimental_backend] ___________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._codegen_backend.DTOCodegenBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_codegen_backend.py:73: in __init__\n    super().__init__(\nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._codegen_backend.DTOCodegenBackend object at 0x7fb5a20e0ae0>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:418: TypeError\n_____________ test_backend_model_name_uniqueness[default_backend] ______________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_model_name_uniqueness(dto_factory: type[DataclassDTO], backend_cls: type[DTOBackend]) -> None:\n>       backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:233: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/dto/_backend.py:108: in __init__\n    self.parsed_field_definitions = self.parse_model(\nlitestar/dto/_backend.py:151: in parse_model\n    transfer_type = self._create_transfer_type(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7fb5a1fb31c0>\nfield_definition = DTOFieldDefinition(raw=<class 'tests.unit.test_dto.test_factory.test_backends.test_backends.NestedDC'>, annotation=<cl..., extra={}, kwarg_definition=None, name='nested', model_name='DC', default_factory=None, dto_field=DTOField(mark=None))\nexclude = set(), include = set(), rename_fields = {}, field_name = 'nested'\nunique_name = 'DCNestedDC', nested_depth = 0\n\n    def _create_transfer_type(\n        self,\n        field_definition: FieldDefinition,\n        exclude: AbstractSet[str],\n        include: AbstractSet[str],\n        rename_fields: dict[str, str],\n        field_name: str,\n        unique_name: str,\n        nested_depth: int,\n    ) -> CompositeType | SimpleType:\n        exclude = _filter_nested_field(exclude, field_name)\n        include = _filter_nested_field(include, field_name)\n        rename_fields = _filter_nested_field_mapping(rename_fields, field_name)\n    \n        if composite_type_handler := self._get_handler_for_field_definition(field_definition):\n            return composite_type_handler(\n                field_definition=field_definition,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                unique_name=unique_name,\n                nested_depth=nested_depth,\n            )\n    \n        transfer_model: NestedFieldInfo | None = None\n    \n        if self.dto_factory.detect_nested_field(field_definition):\n            if nested_depth == self.dto_factory.config.max_nested_depth:\n                raise RecursionError\n    \n            unique_name = f\"{unique_name}{field_definition.raw.__name__}\"\n    \n            nested_field_definitions = self.parse_model(\n                model_type=field_definition.annotation,\n                exclude=exclude,\n                include=include,\n                rename_fields=rename_fields,\n                nested_depth=nested_depth + 1,\n            )\n    \n            transfer_model = NestedFieldInfo(\n>               model=self.create_transfer_model_type(unique_name, nested_field_definitions),\n                field_definitions=nested_field_definitions,\n            )\nE           TypeError: DTOBackend.create_transfer_model_type() takes 2 positional arguments but 3 were given\n\nlitestar/dto/_backend.py:418: TypeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[experimental_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_model_name_uniqueness[default_backend]\n============================== 2 failed in 0.14s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-populate_data_from_builtins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py ..       [100%]\n\n============================== 2 passed in 0.11s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-populate_data_from_raw": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py .F.F     [100%]\n\n=================================== FAILURES ===================================\n_______ test_backend_populate_collection_data_from_raw[default_backend] ________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7f1b542fe610>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_populate_collection_data_from_raw(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n        data = backend.populate_data_from_raw(COLLECTION_RAW, asgi_connection)\n>       assert data == [STRUCTURED]\nE       AssertionError: assert [TestDCReques...ptional=None)] == [DC(a=1, nest...ptional=None)]\nE         \nE         At index 0 diff: TestDCRequestBody(a=1, nested=TestDCNestedDCRequestBody(a=1, b='two'), nested_list=[TestDC_0NestedDCRequestBody(a=1, b='two')], nested_mapping={'a': TestDC_1NestedDCRequestBody(a=1, b='two')}, b='b', c=[], optional=None) != DC(a=1, nested=NestedDC(a=1, b='two'), nested_list=[NestedDC(a=1, b='two')], nested_mapping={'a': NestedDC(a=1, b='two')}, b='b', c=[], optional=None)\nE         Use -v to get more diff\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:292: AssertionError\n_____________ test_backend_populate_data_from_raw[default_backend] _____________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7f1b5439b950>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_populate_data_from_raw(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n        data = backend.populate_data_from_raw(RAW, asgi_connection)\n>       assert data == STRUCTURED\nE       AssertionError: assert TestDCRequestBody(a=1, nested=TestDCNestedDCRequestBody(a=1, b='two'), nested_list=[TestDC_0NestedDCRequestBody(a=1, b='two')], nested_mapping={'a': TestDC_1NestedDCRequestBody(a=1, b='two')}, b='b', c=[], optional=None) == DC(a=1, nested=NestedDC(a=1, b='two'), nested_list=[NestedDC(a=1, b='two')], nested_mapping={'a': NestedDC(a=1, b='two')}, b='b', c=[], optional=None)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:277: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_populate_collection_data_from_raw[default_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_populate_data_from_raw[default_backend]\n========================= 2 failed, 2 passed in 0.18s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-encode_data": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 6 items\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py .F.F.F   [100%]\n\n=================================== FAILURES ===================================\n__________________ test_backend_encode_data[default_backend] ___________________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7f5b4f4d2b90>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_encode_data(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(DC),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n>       data = backend.encode_data(STRUCTURED)\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:306: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7f5b4f788dc0>\ndata = DC(a=1, nested=NestedDC(a=1, b='two'), nested_list=[NestedDC(a=1, b='two')], nested_mapping={'a': NestedDC(a=1, b='two')}, b='b', c=[], optional=None)\n\n    def encode_data(self, data: Any) -> LitestarEncodableType:\n        \"\"\"Encode data into a ``LitestarEncodableType``.\n    \n        Args:\n            data: Data to encode.\n    \n        Returns:\n            Encoded data.\n        \"\"\"\n        if self.wrapper_attribute_name:\n            wrapped_transfer = self._encode_data(getattr(data, self.wrapper_attribute_name))\n            setattr(data, self.wrapper_attribute_name, wrapped_transfer)\n            return cast(\"LitestarEncodableType\", data)\n    \n>       return cast(\"LitestarEncodableType\", self._encode_data(data))\nE       AttributeError: 'DTOBackend' object has no attribute '_encode_data'. Did you mean: 'encode_data'?\n\nlitestar/dto/_backend.py:342: AttributeError\n_______ test_transfer_only_touches_included_attributes[default_backend] ________\n\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_transfer_only_touches_included_attributes(backend_cls: type[DTOBackend]) -> None:\n        \"\"\"Ensure attribute that are not included are never touched in any way during\n        transfer.\n    \n        https://github.com/litestar-org/litestar/issues/2125\n        \"\"\"\n        mock = MagicMock()\n    \n        @dataclass()\n        class Foo:\n            id: str\n            bar: str = \"\"\n    \n        class Factory(DataclassDTO):\n            config = DTOConfig(include={\"excluded\"})\n    \n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=Factory,\n            field_definition=TransferDTOFieldDefinition.from_annotation(Foo),\n            model_type=Foo,\n            wrapper_attribute_name=None,\n            is_data_field=False,\n        )\n    \n        Foo.bar = property(fget=lambda s: mock(return_value=\"\"), fset=lambda s, v: None)  # type: ignore[assignment]\n    \n>       backend.encode_data(Foo(id=\"1\"))\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:352: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7f5b4e3c88c0>\ndata = test_transfer_only_touches_included_attributes.<locals>.Foo(id='1', bar=<MagicMock name='mock()' id='140030149839408'>)\n\n    def encode_data(self, data: Any) -> LitestarEncodableType:\n        \"\"\"Encode data into a ``LitestarEncodableType``.\n    \n        Args:\n            data: Data to encode.\n    \n        Returns:\n            Encoded data.\n        \"\"\"\n        if self.wrapper_attribute_name:\n            wrapped_transfer = self._encode_data(getattr(data, self.wrapper_attribute_name))\n            setattr(data, self.wrapper_attribute_name, wrapped_transfer)\n            return cast(\"LitestarEncodableType\", data)\n    \n>       return cast(\"LitestarEncodableType\", self._encode_data(data))\nE       AttributeError: 'DTOBackend' object has no attribute '_encode_data'. Did you mean: 'encode_data'?\n\nlitestar/dto/_backend.py:342: AttributeError\n_____________ test_backend_encode_collection_data[default_backend] _____________\n\ndto_factory = <class 'tests.unit.test_dto.test_factory.test_backends.test_backends.fx_backend_factory.<locals>.Factory'>\nasgi_connection = <litestar.connection.request.Request object at 0x7f5b4e416cf0>\nbackend_cls = <class 'litestar.dto._backend.DTOBackend'>\n\n    def test_backend_encode_collection_data(\n        dto_factory: type[DataclassDTO], asgi_connection: Request[Any, Any, Any], backend_cls: type[DTOBackend]\n    ) -> None:\n        backend = backend_cls(\n            handler_id=\"test\",\n            dto_factory=dto_factory,\n            field_definition=FieldDefinition.from_annotation(List[DC]),\n            model_type=DC,\n            wrapper_attribute_name=None,\n            is_data_field=True,\n        )\n>       data = backend.encode_data([STRUCTURED])\n\ntests/unit/test_dto/test_factory/test_backends/test_backends.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <litestar.dto._backend.DTOBackend object at 0x7f5b4f849b40>\ndata = [DC(a=1, nested=NestedDC(a=1, b='two'), nested_list=[NestedDC(a=1, b='two')], nested_mapping={'a': NestedDC(a=1, b='two')}, b='b', c=[], optional=None)]\n\n    def encode_data(self, data: Any) -> LitestarEncodableType:\n        \"\"\"Encode data into a ``LitestarEncodableType``.\n    \n        Args:\n            data: Data to encode.\n    \n        Returns:\n            Encoded data.\n        \"\"\"\n        if self.wrapper_attribute_name:\n            wrapped_transfer = self._encode_data(getattr(data, self.wrapper_attribute_name))\n            setattr(data, self.wrapper_attribute_name, wrapped_transfer)\n            return cast(\"LitestarEncodableType\", data)\n    \n>       return cast(\"LitestarEncodableType\", self._encode_data(data))\nE       AttributeError: 'DTOBackend' object has no attribute '_encode_data'. Did you mean: 'encode_data'?\n\nlitestar/dto/_backend.py:342: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_encode_data[default_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_transfer_only_touches_included_attributes[default_backend]\nFAILED tests/unit/test_dto/test_factory/test_backends/test_backends.py::test_backend_encode_collection_data[default_backend]\n========================= 3 failed, 3 passed in 0.20s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/dto/_backend.py-_create_transfer_model_type_annotation": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 9 items\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py ....F....   [100%]\n\n=================================== FAILURES ===================================\n_____ test_create_transfer_model_type_annotation_unexpected_transfer_type ______\n\n    def test_create_transfer_model_type_annotation_unexpected_transfer_type() -> None:\n        transfer_type = CompositeType(field_definition=FieldDefinition.from_annotation(Union[str, int]), has_nested=False)\n        with pytest.raises(RuntimeError):\n>           _create_transfer_model_type_annotation(transfer_type=transfer_type)\n\ntests/unit/test_dto/test_factory/test_backends/test_utils.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransfer_type = CompositeType(field_definition=FieldDefinition(raw=typing.Union[str, int], annotation=typing.Union[str, int], type_wra...definition=None, name='')), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), has_nested=False)\n\n    def _create_transfer_model_type_annotation(transfer_type: TransferType) -> Any:\n        \"\"\"Create a type annotation for a transfer model.\n    \n        Uses the parsed type that originates from the data model and the transfer model generated to represent a nested\n        type to reconstruct the type annotation for the transfer model.\n        \"\"\"\n        if isinstance(transfer_type, SimpleType):\n            if transfer_type.nested_field_info:\n                return transfer_type.nested_field_info.model\n            return transfer_type.field_definition.annotation\n    \n        if isinstance(transfer_type, CollectionType):\n            return _create_transfer_model_collection_type(transfer_type)\n    \n        if isinstance(transfer_type, TupleType):\n            return _create_transfer_model_tuple_type(transfer_type)\n    \n        if isinstance(transfer_type, UnionType):\n            return _create_transfer_model_union_type(transfer_type)\n    \n        if isinstance(transfer_type, MappingType):\n            return _create_transfer_model_mapping_type(transfer_type)\n    \n>       raise ValueError(f\"Unsupported transfer type: {transfer_type}\")\nE       ValueError: Unsupported transfer type: CompositeType(field_definition=FieldDefinition(raw=typing.Union[str, int], annotation=typing.Union[str, int], type_wrappers=set(), origin=typing.Union, args=(<class 'str'>, <class 'int'>), metadata=(), instantiable_origin=typing.Union, safe_generic_origin=typing.Union, inner_types=(FieldDefinition(raw=<class 'str'>, annotation=<class 'str'>, type_wrappers=set(), origin=None, args=(), metadata=(), instantiable_origin=None, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), FieldDefinition(raw=<class 'int'>, annotation=<class 'int'>, type_wrappers=set(), origin=None, args=(), metadata=(), instantiable_origin=None, safe_generic_origin=None, inner_types=(), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name='')), default=<_EmptyEnum.EMPTY: 0>, extra={}, kwarg_definition=None, name=''), has_nested=False)\n\nlitestar/dto/_backend.py:907: ValueError\n=========================== short test summary info ============================\nFAILED tests/unit/test_dto/test_factory/test_backends/test_utils.py::test_create_transfer_model_type_annotation_unexpected_transfer_type\n========================= 1 failed, 8 passed in 0.11s ==========================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/response/file.py-start_response": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_response/test_file_response.py FF                        [100%]\n\n=================================== FAILURES ===================================\n______________ test_file_response_with_missing_file_raises_error _______________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2584/test_file_response_with_missin0')\n\n    async def test_file_response_with_missing_file_raises_error(tmpdir: Path) -> None:\n        path = tmpdir / \"404.txt\"\n        with pytest.raises(ImproperlyConfiguredException):\n            asgi_response = ASGIFileResponse(file_path=path, filename=\"404.txt\")\n>           await asgi_response.start_response(empty_send)\n\ntests/unit/test_response/test_file_response.py:278: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/response/file.py:212: in start_response\n    await send(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n_ = {'headers': [(b'content-type', b'text/plain; charset=utf-8'), (b'content-disposition', b'attachment; filename=\"404.txt\"')], 'status': 200, 'type': 'http.response.start'}\n\n    async def empty_send(_: Message) -> NoReturn:  # pragma: no cover\n        \"\"\"Raise a ``RuntimeError``.\n    \n        Serves as a placeholder ``send`` function.\n    \n        Args:\n            _: An ASGI message\n    \n        Raises:\n            RuntimeError\n        \"\"\"\n>       raise RuntimeError()\nE       RuntimeError\n\nlitestar/connection/base.py:53: RuntimeError\n________________ test_file_response_with_directory_raises_error ________________\n\ntmpdir = local('/tmp/pytest-of-root/pytest-2584/test_file_response_with_direct0')\n\n    async def test_file_response_with_directory_raises_error(tmpdir: Path) -> None:\n        with pytest.raises(ImproperlyConfiguredException):\n            asgi_response = ASGIFileResponse(file_path=tmpdir, filename=\"example.png\")\n>           await asgi_response.start_response(empty_send)\n\ntests/unit/test_response/test_file_response.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/response/file.py:212: in start_response\n    await send(event)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n_ = {'headers': [(b'content-type', b'image/png'), (b'content-disposition', b'attachment; filename=\"example.png\"')], 'status': 200, 'type': 'http.response.start'}\n\n    async def empty_send(_: Message) -> NoReturn:  # pragma: no cover\n        \"\"\"Raise a ``RuntimeError``.\n    \n        Serves as a placeholder ``send`` function.\n    \n        Args:\n            _: An ASGI message\n    \n        Raises:\n            RuntimeError\n        \"\"\"\n>       raise RuntimeError()\nE       RuntimeError\n\nlitestar/connection/base.py:53: RuntimeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_missing_file_raises_error\nFAILED tests/unit/test_response/test_file_response.py::test_file_response_with_directory_raises_error\n============================== 2 failed in 0.13s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\nsys:1: RuntimeWarning: coroutine 'FileSystemAdapter.info' was never awaited\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n"], "litestar-litestar/connection/request.py-json": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 71 items\n\ntests/unit/test_dto/test_factory/test_integration.py ................... [ 26%]\n....................................................                     [100%]\n\n============================== 71 passed in 0.91s ==============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/multi_dicts.py-close": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/unit/test_datastructures/test_multi_dicts.py .                     [100%]\n\n============================== 1 passed in 0.06s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/url.py-from_scope": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/unit/test_datastructures/test_url.py FF                            [100%]\n\n=================================== FAILURES ===================================\n________________________ test_url_from_scope_with_host _________________________\n\ncreate_scope = <function create_scope.<locals>.inner at 0x7fc5474d4160>\n\n    def test_url_from_scope_with_host(create_scope: Callable[..., \"Scope\"]) -> None:\n        scope = create_scope(headers=[(b\"host\", b\"testserver.local:42\")])\n    \n        url = URL.from_scope(scope)\n    \n>       assert url.netloc == \"testserver.local:42\"\nE       AssertionError: assert 'testserver:80' == 'testserver.local:42'\nE         \nE         - testserver.local:42\nE         + testserver:80\n\ntests/unit/test_datastructures/test_url.py:109: AssertionError\n_____________________________ test_url_from_scope ______________________________\n\ncreate_scope = <function create_scope.<locals>.inner at 0x7fc5470b80d0>\n\n    def test_url_from_scope(create_scope: Callable[..., \"Scope\"]) -> None:\n        scope = create_scope(\n            scheme=\"https\",\n            server=(\"testserver.local\", 70),\n            root_path=\"/foo\",\n            path=\"/bar\",\n            query_string=\"bar=baz\",\n            headers=[],\n        )\n    \n        url = URL.from_scope(scope)\n    \n        assert url.scheme == \"https\"\n        assert url.netloc == \"testserver.local:70\"\n>       assert url.path == \"/foo/bar\"\nE       AssertionError: assert '/bar' == '/foo/bar'\nE         \nE         - /foo/bar\nE         + /bar\n\ntests/unit/test_datastructures/test_url.py:100: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_url.py::test_url_from_scope_with_host\nFAILED tests/unit/test_datastructures/test_url.py::test_url_from_scope - Asse...\n============================== 2 failed in 0.10s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/datastructures/headers.py-to_header": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 5 items\n\ntests/unit/test_datastructures/test_headers.py F                         [ 20%]\ntests/unit/test_response/test_response_headers.py FFFF                   [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_cache_control_to_header _________________________\n\n    def test_cache_control_to_header() -> None:\n        header = CacheControlHeader(max_age=10, private=True)\n        expected_header_values = [\"max-age=10, private\", \"private, max-age=10\"]\n>       assert header.to_header() in expected_header_values\n\ntests/unit/test_datastructures/test_headers.py:250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CacheControlHeader(documentation_only=False, max_age=10, s_maxage=None, no_cache=None, no_store=None, private=True, pu...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\ninclude_header_name = False\n\n    def to_header(self, include_header_name: bool = False) -> str:\n        \"\"\"Get the header as string.\n    \n        Args:\n            include_header_name: should include the header name in the return value. If set to false\n                the return value will only include the header value. if set to true the return value\n                will be: ``<header name>: <header value>``. Defaults to false.\n        \"\"\"\n>       header_value = self.simple_cookie.output(header=\"\").strip()\nE       AttributeError: 'CacheControlHeader' object has no attribute 'simple_cookie'\n\nlitestar/datastructures/headers.py:266: AttributeError\n_ test_explicit_response_headers[etag-app_header0-controller_header0-handler_header0] _\n\nconfig_kwarg = 'etag'\napp_header = ETag(documentation_only=False, weak=False, value='1')\ncontroller_header = ETag(documentation_only=False, weak=False, value='2')\nhandler_header = ETag(documentation_only=False, weak=False, value='3')\n\n    @pytest.mark.parametrize(\n        \"config_kwarg,app_header,controller_header,handler_header\",\n        [\n            (\n                \"etag\",\n                ETag(value=\"1\"),\n                ETag(value=\"2\"),\n                ETag(value=\"3\"),\n            ),\n            (\n                \"cache_control\",\n                CacheControlHeader(max_age=1),\n                CacheControlHeader(max_age=2),\n                CacheControlHeader(max_age=3),\n            ),\n        ],\n    )\n    def test_explicit_response_headers(\n        config_kwarg: str, app_header: Header, controller_header: Header, handler_header: Header\n    ) -> None:\n        class MyController(Controller):\n            @get(\n                path=\"/handler-override\",\n                **{config_kwarg: handler_header},  # type: ignore[arg-type]\n            )\n            def controller_override(self) -> None:\n                pass\n    \n            @get(path=\"/controller\")\n            def controller_handler(self) -> None:\n                pass\n    \n        setattr(MyController, config_kwarg, controller_header)\n    \n        @get(path=\"/app\")\n        def app_handler() -> None:\n            pass\n    \n        app = Litestar(\n            route_handlers=[MyController, app_handler],\n            **{config_kwarg: app_header},  # type: ignore[arg-type]\n        )\n    \n        with TestClient(app=app) as client:\n            for path, expected_value in {\n                \"handler-override\": handler_header,\n                \"controller\": controller_header,\n                \"app\": app_header,\n            }.items():\n                response = client.get(path)\n>               assert response.headers[expected_value.HEADER_NAME] == expected_value.to_header()\n\ntests/unit/test_response/test_response_headers.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Headers({'content-type': 'application/json', 'content-length': '52'})\nkey = 'etag'\n\n    def __getitem__(self, key: str) -> str:\n        \"\"\"\n        Return a single header value.\n    \n        If there are multiple headers with the same key, then we concatenate\n        them with commas. See: https://tools.ietf.org/html/rfc7230#section-3.2.2\n        \"\"\"\n        normalized_key = key.lower().encode(self.encoding)\n    \n        items = [\n            header_value.decode(self.encoding)\n            for _, header_key, header_value in self._list\n            if header_key == normalized_key\n        ]\n    \n        if items:\n            return \", \".join(items)\n    \n>       raise KeyError(key)\nE       KeyError: 'etag'\n\n/usr/local/lib/python3.10/site-packages/httpx/_models.py:228: KeyError\n_ test_explicit_response_headers[cache_control-app_header1-controller_header1-handler_header1] _\n\nconfig_kwarg = 'cache_control'\napp_header = CacheControlHeader(documentation_only=False, max_age=1, s_maxage=None, no_cache=None, no_store=None, private=None, pub...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\ncontroller_header = CacheControlHeader(documentation_only=False, max_age=2, s_maxage=None, no_cache=None, no_store=None, private=None, pub...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\nhandler_header = CacheControlHeader(documentation_only=False, max_age=3, s_maxage=None, no_cache=None, no_store=None, private=None, pub...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\n\n    @pytest.mark.parametrize(\n        \"config_kwarg,app_header,controller_header,handler_header\",\n        [\n            (\n                \"etag\",\n                ETag(value=\"1\"),\n                ETag(value=\"2\"),\n                ETag(value=\"3\"),\n            ),\n            (\n                \"cache_control\",\n                CacheControlHeader(max_age=1),\n                CacheControlHeader(max_age=2),\n                CacheControlHeader(max_age=3),\n            ),\n        ],\n    )\n    def test_explicit_response_headers(\n        config_kwarg: str, app_header: Header, controller_header: Header, handler_header: Header\n    ) -> None:\n        class MyController(Controller):\n            @get(\n                path=\"/handler-override\",\n                **{config_kwarg: handler_header},  # type: ignore[arg-type]\n            )\n            def controller_override(self) -> None:\n                pass\n    \n            @get(path=\"/controller\")\n            def controller_handler(self) -> None:\n                pass\n    \n        setattr(MyController, config_kwarg, controller_header)\n    \n        @get(path=\"/app\")\n        def app_handler() -> None:\n            pass\n    \n        app = Litestar(\n            route_handlers=[MyController, app_handler],\n            **{config_kwarg: app_header},  # type: ignore[arg-type]\n        )\n    \n        with TestClient(app=app) as client:\n            for path, expected_value in {\n                \"handler-override\": handler_header,\n                \"controller\": controller_header,\n                \"app\": app_header,\n            }.items():\n                response = client.get(path)\n>               assert response.headers[expected_value.HEADER_NAME] == expected_value.to_header()\n\ntests/unit/test_response/test_response_headers.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Headers({'content-type': 'application/json', 'content-length': '52'})\nkey = 'cache-control'\n\n    def __getitem__(self, key: str) -> str:\n        \"\"\"\n        Return a single header value.\n    \n        If there are multiple headers with the same key, then we concatenate\n        them with commas. See: https://tools.ietf.org/html/rfc7230#section-3.2.2\n        \"\"\"\n        normalized_key = key.lower().encode(self.encoding)\n    \n        items = [\n            header_value.decode(self.encoding)\n            for _, header_key, header_value in self._list\n            if header_key == normalized_key\n        ]\n    \n        if items:\n            return \", \".join(items)\n    \n>       raise KeyError(key)\nE       KeyError: 'cache-control'\n\n/usr/local/lib/python3.10/site-packages/httpx/_models.py:228: KeyError\n_ test_explicit_headers_override_response_headers[cache_control-response_header0-header0] _\n\nconfig_kwarg = 'cache_control'\nresponse_header = ResponseHeader(name='cache-control', documentation_only=False, value='no-store', description=None, required=False, deprecated=False, allow_empty_value=False, style=None, explode=None, allow_reserved=False, example=None, examples=None)\nheader = CacheControlHeader(documentation_only=False, max_age=None, s_maxage=None, no_cache=True, no_store=None, private=None, ...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\n\n    @pytest.mark.parametrize(\n        \"config_kwarg,response_header,header\",\n        [\n            (\n                \"cache_control\",\n                ResponseHeader(name=CacheControlHeader.HEADER_NAME, value=\"no-store\"),\n                CacheControlHeader(no_cache=True),\n            ),\n            (\"etag\", ResponseHeader(name=ETag.HEADER_NAME, value=\"1\"), ETag(value=\"2\")),\n        ],\n    )\n    def test_explicit_headers_override_response_headers(\n        config_kwarg: str, response_header: ResponseHeader, header: Header\n    ) -> None:\n        @get(\n            path=\"/test\",\n            response_headers=[response_header],\n            **{config_kwarg: header},  # type: ignore[arg-type]\n        )\n        def my_handler() -> None:\n            pass\n    \n        app = Litestar(route_handlers=[my_handler])\n    \n        route_handler, _ = app.routes[0].route_handler_map[HttpMethod.GET]  # type: ignore[union-attr]\n>       resolved_headers = {header.name: header for header in route_handler.resolve_response_headers()}\n\ntests/unit/test_response/test_response_headers.py:188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/handlers/http_handlers/base.py:366: in resolve_response_headers\n    value=header_model.to_header(),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CacheControlHeader(documentation_only=False, max_age=None, s_maxage=None, no_cache=True, no_store=None, private=None, ...m=None, must_revalidate=None, proxy_revalidate=None, must_understand=None, immutable=None, stale_while_revalidate=None)\ninclude_header_name = False\n\n    def to_header(self, include_header_name: bool = False) -> str:\n        \"\"\"Get the header as string.\n    \n        Args:\n            include_header_name: should include the header name in the return value. If set to false\n                the return value will only include the header value. if set to true the return value\n                will be: ``<header name>: <header value>``. Defaults to false.\n        \"\"\"\n>       header_value = self.simple_cookie.output(header=\"\").strip()\nE       AttributeError: 'CacheControlHeader' object has no attribute 'simple_cookie'\n\nlitestar/datastructures/headers.py:266: AttributeError\n_ test_explicit_headers_override_response_headers[etag-response_header1-header1] _\n\nconfig_kwarg = 'etag'\nresponse_header = ResponseHeader(name='etag', documentation_only=False, value='1', description=None, required=False, deprecated=False, allow_empty_value=False, style=None, explode=None, allow_reserved=False, example=None, examples=None)\nheader = ETag(documentation_only=False, weak=False, value='2')\n\n    @pytest.mark.parametrize(\n        \"config_kwarg,response_header,header\",\n        [\n            (\n                \"cache_control\",\n                ResponseHeader(name=CacheControlHeader.HEADER_NAME, value=\"no-store\"),\n                CacheControlHeader(no_cache=True),\n            ),\n            (\"etag\", ResponseHeader(name=ETag.HEADER_NAME, value=\"1\"), ETag(value=\"2\")),\n        ],\n    )\n    def test_explicit_headers_override_response_headers(\n        config_kwarg: str, response_header: ResponseHeader, header: Header\n    ) -> None:\n        @get(\n            path=\"/test\",\n            response_headers=[response_header],\n            **{config_kwarg: header},  # type: ignore[arg-type]\n        )\n        def my_handler() -> None:\n            pass\n    \n        app = Litestar(route_handlers=[my_handler])\n    \n        route_handler, _ = app.routes[0].route_handler_map[HttpMethod.GET]  # type: ignore[union-attr]\n>       resolved_headers = {header.name: header for header in route_handler.resolve_response_headers()}\n\ntests/unit/test_response/test_response_headers.py:188: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlitestar/handlers/http_handlers/base.py:366: in resolve_response_headers\n    value=header_model.to_header(),\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ETag(documentation_only=False, weak=False, value='2')\ninclude_header_name = False\n\n    def to_header(self, include_header_name: bool = False) -> str:\n        \"\"\"Get the header as string.\n    \n        Args:\n            include_header_name: should include the header name in the return value. If set to false\n                the return value will only include the header value. if set to true the return value\n                will be: ``<header name>: <header value>``. Defaults to false.\n        \"\"\"\n>       header_value = self.simple_cookie.output(header=\"\").strip()\nE       AttributeError: 'ETag' object has no attribute 'simple_cookie'\n\nlitestar/datastructures/headers.py:266: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit/test_datastructures/test_headers.py::test_cache_control_to_header\nFAILED tests/unit/test_response/test_response_headers.py::test_explicit_response_headers[etag-app_header0-controller_header0-handler_header0]\nFAILED tests/unit/test_response/test_response_headers.py::test_explicit_response_headers[cache_control-app_header1-controller_header1-handler_header1]\nFAILED tests/unit/test_response/test_response_headers.py::test_explicit_headers_override_response_headers[cache_control-response_header0-header0]\nFAILED tests/unit/test_response/test_response_headers.py::test_explicit_headers_override_response_headers[etag-response_header1-header1]\n============================== 5 failed in 0.23s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "litestar-litestar/middleware/session/server_side.py-delete": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/litestar\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/unit/test_security/test_session_auth.py .                          [ 33%]\ntests/unit/test_middleware/test_session/test_server_side_backend.py ..   [100%]\n\n============================== 3 passed in 0.12s ===============================\n\n/usr/local/lib/python3.10/site-packages/pytest_benchmark/logger.py:46: PytestBenchmarkWarning: Benchmarks are automatically disabled because xdist plugin is active.Benchmarks cannot be performed reliably in a parallelized environment.\n  warner(PytestBenchmarkWarning(text))\n"], "marimo-marimo/_islands/island_generator.py-add_code": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 4 items\n\ntests/_islands/test_island_generator.py .F..                             [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_add_code _________________________________\n\n    def test_add_code():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, World!')\")\n    \n        # Check if the cell was added\n>       assert len(list(generator._app.cell_manager.cells())) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\nE        +    where [] = list(<generator object CellManager.cells at 0x7f66d80d5b60>)\nE        +      where <generator object CellManager.cells at 0x7f66d80d5b60> = <bound method CellManager.cells of <marimo._ast.app.CellManager object at 0x7f66d7e737c0>>()\nE        +        where <bound method CellManager.cells of <marimo._ast.app.CellManager object at 0x7f66d7e737c0>> = <marimo._ast.app.CellManager object at 0x7f66d7e737c0>.cells\nE        +          where <marimo._ast.app.CellManager object at 0x7f66d7e737c0> = <marimo._ast.app.InternalApp object at 0x7f66d7eb1060>.cell_manager\nE        +            where <marimo._ast.app.InternalApp object at 0x7f66d7eb1060> = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7f66d7e73550>._app\n\ntests/_islands/test_island_generator.py:21: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_add_code - assert 0 == 1\n========================= 1 failed, 3 passed in 0.40s ==========================\n\n"], "marimo-marimo/_islands/island_generator.py-build": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_islands/test_island_generator.py FFF                              [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_render __________________________________\n\n    async def test_render():\n        generator = MarimoIslandGenerator()\n        block1 = generator.add_code(\"import marimo as mo\")\n        block2 = generator.add_code(\"mo.md('Hello, islands!')\")\n    \n>       await generator.build()\n\ntests/_islands/test_island_generator.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7f386f7fb9a0>\n\n    async def build(self) -> App:\n        \"\"\"\n        Build the app. This should be called after adding all the code cells.\n    \n        *Returns:*\n    \n        - App: The built app.\n        \"\"\"\n        if self.has_run:\n            raise RuntimeError(\"App has already been built.\")\n    \n        self.has_run = True\n    \n        # Create cells from the stubs\n        for stub in self._stubs:\n            cell = Cell(\n                cell_id=stub._cell_id,\n                code=stub._code,\n>               config=CellConfig(\n                    display_code=stub._display_code,\n                    display_output=stub._display_output,\n                    is_reactive=stub._is_reactive,\n                ),\n            )\nE           TypeError: CellConfig.__init__() got an unexpected keyword argument 'display_code'\n\nmarimo/_islands/island_generator.py:278: TypeError\n__________________________________ test_build __________________________________\n\n    async def test_build():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, World!')\")\n    \n        # Check if the app is built successfully\n>       app = await generator.build()\n\ntests/_islands/test_island_generator.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7f386f57b4c0>\n\n    async def build(self) -> App:\n        \"\"\"\n        Build the app. This should be called after adding all the code cells.\n    \n        *Returns:*\n    \n        - App: The built app.\n        \"\"\"\n        if self.has_run:\n            raise RuntimeError(\"App has already been built.\")\n    \n        self.has_run = True\n    \n        # Create cells from the stubs\n        for stub in self._stubs:\n            cell = Cell(\n                cell_id=stub._cell_id,\n                code=stub._code,\n>               config=CellConfig(\n                    display_code=stub._display_code,\n                    display_output=stub._display_output,\n                    is_reactive=stub._is_reactive,\n                ),\n            )\nE           TypeError: CellConfig.__init__() got an unexpected keyword argument 'display_code'\n\nmarimo/_islands/island_generator.py:278: TypeError\n_______________________________ test_render_head _______________________________\n\n    async def test_render_head():\n        generator = MarimoIslandGenerator()\n        generator.add_code(\"print('Hello, islands!')\")\n>       await generator.build()\n\ntests/_islands/test_island_generator.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <marimo._islands.island_generator.MarimoIslandGenerator object at 0x7f386f820100>\n\n    async def build(self) -> App:\n        \"\"\"\n        Build the app. This should be called after adding all the code cells.\n    \n        *Returns:*\n    \n        - App: The built app.\n        \"\"\"\n        if self.has_run:\n            raise RuntimeError(\"App has already been built.\")\n    \n        self.has_run = True\n    \n        # Create cells from the stubs\n        for stub in self._stubs:\n            cell = Cell(\n                cell_id=stub._cell_id,\n                code=stub._code,\n>               config=CellConfig(\n                    display_code=stub._display_code,\n                    display_output=stub._display_output,\n                    is_reactive=stub._is_reactive,\n                ),\n            )\nE           TypeError: CellConfig.__init__() got an unexpected keyword argument 'display_code'\n\nmarimo/_islands/island_generator.py:278: TypeError\n=========================== short test summary info ============================\nFAILED tests/_islands/test_island_generator.py::test_render - TypeError: Cell...\nFAILED tests/_islands/test_island_generator.py::test_build - TypeError: CellC...\nFAILED tests/_islands/test_island_generator.py::test_render_head - TypeError:...\n============================== 3 failed in 0.07s ===============================\n\n"], "marimo-marimo/_utils/parse_dataclass.py-build_dataclass": ["FAILED: No code block"], "marimo-marimo/_utils/parse_dataclass.py-parse_raw": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:73: in <module>\n    from marimo._ast.app import App\nmarimo/_ast/app.py:32: in <module>\n    from marimo._runtime.app.kernel_runner import AppKernelRunner\nmarimo/_runtime/app/kernel_runner.py:10: in <module>\n    from marimo._runtime.context.types import get_context\nmarimo/_runtime/context/__init__.py:11: in <module>\n    from marimo._runtime.context.types import (\nmarimo/_runtime/context/types.py:18: in <module>\n    from marimo._runtime.functions import FunctionRegistry\nmarimo/_runtime/functions.py:10: in <module>\n    from marimo._utils.parse_dataclass import build_dataclass\nE     File \"/root/repos/py_data/marimo/marimo/_utils/parse_dataclass.py\", line 117\nE       from __future__ import annotations\nE       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   SyntaxError: from __future__ imports must occur at the beginning of the file\n"], "marimo-marimo/_plugins/stateless/icon.py-icon": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:89: in <module>\n    from marimo._plugins.stateless.icon import icon\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/icon.py\", line 14\nE       **Args.**\nE   IndentationError: unexpected indent\n"], "marimo-marimo/_plugins/stateless/image.py-image": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:90: in <module>\n    from marimo._plugins.stateless.image import image\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/image.py\", line 185\nE       \"\"\"Render an image as HTML.\nE       ^\nE   SyntaxError: unterminated triple-quoted string literal (detected at line 189)\n"], "marimo-marimo/_plugins/stateless/flex.py-hstack": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:16: in <module>\n    from marimo._plugins.ui import code_editor\nmarimo/_plugins/ui/__init__.py:40: in <module>\n    from marimo._plugins.ui._impl.array import array\nmarimo/_plugins/ui/_impl/array.py:10: in <module>\n    from marimo._plugins.stateless.flex import hstack, vstack\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/flex.py\", line 131\nE       **Args.**\nE   IndentationError: unexpected indent\n"], "marimo-marimo/_plugins/stateless/status/_progress.py-update_progress": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:82: in <module>\n    from marimo._plugins.stateless import mpl, status\nmarimo/_plugins/stateless/status/__init__.py:6: in <module>\n    from marimo._plugins.stateless.status._progress import progress_bar, spinner\nE     File \"/root/repos/py_data/marimo/marimo/_plugins/stateless/status/_progress.py\", line 283\nE       every 150ms.\nE               ^\nE   SyntaxError: invalid decimal literal\n"], "marimo-marimo/_plugins/core/web_component.py-build_ui_plugin": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_plugins/core/test_web_component.py FFF                            [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_args_escaped _______________________________\n\n    def test_args_escaped() -> None:\n        initial_value = \"'ello&\"\n>       html = build_ui_plugin(\n            \"tag-name\", initial_value, label=None, args={\"text\": \"a & b\"}\n        )\n\ntests/_plugins/core/test_web_component.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_plugins/core/web_component.py:82: in build_ui_plugin\n    label_html = md(label)\nmarimo/_output/md.py:140: in md\n    return _md(text)\nmarimo/_output/md.py:38: in _md\n    text = cleandoc(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndoc = None\n\n    def cleandoc(doc):\n        \"\"\"Clean up indentation from docstrings.\n    \n        Any whitespace that can be uniformly removed from the second line\n        onwards is removed.\"\"\"\n        try:\n>           lines = doc.expandtabs().split('\\n')\nE           AttributeError: 'NoneType' object has no attribute 'expandtabs'\n\n/usr/local/lib/python3.10/inspect.py:750: AttributeError\n___________________________ test_initial_value_parse ___________________________\n\n    def test_initial_value_parse() -> None:\n        initial_value = \"'ello\"\n>       html = build_ui_plugin(\"tag-name\", initial_value, label=None, args={})\n\ntests/_plugins/core/test_web_component.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nmarimo/_plugins/core/web_component.py:82: in build_ui_plugin\n    label_html = md(label)\nmarimo/_output/md.py:140: in md\n    return _md(text)\nmarimo/_output/md.py:38: in _md\n    text = cleandoc(text)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndoc = None\n\n    def cleandoc(doc):\n        \"\"\"Clean up indentation from docstrings.\n    \n        Any whitespace that can be uniformly removed from the second line\n        onwards is removed.\"\"\"\n        try:\n>           lines = doc.expandtabs().split('\\n')\nE           AttributeError: 'NoneType' object has no attribute 'expandtabs'\n\n/usr/local/lib/python3.10/inspect.py:750: AttributeError\n____________________________ test_label_md_compiled ____________________________\n\n    def test_label_md_compiled() -> None:\n        initial_value = \"'ello\"\n        html = build_ui_plugin(\"tag-name\", initial_value, label=\"$x$\", args={})\n    \n        match = re.search(\"data-label='(.*?)'\", html)\n>       assert match is not None\nE       assert None is not None\n\ntests/_plugins/core/test_web_component.py:43: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_plugins/core/test_web_component.py::test_args_escaped - Attribu...\nFAILED tests/_plugins/core/test_web_component.py::test_initial_value_parse - ...\nFAILED tests/_plugins/core/test_web_component.py::test_label_md_compiled - as...\n============================== 3 failed in 0.14s ===============================\n\n"], "marimo-marimo/_output/formatting.py-as_html": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nE     File \"/root/repos/py_data/marimo/marimo/_output/formatting.py\", line 239\nE       This is the best way to opt out of marimo's\nE                                                ^\nE   SyntaxError: unterminated string literal (detected at line 239)\n"], "marimo-marimo/_output/md.py-md": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from marimo._ast.app import CellManager\nmarimo/__init__.py:75: in <module>\n    from marimo._islands.island_generator import MarimoIslandGenerator\nmarimo/_islands/island_generator.py:13: in <module>\n    from marimo._output.formatting import as_html\nmarimo/_output/formatting.py:33: in <module>\n    from marimo._plugins.stateless.json_output import json_output\nmarimo/_plugins/stateless/json_output.py:7: in <module>\n    from marimo._plugins.core.web_component import JSONType, build_stateless_plugin\nmarimo/_plugins/core/web_component.py:26: in <module>\n    from marimo._output.md import md\nE     File \"/root/repos/py_data/marimo/marimo/_output/md.py\", line 154\nE       r\"\"\"Write markdown\nE       ^\nE   SyntaxError: unterminated triple-quoted string literal (detected at line 166)\n"], "marimo-marimo/_output/formatters/formatters.py-register_formatters": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/conftest.py'.\ntests/conftest.py:23: in <module>\n    from marimo._output.formatters.formatters import register_formatters\nE     File \"/root/repos/py_data/marimo/marimo/_output/formatters/formatters.py\", line 53\nE       from __future__ import annotations\nE       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   SyntaxError: from __future__ imports must occur at the beginning of the file\n"], "marimo-marimo/_data/series.py-get_category_series_info": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_data/test_series.py ss                                            [100%]\n\n=========================== short test summary info ============================\nSKIPPED [2] tests/_data/test_series.py:58: optional dependencies not installed\n============================== 2 skipped in 0.01s ==============================\n\n"], "marimo-marimo/_data/preview_column.py-get_column_preview": ["FAILED: No code block"], "marimo-marimo/_server/sessions.py-start_file_watcher": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/file_manager.py-save_app_config": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-add_stdin": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-add_operation": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_server/session/session_view.py-get_cell_console_outputs": ["\nImportError while loading conftest '/root/repos/py_data/marimo/tests/_server/conftest.py'.\ntests/_server/conftest.py:15: in <module>\n    from marimo._server.main import create_starlette_app\nmarimo/_server/main.py:23: in <module>\n    from marimo._server.api.router import build_routes\nmarimo/_server/api/router.py:7: in <module>\n    from marimo._server.api.endpoints.assets import router as assets_router\nmarimo/_server/api/endpoints/assets.py:40: in <module>\n    app=StaticFiles(\n/usr/local/lib/python3.10/site-packages/starlette/staticfiles.py:59: in __init__\n    raise RuntimeError(f\"Directory '{directory}' does not exist\")\nE   RuntimeError: Directory '/root/repos/py_data/marimo/marimo/_static/assets' does not exist\n"], "marimo-marimo/_runtime/dataflow.py-register_cell": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 3 items\n\ntests/_runtime/packages/test_module_registry.py FFF                      [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_defining_cell ______________________________\n\n    def test_defining_cell() -> None:\n        mgr = ModuleRegistry(graph := DirectedGraph())\n        mpl = parse_cell(\"import matplotlib\")\n        np = parse_cell(\"import numpy\")\n>       graph.register_cell(\"0\", mpl)\n\ntests/_runtime/packages/test_module_registry.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DirectedGraph(cells={'0': CellImpl(key=2500913929605651239, code='import matplotlib', mod=<ast.Module object at 0x7fc5...s={'0': set()}, definitions={'matplotlib': {'0'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7fc5a8180400>)\ncell_id = '0'\ncell = CellImpl(key=2500913929605651239, code='import matplotlib', mod=<ast.Module object at 0x7fc5a312ec20>, defs={'matplotl... hide_code=False), _status=CellStatus(state=None), _stale=CellStaleState(state=False), _output=CellOutput(output=None))\n\n    def register_cell(self, cell_id: CellId_t, cell: CellImpl) -> None:\n        \"\"\"Add a cell to the graph.\n    \n        Mutates the graph, acquiring `self.lock`.\n    \n        Requires that `cell_id` is not already in the graph.\n        \"\"\"\n        with self.lock:\n            if cell_id in self.cells:\n                raise ValueError(f\"Cell {cell_id} is already in the graph.\")\n    \n            self.cells[cell_id] = cell\n            self.children[cell_id] = set()\n            self.parents[cell_id] = set()\n            self.siblings[cell_id] = set()\n    \n            for name in cell.defs:\n                if name in self.definitions:\n                    self.siblings[cell_id].update(self.definitions[name])\n                    for sibling in self.definitions[name]:\n                        self.siblings[sibling].add(cell_id)\n                self.definitions[name] = self.definitions.get(name, set()) | {cell_id}\n    \n            for name in cell.refs:\n                if name in self.definitions:\n                    for definer in self.definitions[name]:\n                        self.children[definer].add(cell_id)\n                        self.parents[cell_id].add(definer)\n    \n>           self._detect_cycles()\nE           AttributeError: 'DirectedGraph' object has no attribute '_detect_cycles'\n\nmarimo/_runtime/dataflow.py:130: AttributeError\n_____________________________ test_missing_modules _____________________________\n\n    def test_missing_modules() -> None:\n        mgr = ModuleRegistry(graph := DirectedGraph())\n>       graph.register_cell(\"0\", parse_cell(\"import does.nt.exist as foo\"))\n\ntests/_runtime/packages/test_module_registry.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DirectedGraph(cells={'0': CellImpl(key=-5588913404412130648, code='import does.nt.exist as foo', mod=<ast.Module objec...siblings={'0': set()}, definitions={'foo': {'0'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7fc5a3126d00>)\ncell_id = '0'\ncell = CellImpl(key=-5588913404412130648, code='import does.nt.exist as foo', mod=<ast.Module object at 0x7fc5a312c8e0>, defs... hide_code=False), _status=CellStatus(state=None), _stale=CellStaleState(state=False), _output=CellOutput(output=None))\n\n    def register_cell(self, cell_id: CellId_t, cell: CellImpl) -> None:\n        \"\"\"Add a cell to the graph.\n    \n        Mutates the graph, acquiring `self.lock`.\n    \n        Requires that `cell_id` is not already in the graph.\n        \"\"\"\n        with self.lock:\n            if cell_id in self.cells:\n                raise ValueError(f\"Cell {cell_id} is already in the graph.\")\n    \n            self.cells[cell_id] = cell\n            self.children[cell_id] = set()\n            self.parents[cell_id] = set()\n            self.siblings[cell_id] = set()\n    \n            for name in cell.defs:\n                if name in self.definitions:\n                    self.siblings[cell_id].update(self.definitions[name])\n                    for sibling in self.definitions[name]:\n                        self.siblings[sibling].add(cell_id)\n                self.definitions[name] = self.definitions.get(name, set()) | {cell_id}\n    \n            for name in cell.refs:\n                if name in self.definitions:\n                    for definer in self.definitions[name]:\n                        self.children[definer].add(cell_id)\n                        self.parents[cell_id].add(definer)\n    \n>           self._detect_cycles()\nE           AttributeError: 'DirectedGraph' object has no attribute '_detect_cycles'\n\nmarimo/_runtime/dataflow.py:130: AttributeError\n__________________________ test_defining_cell_dotted ___________________________\n\n    def test_defining_cell_dotted() -> None:\n        mgr = ModuleRegistry(graph := DirectedGraph())\n        mpl = parse_cell(\"import matplotlib.pyplot as plt\")\n>       graph.register_cell(\"0\", mpl)\n\ntests/_runtime/packages/test_module_registry.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DirectedGraph(cells={'0': CellImpl(key=120837699819786410, code='import matplotlib.pyplot as plt', mod=<ast.Module obj...siblings={'0': set()}, definitions={'plt': {'0'}}, cycles=set(), lock=<unlocked _thread.lock object at 0x7fc5a30032c0>)\ncell_id = '0'\ncell = CellImpl(key=120837699819786410, code='import matplotlib.pyplot as plt', mod=<ast.Module object at 0x7fc5a305b8b0>, de... hide_code=False), _status=CellStatus(state=None), _stale=CellStaleState(state=False), _output=CellOutput(output=None))\n\n    def register_cell(self, cell_id: CellId_t, cell: CellImpl) -> None:\n        \"\"\"Add a cell to the graph.\n    \n        Mutates the graph, acquiring `self.lock`.\n    \n        Requires that `cell_id` is not already in the graph.\n        \"\"\"\n        with self.lock:\n            if cell_id in self.cells:\n                raise ValueError(f\"Cell {cell_id} is already in the graph.\")\n    \n            self.cells[cell_id] = cell\n            self.children[cell_id] = set()\n            self.parents[cell_id] = set()\n            self.siblings[cell_id] = set()\n    \n            for name in cell.defs:\n                if name in self.definitions:\n                    self.siblings[cell_id].update(self.definitions[name])\n                    for sibling in self.definitions[name]:\n                        self.siblings[sibling].add(cell_id)\n                self.definitions[name] = self.definitions.get(name, set()) | {cell_id}\n    \n            for name in cell.refs:\n                if name in self.definitions:\n                    for definer in self.definitions[name]:\n                        self.children[definer].add(cell_id)\n                        self.parents[cell_id].add(definer)\n    \n>           self._detect_cycles()\nE           AttributeError: 'DirectedGraph' object has no attribute '_detect_cycles'\n\nmarimo/_runtime/dataflow.py:130: AttributeError\n=========================== short test summary info ============================\nFAILED tests/_runtime/packages/test_module_registry.py::test_defining_cell - ...\nFAILED tests/_runtime/packages/test_module_registry.py::test_missing_modules\nFAILED tests/_runtime/packages/test_module_registry.py::test_defining_cell_dotted\n============================== 3 failed in 0.08s ===============================\n\n"], "marimo-marimo/_runtime/validate_graph.py-check_for_errors": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 7 items\n\ntests/_runtime/test_validate_graph.py .FFFF..                            [100%]\n\n=================================== FAILURES ===================================\n________________________ test_multiple_definition_error ________________________\n\n    def test_multiple_definition_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x = 1\"))\n        errors = check_for_errors(graph)\n        assert set(errors.keys()) == set([\"0\", \"1\"])\n>       assert errors[\"0\"] == (MultipleDefinitionError(name=\"x\", cells=(\"1\",)),)\nE       AssertionError: assert [MultipleDefi...ltiple-defs')] == (MultipleDefi...tiple-defs'),)\nE         \nE         Use -v to get more diff\n\ntests/_runtime/test_validate_graph.py:25: AssertionError\n__________________________ test_delete_nonlocal_error __________________________\n\n    def test_delete_nonlocal_error() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"del x\"))\n        errors = check_for_errors(graph)\n        assert set(errors.keys()) == set([\"1\"])\n>       assert errors[\"1\"] == (DeleteNonlocalError(name=\"x\", cells=(\"0\",)),)\nE       AssertionError: assert [DeleteNonloc...te-nonlocal')] == (DeleteNonloc...e-nonlocal'),)\nE         \nE         Use -v to get more diff\n\ntests/_runtime/test_validate_graph.py:77: AssertionError\n_________________ test_overlapping_multiple_definition_errors __________________\n\n    def test_overlapping_multiple_definition_errors() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = 0\"))\n        graph.register_cell(\"1\", parse_cell(\"x, y = 1, 2\"))\n        graph.register_cell(\"2\", parse_cell(\"y, z = 3, 4\"))\n        errors = check_for_errors(graph)\n        assert set(errors.keys()) == set([\"0\", \"1\", \"2\"])\n>       assert errors[\"0\"] == (MultipleDefinitionError(name=\"x\", cells=(\"1\",)),)\nE       AssertionError: assert [MultipleDefi...ltiple-defs')] == (MultipleDefi...tiple-defs'),)\nE         \nE         Use -v to get more diff\n\ntests/_runtime/test_validate_graph.py:49: AssertionError\n_____________________________ test_two_node_cycle ______________________________\n\n    def test_two_node_cycle() -> None:\n        graph = dataflow.DirectedGraph()\n        graph.register_cell(\"0\", parse_cell(\"x = y\"))\n        graph.register_cell(\"1\", parse_cell(\"y = x\"))\n        errors = check_for_errors(graph)\n        assert set(errors.keys()) == set([\"0\", \"1\"])\n>       assert errors[\"0\"] == (\n            CycleError(edges_with_vars=((\"0\", [\"x\"], \"1\"), (\"1\", [\"y\"], \"0\"))),\n        )\nE       AssertionError: assert [CycleError(e...type='cycle')] == (CycleError(e...ype='cycle'),)\nE         \nE         Use -v to get more diff\n\ntests/_runtime/test_validate_graph.py:86: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_runtime/test_validate_graph.py::test_multiple_definition_error\nFAILED tests/_runtime/test_validate_graph.py::test_delete_nonlocal_error - As...\nFAILED tests/_runtime/test_validate_graph.py::test_overlapping_multiple_definition_errors\nFAILED tests/_runtime/test_validate_graph.py::test_two_node_cycle - Assertion...\n========================= 4 failed, 3 passed in 0.07s ==========================\n\n"], "marimo-marimo/_runtime/runtime.py-_maybe_register_cell": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 2 items\n\ntests/_runtime/reload/test_module_watcher.py ..                          [100%]\n\n============================== 2 passed in 8.34s ===============================\n\n"], "marimo-marimo/_runtime/runtime.py-run": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 86 items\n\n============================ no tests ran in 0.06s =============================\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_code_with_nbsp\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_empty_iteration_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_pickle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_break_cycle_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_processpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_state_invalidated\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wont_execute_bad_ref\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_stop\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_freeze\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future_complex\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_consecutive\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_fileno\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_ref_local_var_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_with_cell_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_make_local_with_global_keywd\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_enable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_delete_nonlocal_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_resolve_var_not_local_from_nested_scope\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_run_matplotlib_figures_closed\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_basic\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_tree\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_gather\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_pickle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_altair_chart.py::test_altair_settings_when_set\n(no match in any of [<Module test_altair_chart.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_init_not_rewritten_as_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_ok_run\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_interruption\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_triangle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_non_ui_elements_not_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_scope_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_running_in_notebook\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_config_before_registering_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_input_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readlines_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_threadpool_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_descendant_status_reset_to_idle_on_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_nested_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_add_mock_package\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_private\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list_mock_packages\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_value\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_output_cleared_on_rerun\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_interrupt\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_dunder_dunder_not_local\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_file_path\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_plugins/ui/_impl/test_anywidget.py::test_instances\n(no match in any of [<Module test_anywidget.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_await_future\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_toplevel_await_allowed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_cycle_missing_args_rets\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_marimo_mpl_backend_not_used\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cycle_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_in_default_executor\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_zero_copy_works\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_wait_for\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_statuses_not_repeated_on_exception\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_run_referrers_not_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_set_index_urls\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_exception_not_captured\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_install\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_and_reenable_stale\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error_with_delete\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_multiple_definitions\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_messaging/test_streams.py::test_readline_installed\n(no match in any of [<Module test_streams.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_available\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_list\n(no match in any of [<Module test_patches.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_local_var_ui_element_value\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_with_state\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_clear_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_cell_indirect_lambda\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_app_comp_multiple_ui_elements\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_cycle_incremental\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_run_async\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_new_errors_update_old_ones\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_locals_dont_leak\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed_bound_child\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_disable_syntax_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_delete_nonlocal_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_new_multiple_definition_does_not_invalidate\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_set_ui_element_value_lensed\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_kernel_simultaneous_multiple_definition_error\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_ui_element_in_output_stored\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_conditional_definition\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_ast/test_app.py::test_unparsable_cell\n(no match in any of [<Module test_app.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_runtime.py::test_defs_with_no_definers_are_removed_from_cell\n(no match in any of [<Module test_runtime.py>])\n\nERROR: not found: /root/repos/py_data/marimo/tests/_runtime/test_patches.py::test_micropip_uninstall\n(no match in any of [<Module test_patches.py>])\n\n"], "marimo-marimo/_runtime/packages/utils.py-is_python_isolated": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_package_utils.py F                          [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_is_python_isolated ____________________________\n\n    @pytest.mark.skipif(sys.platform == \"win32\", reason=\"Failing on Windows CI\")\n    def test_is_python_isolated() -> None:\n        # tests should always be run in an isolated (non-system) environment;\n        # we only run them in a virtualenv, venv, or conda env ...\n>       assert is_python_isolated()\nE       assert False\nE        +  where False = is_python_isolated()\n\ntests/_runtime/packages/test_package_utils.py:13: AssertionError\n=========================== short test summary info ============================\nFAILED tests/_runtime/packages/test_package_utils.py::test_is_python_isolated\n============================== 1 failed in 0.06s ===============================\n\n"], "marimo-marimo/_runtime/packages/module_registry.py-missing_modules": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/marimo\nconfigfile: pyproject.toml\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=auto\ncollected 1 item\n\ntests/_runtime/packages/test_module_registry.py .                        [100%]\n\n============================== 1 passed in 0.03s ===============================\n\n"], "TaskWeaver-taskweaver/misc/example.py-load_examples": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_example.py F                                       [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_load_examples ______________________________\n\n    def test_load_examples():\n        example_path = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"data\",\n            \"examples\",\n            \"planner_examples\",\n        )\n        examples = load_examples(example_path, {\"Planner\", \"User\", \"CodeInterpreter\"})\n>       assert len(examples) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\ntests/unit_tests/test_example.py:14: AssertionError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_example.py::test_load_examples - assert 0 == 1\n============================== 1 failed in 0.06s ===============================\n\n"], "TaskWeaver-taskweaver/code_interpreter/plugin_selection.py-add_selected_plugins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py .                                   [100%]\n\n============================== 1 passed in 0.16s ===============================\n\n"], "TaskWeaver-taskweaver/code_interpreter/plugin_selection.py-filter_unused_plugins": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_plugin_pool.py F                                   [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_plugin_pool _______________________________\n\n    def test_plugin_pool():\n        app_injector = Injector(\n            [PluginModule, LoggingModule],\n        )\n        app_config = AppConfigSource(\n            config={\n                \"app_dir\": os.path.dirname(os.path.abspath(__file__)),\n                \"llm.api_key\": \"this_is_not_a_real_key\",  # pragma: allowlist secret\n                \"plugin.base_path\": os.path.join(os.path.dirname(os.path.abspath(__file__)), \"data/plugins\"),\n            },\n        )\n        app_injector.binder.bind(AppConfigSource, to=app_config)\n    \n        plugin_registry = app_injector.get(PluginRegistry)\n    \n        plugins = plugin_registry.get_list()\n    \n        selected_plugin_pool = SelectedPluginPool()\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[:1])\n        assert len(selected_plugin_pool) == 1\n    \n        selected_plugin_pool.add_selected_plugins(plugins[1:3])\n        assert len(selected_plugin_pool) == 3\n    \n        selected_plugin_pool.add_selected_plugins(plugins[2:4])\n        assert len(selected_plugin_pool) == 4\n    \n>       selected_plugin_pool.filter_unused_plugins(\"xcxcxc anomaly_detection() ababab\")\n\ntests/unit_tests/test_plugin_pool.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <taskweaver.code_interpreter.plugin_selection.SelectedPluginPool object at 0x7f40ed94ca90>\ncode = 'xcxcxc anomaly_detection() ababab'\n\n    def filter_unused_plugins(self, code: str):\n        \"\"\"\n        Filter out plugins that are not used in the code generated by LLM\n        \"\"\"\n        used_plugins = set()\n>       for plugin in self.plugin_registry.get_list():\nE       AttributeError: 'SelectedPluginPool' object has no attribute 'plugin_registry'\n\ntaskweaver/code_interpreter/plugin_selection.py:30: AttributeError\n=========================== short test summary info ============================\nFAILED tests/unit_tests/test_plugin_pool.py::test_plugin_pool - AttributeErro...\n============================== 1 failed in 0.18s ===============================\n\n"], "TaskWeaver-taskweaver/module/prompt_util.py-remove_all_delimiters": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/TaskWeaver\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/unit_tests/test_prompt_util.py .                                   [100%]\n\n============================== 1 passed in 0.03s ===============================\n\n"], "reflex-reflex/app.py-_enable_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n____________________________ test_app_state_manager ____________________________\n\n    def test_app_state_manager():\n        app = App()\n        with pytest.raises(ValueError):\n            app.state_manager\n        app._enable_state()\n>       assert app.state_manager is not None\n\ntests/test_app.py:1440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\n\n    @property\n    def state_manager(self) -> StateManager:\n        \"\"\"Get the state manager.\n    \n        Returns:\n            The initialized state manager.\n    \n        Raises:\n            ValueError: if the state has not been initialized.\n        \"\"\"\n        if self._state_manager is None:\n>           raise ValueError(\"The state manager has not been initialized.\")\nE           ValueError: The state manager has not been initialized.\n\nreflex/app.py:340: ValueError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_state_manager - ValueError: The state mana...\n======================== 1 failed, 5 warnings in 0.14s =========================\n\n"], "reflex-reflex/app.py-_add_optional_endpoints": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py .                                                      [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.05s =========================\n\n"], "reflex-reflex/app.py-add_page": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 24 items\n\ntests/test_app.py .FF..FF..F...FFFFFFFFFFF                               [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_add_page_invalid_api_route ________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7fdd242af7f0>\n\n    def test_add_page_invalid_api_route(app: App, index_page):\n        \"\"\"Test adding a page with an invalid route to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n        \"\"\"\n>       with pytest.raises(ValueError):\nE       Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/test_app.py:300: Failed\n_______________________ test_add_page_set_route_dynamic ________________________\n\nindex_page = <function index_page.<locals>.index at 0x7fdd241b3400>\nwindows_platform = False\n\n    def test_add_page_set_route_dynamic(index_page, windows_platform: bool):\n        \"\"\"Test adding a page with dynamic route variable to an app.\n    \n        Args:\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n        \"\"\"\n        app = App(state=EmptyState)\n        assert app.state is not None\n        route = \"/test/[dynamic]\"\n        if windows_platform:\n            route.lstrip(\"/\").replace(\"/\", \"\\\\\")\n        assert app.pages == {}\n        app.add_page(index_page, route=route)\n>       assert app.pages.keys() == {\"test/[dynamic]\"}\nE       AssertionError: assert dict_keys(['/test/[dynamic]']) == {'test/[dynamic]'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:271: AssertionError\n_______ test_add_duplicate_page_route_error[<lambda>-second_page2-page3] _______\n\napp = <App state=None>, first_page = <function <lambda> at 0x7fdd2423b010>\nsecond_page = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}\nroute = 'page3'\n\n    @pytest.mark.parametrize(\n        \"first_page,second_page, route\",\n        [\n            (lambda: rx.fragment(), lambda: rx.fragment(rx.text(\"second\")), \"/\"),\n            (rx.fragment(rx.text(\"first\")), rx.fragment(rx.text(\"second\")), \"/page1\"),\n            (\n                lambda: rx.fragment(rx.text(\"first\")),\n                rx.fragment(rx.text(\"second\")),\n                \"page3\",\n            ),\n            (page1, page2, \"page1\"),\n            (index, index, None),\n            (page1, page1, None),\n        ],\n    )\n    def test_add_duplicate_page_route_error(app, first_page, second_page, route):\n        app.add_page(first_page, route=route)\n>       with pytest.raises(ValueError):\nE       Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/test_app.py:344: Failed\n____________ test_add_duplicate_page_route_error[page1-page2-page1] ____________\n\napp = <App state=None>, first_page = <function page1 at 0x7fdd2423a440>\nsecond_page = <function page2 at 0x7fdd2423a4d0>, route = 'page1'\n\n    @pytest.mark.parametrize(\n        \"first_page,second_page, route\",\n        [\n            (lambda: rx.fragment(), lambda: rx.fragment(rx.text(\"second\")), \"/\"),\n            (rx.fragment(rx.text(\"first\")), rx.fragment(rx.text(\"second\")), \"/page1\"),\n            (\n                lambda: rx.fragment(rx.text(\"first\")),\n                rx.fragment(rx.text(\"second\")),\n                \"page3\",\n            ),\n            (page1, page2, \"page1\"),\n            (index, index, None),\n            (page1, page1, None),\n        ],\n    )\n    def test_add_duplicate_page_route_error(app, first_page, second_page, route):\n        app.add_page(first_page, route=route)\n>       with pytest.raises(ValueError):\nE       Failed: DID NOT RAISE <class 'ValueError'>\n\ntests/test_app.py:344: Failed\n____________ test_dynamic_route_var_route_change_completed_on_load _____________\n\nindex_page = <function index_page.<locals>.index at 0x7fdd241dd120>\nwindows_platform = False, token = '2379cf06-f683-463e-b2d2-e0203693cf7c'\napp_module_mock = <Mock id='140587770600976'>\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7fdd24205cf0>\n\n    @pytest.mark.asyncio\n    async def test_dynamic_route_var_route_change_completed_on_load(\n        index_page,\n        windows_platform: bool,\n        token: str,\n        app_module_mock: unittest.mock.Mock,\n        mocker,\n    ):\n        \"\"\"Create app with dynamic route var, and simulate navigation.\n    \n        on_load should fire, allowing any additional vars to be updated before the\n        initial page hydrate.\n    \n        Args:\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n            token: a Token.\n            app_module_mock: Mocked app module.\n            mocker: pytest mocker object.\n        \"\"\"\n        arg_name = \"dynamic\"\n        route = f\"/test/[{arg_name}]\"\n        if windows_platform:\n            route.lstrip(\"/\").replace(\"/\", \"\\\\\")\n        app = app_module_mock.app = App(state=DynamicState)\n        assert app.state is not None\n        assert arg_name not in app.state.vars\n        app.add_page(index_page, route=route, on_load=DynamicState.on_load)  # type: ignore\n>       assert arg_name in app.state.vars\nE       AssertionError: assert 'dynamic' in {'comp_dynamic': ComputedVar(_cache=False, _backend=False, _initial_value=Unset, _static_deps=set(), _auto_deps=True, ...pile=False)]}, hooks={'const dynamic_state = useContext(StateContexts.dynamic_state)': None}, interpolations=[])), ...}\nE        +  where {'comp_dynamic': ComputedVar(_cache=False, _backend=False, _initial_value=Unset, _static_deps=set(), _auto_deps=True, ...pile=False)]}, hooks={'const dynamic_state = useContext(StateContexts.dynamic_state)': None}, interpolations=[])), ...} = <class 'tests.test_app.DynamicState'>.vars\nE        +    where <class 'tests.test_app.DynamicState'> = <App state=DynamicState>.state\n\ntests/test_app.py:995: AssertionError\n___________________________ test_add_page_set_route ____________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7fdd21f59510>\nwindows_platform = False\n\n    def test_add_page_set_route(app: App, index_page, windows_platform: bool):\n        \"\"\"Test adding a page to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n        \"\"\"\n        route = \"test\" if windows_platform else \"/test\"\n        assert app.pages == {}\n        app.add_page(index_page, route=route)\n>       assert app.pages.keys() == {\"test\"}\nE       AssertionError: assert dict_keys(['/test']) == {'test'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:254: AssertionError\n_________ test_overlay_component[None-default_overlay_component-None] __________\n\nstate = None\noverlay_component = <function default_overlay_component at 0x7fdd70930700>\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n____________________ test_overlay_component[None-None-None] ____________________\n\nstate = None, overlay_component = None, exp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n_____________ test_overlay_component[None-overlay_component2-Text] _____________\n\nstate = None\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n_______ test_overlay_component[State-default_overlay_component-Fragment] _______\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function default_overlay_component at 0x7fdd70930700>\nexp_page_child = <class 'reflex.components.base.fragment.Fragment'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n___________________ test_overlay_component[State-None-None] ____________________\n\nstate = <class 'reflex.state.State'>, overlay_component = None\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n____________ test_overlay_component[State-overlay_component5-Text] _____________\n\nstate = <class 'reflex.state.State'>\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n_________________ test_overlay_component[State-<lambda>-Text] __________________\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function <lambda> at 0x7fdd2423b880>\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n>       page = app.pages[\"test\"]\nE       KeyError: 'test'\n\ntests/test_app.py:1248: KeyError\n___________________ test_add_page_component_returning_tuple ____________________\n\n    def test_add_page_component_returning_tuple():\n        \"\"\"Test that a component or render method returning a\n        tuple is unpacked in a Fragment.\n        \"\"\"\n        app = App()\n    \n        def index():\n            return rx.text(\"first\"), rx.text(\"second\")\n    \n        def page2():\n            return (rx.text(\"third\"),)\n    \n>       app.add_page(index)  # type: ignore\n\ntests/test_app.py:1475: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <App state=None>\ncomponent = ({\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [...ontents\": \"{`second`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false})\nroute = 'index', title = '{} | {}', description = '', image = 'favicon.ico'\non_load = None, meta = []\n\n    def add_page(\n        self,\n        component: Union[Component, ComponentCallable],\n        route: Optional[str] = None,\n        title: str = constants.DefaultPage.TITLE,\n        description: str = constants.DefaultPage.DESCRIPTION,\n        image: str = constants.DefaultPage.IMAGE,\n        on_load: Optional[Union[EventHandler, EventSpec, List[Union[EventHandler, EventSpec]]]] = None,\n        meta: List[Dict[str, str]] = constants.DefaultPage.META_LIST,\n    ):\n        \"\"\"Add a page to the app.\n    \n        If the component is a callable, by default the route is the name of the\n        function. Otherwise, a route must be provided.\n    \n        Args:\n            component: The component to display at the page.\n            route: The route to display the component at.\n            title: The title of the page.\n            description: The description of the page.\n            image: The image to display on the page.\n            on_load: The event handler(s) that will be called each time the page load.\n            meta: The metadata of the page.\n    \n        Raises:\n            ValueError: When the specified route name already exists.\n        \"\"\"\n        # If the component is a callable, use the function name as the route.\n        if callable(component) and route is None:\n            route = component.__name__\n    \n        # Ensure the route is provided.\n        if route is None:\n            raise ValueError(\"A route must be provided if the component is not a callable.\")\n    \n        # Verify if the route already exists.\n        if route in self.pages:\n            raise ValueError(f\"The route '{route}' already exists.\")\n    \n        # Generate the component if it's a callable.\n        component = self._generate_component(component)\n    \n        # Add the page to the app.\n        self.pages[route] = component\n    \n        # Add the load events for the page.\n        if on_load:\n            if not isinstance(on_load, list):\n                on_load = [on_load]\n            self.load_events[route] = on_load\n    \n        # Add the page metadata.\n>       self.pages[route].title = title\nE       AttributeError: 'tuple' object has no attribute 'title'\n\nreflex/app.py:427: AttributeError\n________________________ test_add_page_set_route_nested ________________________\n\napp = <App state=None>\nindex_page = <function index_page.<locals>.index at 0x7fdd21ff3010>\nwindows_platform = False\n\n    def test_add_page_set_route_nested(app: App, index_page, windows_platform: bool):\n        \"\"\"Test adding a page to an app.\n    \n        Args:\n            app: The app to test.\n            index_page: The index page.\n            windows_platform: Whether the system is windows.\n        \"\"\"\n        route = \"test\\\\nested\" if windows_platform else \"/test/nested\"\n        assert app.pages == {}\n        app.add_page(index_page, route=route)\n>       assert app.pages.keys() == {route.strip(os.path.sep)}\nE       AssertionError: assert dict_keys(['/test/nested']) == {'test/nested'}\nE         \nE         Use -v to get more diff\n\ntests/test_app.py:290: AssertionError\n_________________________ test_app_state_determination _________________________\n\n    def test_app_state_determination():\n        \"\"\"Test that the stateless status of an app is determined correctly.\"\"\"\n        a1 = App()\n        assert a1.state is None\n    \n        # No state, no router, no event handlers.\n        a1.add_page(rx.box(\"Index\"), route=\"/\")\n        assert a1.state is None\n    \n        # Add a page with `on_load` enables state.\n        a1.add_page(rx.box(\"About\"), route=\"/about\", on_load=rx.console_log(\"\"))\n>       assert a1.state is not None\nE       assert None is not None\nE        +  where None = <App state=None>.state\n\ntests/test_app.py:1376: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_add_page_invalid_api_route - Failed: DID NOT R...\nFAILED tests/test_app.py::test_add_page_set_route_dynamic - AssertionError: a...\nFAILED tests/test_app.py::test_add_duplicate_page_route_error[<lambda>-second_page2-page3]\nFAILED tests/test_app.py::test_add_duplicate_page_route_error[page1-page2-page1]\nFAILED tests/test_app.py::test_dynamic_route_var_route_change_completed_on_load\nFAILED tests/test_app.py::test_add_page_set_route - AssertionError: assert di...\nFAILED tests/test_app.py::test_overlay_component[None-default_overlay_component-None]\nFAILED tests/test_app.py::test_overlay_component[None-None-None] - KeyError: ...\nFAILED tests/test_app.py::test_overlay_component[None-overlay_component2-Text]\nFAILED tests/test_app.py::test_overlay_component[State-default_overlay_component-Fragment]\nFAILED tests/test_app.py::test_overlay_component[State-None-None] - KeyError:...\nFAILED tests/test_app.py::test_overlay_component[State-overlay_component5-Text]\nFAILED tests/test_app.py::test_overlay_component[State-<lambda>-Text] - KeyEr...\nFAILED tests/test_app.py::test_add_page_component_returning_tuple - Attribute...\nFAILED tests/test_app.py::test_add_page_set_route_nested - AssertionError: as...\nFAILED tests/test_app.py::test_app_state_determination - assert None is not None\n=================== 16 failed, 8 passed, 5 warnings in 1.06s ===================\n\n"], "reflex-reflex/app.py-_setup_overlay_component": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_app.py F.FF.FF                                                [100%]\n\n=================================== FAILURES ===================================\n_________ test_overlay_component[None-default_overlay_component-None] __________\n\nstate = None\noverlay_component = <function default_overlay_component at 0x7fe7002a4670>\nexp_page_child = None\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n>           assert app.overlay_component is None\nE           assert <function default_overlay_component at 0x7fe7002a4670> is None\nE            +  where <function default_overlay_component at 0x7fe7002a4670> = <App state=None>.overlay_component\n\ntests/test_app.py:1229: AssertionError\n_____________ test_overlay_component[None-overlay_component2-Text] _____________\n\nstate = None\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n_______ test_overlay_component[State-default_overlay_component-Fragment] _______\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function default_overlay_component at 0x7fe7002a4670>\nexp_page_child = <class 'reflex.components.base.fragment.Fragment'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n____________ test_overlay_component[State-overlay_component5-Text] _____________\n\nstate = <class 'reflex.state.State'>\noverlay_component = {\"name\": \"RadixThemesText\", \"props\": [\"as={`p`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{..., \"contents\": \"{`foo`}\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n_________________ test_overlay_component[State-<lambda>-Text] __________________\n\nstate = <class 'reflex.state.State'>\noverlay_component = <function <lambda> at 0x7fe6b3bdf880>\nexp_page_child = <class 'reflex.components.radix.themes.typography.text.Text'>\n\n    @pytest.mark.parametrize(\n        (\"state\", \"overlay_component\", \"exp_page_child\"),\n        [\n            (None, default_overlay_component, None),\n            (None, None, None),\n            (None, Text.create(\"foo\"), Text),\n            (State, default_overlay_component, Fragment),\n            (State, None, None),\n            (State, Text.create(\"foo\"), Text),\n            (State, lambda: Text.create(\"foo\"), Text),\n        ],\n    )\n    def test_overlay_component(\n        state: State | None,\n        overlay_component: Component | ComponentCallable | None,\n        exp_page_child: Type[Component] | None,\n    ):\n        \"\"\"Test that the overlay component is set correctly.\n    \n        Args:\n            state: The state class to pass to App.\n            overlay_component: The overlay_component to pass to App.\n            exp_page_child: The type of the expected child in the page fragment.\n        \"\"\"\n        app = App(state=state, overlay_component=overlay_component)\n        app._setup_overlay_component()\n        if exp_page_child is None:\n            assert app.overlay_component is None\n        elif isinstance(exp_page_child, OverlayFragment):\n            assert app.overlay_component is not None\n            generated_component = app._generate_component(app.overlay_component)  # type: ignore\n            assert isinstance(generated_component, OverlayFragment)\n            assert isinstance(\n                generated_component.children[0],\n                Cond,  # ConnectionModal is a Cond under the hood\n            )\n        else:\n            assert app.overlay_component is not None\n            assert isinstance(\n                app._generate_component(app.overlay_component),  # type: ignore\n                exp_page_child,\n            )\n    \n        app.add_page(rx.box(\"Index\"), route=\"/test\")\n        # overlay components are wrapped during compile only\n        app._setup_overlay_component()\n        page = app.pages[\"test\"]\n    \n        if exp_page_child is not None:\n>           assert len(page.children) == 3\nE           assert 2 == 3\nE            +  where 2 = len([{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}])\nE            +    where [{\"name\": \"RadixThemesBox\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"\"...ge`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}] = {\"name\": \"Fragment\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [{\"name\": \"RadixThe...\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}], \"autofocus\": false}], \"autofocus\": false}.children\n\ntests/test_app.py:1251: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_overlay_component[None-default_overlay_component-None]\nFAILED tests/test_app.py::test_overlay_component[None-overlay_component2-Text]\nFAILED tests/test_app.py::test_overlay_component[State-default_overlay_component-Fragment]\nFAILED tests/test_app.py::test_overlay_component[State-overlay_component5-Text]\nFAILED tests/test_app.py::test_overlay_component[State-<lambda>-Text] - asser...\n=================== 5 failed, 2 passed, 5 warnings in 0.19s ====================\n\n"], "reflex-reflex/app.py-_compile": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_app.py FFFFF.                                                 [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_app_wrap_compile_theme __________________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2588/test_app_wrap_compile_theme0/app/.web'))\n\n    def test_app_wrap_compile_theme(compilable_app: tuple[App, Path]):\n        \"\"\"Test that the radix theme component wraps the app.\n    \n        Args:\n            compilable_app: compilable_app fixture.\n        \"\"\"\n        app, web_dir = compilable_app\n        app.theme = rx.theme(accent_color=\"plum\")\n        app._compile()\n>       app_js_contents = (web_dir / \"pages\" / \"_app.js\").read_text()\n\n/root/repos/py_data/reflex/tests/test_app.py:1290: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/pathlib.py:1132: in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = PosixPath('/tmp/pytest-of-root/pytest-2588/test_app_wrap_compile_theme0/app/.web/pages/_app.js')\nmode = 'r', buffering = -1, encoding = 'locale', errors = None, newline = None\n\n    def open(self, mode='r', buffering=-1, encoding=None,\n             errors=None, newline=None):\n        \"\"\"\n        Open the file pointed by this path and return a file object, as\n        the built-in open() function does.\n        \"\"\"\n        if \"b\" not in mode:\n            encoding = io.text_encoding(encoding)\n>       return self._accessor.open(self, mode, buffering, encoding, errors,\n                                   newline)\nE       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/pytest-of-root/pytest-2588/test_app_wrap_compile_theme0/app/.web/pages/_app.js'\n\n/usr/local/lib/python3.10/pathlib.py:1117: FileNotFoundError\n____________________ test_app_with_transpile_packages[True] ____________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2588/test_app_with_transpile_packag0/app/.web'))\nexport = True\n\n    @pytest.mark.parametrize(\"export\", (True, False))\n    def test_app_with_transpile_packages(compilable_app: tuple[App, Path], export: bool):\n        class C1(rx.Component):\n            library = \"foo@1.2.3\"\n            tag = \"Foo\"\n            transpile_packages: List[str] = [\"foo\"]\n    \n        class C2(rx.Component):\n            library = \"bar@4.5.6\"\n            tag = \"Bar\"\n            transpile_packages: List[str] = [\"bar@4.5.6\"]\n    \n        class C3(rx.NoSSRComponent):\n            library = \"baz@7.8.10\"\n            tag = \"Baz\"\n            transpile_packages: List[str] = [\"baz@7.8.9\"]\n    \n        class C4(rx.NoSSRComponent):\n            library = \"quuc@2.3.4\"\n            tag = \"Quuc\"\n            transpile_packages: List[str] = [\"quuc\"]\n    \n        class C5(rx.Component):\n            library = \"quuc\"\n            tag = \"Quuc\"\n    \n        app, web_dir = compilable_app\n        page = Fragment.create(\n            C1.create(), C2.create(), C3.create(), C4.create(), C5.create()\n        )\n        app.add_page(page, route=\"/\")\n        app._compile(export=export)\n    \n>       next_config = (web_dir / \"next.config.js\").read_text()\n\n/root/repos/py_data/reflex/tests/test_app.py:1525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/pathlib.py:1132: in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = PosixPath('/tmp/pytest-of-root/pytest-2588/test_app_with_transpile_packag0/app/.web/next.config.js')\nmode = 'r', buffering = -1, encoding = 'locale', errors = None, newline = None\n\n    def open(self, mode='r', buffering=-1, encoding=None,\n             errors=None, newline=None):\n        \"\"\"\n        Open the file pointed by this path and return a file object, as\n        the built-in open() function does.\n        \"\"\"\n        if \"b\" not in mode:\n            encoding = io.text_encoding(encoding)\n>       return self._accessor.open(self, mode, buffering, encoding, errors,\n                                   newline)\nE       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/pytest-of-root/pytest-2588/test_app_with_transpile_packag0/app/.web/next.config.js'\n\n/usr/local/lib/python3.10/pathlib.py:1117: FileNotFoundError\n___________________ test_app_with_transpile_packages[False] ____________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2588/test_app_with_transpile_packag1/app/.web'))\nexport = False\n\n    @pytest.mark.parametrize(\"export\", (True, False))\n    def test_app_with_transpile_packages(compilable_app: tuple[App, Path], export: bool):\n        class C1(rx.Component):\n            library = \"foo@1.2.3\"\n            tag = \"Foo\"\n            transpile_packages: List[str] = [\"foo\"]\n    \n        class C2(rx.Component):\n            library = \"bar@4.5.6\"\n            tag = \"Bar\"\n            transpile_packages: List[str] = [\"bar@4.5.6\"]\n    \n        class C3(rx.NoSSRComponent):\n            library = \"baz@7.8.10\"\n            tag = \"Baz\"\n            transpile_packages: List[str] = [\"baz@7.8.9\"]\n    \n        class C4(rx.NoSSRComponent):\n            library = \"quuc@2.3.4\"\n            tag = \"Quuc\"\n            transpile_packages: List[str] = [\"quuc\"]\n    \n        class C5(rx.Component):\n            library = \"quuc\"\n            tag = \"Quuc\"\n    \n        app, web_dir = compilable_app\n        page = Fragment.create(\n            C1.create(), C2.create(), C3.create(), C4.create(), C5.create()\n        )\n        app.add_page(page, route=\"/\")\n        app._compile(export=export)\n    \n>       next_config = (web_dir / \"next.config.js\").read_text()\n\n/root/repos/py_data/reflex/tests/test_app.py:1525: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/pathlib.py:1132: in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = PosixPath('/tmp/pytest-of-root/pytest-2588/test_app_with_transpile_packag1/app/.web/next.config.js')\nmode = 'r', buffering = -1, encoding = 'locale', errors = None, newline = None\n\n    def open(self, mode='r', buffering=-1, encoding=None,\n             errors=None, newline=None):\n        \"\"\"\n        Open the file pointed by this path and return a file object, as\n        the built-in open() function does.\n        \"\"\"\n        if \"b\" not in mode:\n            encoding = io.text_encoding(encoding)\n>       return self._accessor.open(self, mode, buffering, encoding, errors,\n                                   newline)\nE       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/pytest-of-root/pytest-2588/test_app_with_transpile_packag1/app/.web/next.config.js'\n\n/usr/local/lib/python3.10/pathlib.py:1117: FileNotFoundError\n____________________________ test_app_wrap_priority ____________________________\n\ncompilable_app = (<App state=None>, PosixPath('/tmp/pytest-of-root/pytest-2588/test_app_wrap_priority0/app/.web'))\n\n    def test_app_wrap_priority(compilable_app: tuple[App, Path]):\n        \"\"\"Test that the app wrap components are wrapped in the correct order.\n    \n        Args:\n            compilable_app: compilable_app fixture.\n        \"\"\"\n        app, web_dir = compilable_app\n    \n        class Fragment1(Component):\n            tag = \"Fragment1\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(99, \"Box\"): rx.chakra.box()}\n    \n        class Fragment2(Component):\n            tag = \"Fragment2\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(50, \"Text\"): rx.chakra.text()}\n    \n        class Fragment3(Component):\n            tag = \"Fragment3\"\n    \n            def _get_app_wrap_components(self) -> dict[tuple[int, str], Component]:\n                return {(10, \"Fragment2\"): Fragment2.create()}\n    \n        def page():\n            return Fragment1.create(Fragment3.create())\n    \n        app.add_page(page)\n        app._compile()\n>       app_js_contents = (web_dir / \"pages\" / \"_app.js\").read_text()\n\n/root/repos/py_data/reflex/tests/test_app.py:1340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/pathlib.py:1132: in read_text\n    with self.open(mode='r', encoding=encoding, errors=errors) as f:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = PosixPath('/tmp/pytest-of-root/pytest-2588/test_app_wrap_priority0/app/.web/pages/_app.js')\nmode = 'r', buffering = -1, encoding = 'locale', errors = None, newline = None\n\n    def open(self, mode='r', buffering=-1, encoding=None,\n             errors=None, newline=None):\n        \"\"\"\n        Open the file pointed by this path and return a file object, as\n        the built-in open() function does.\n        \"\"\"\n        if \"b\" not in mode:\n            encoding = io.text_encoding(encoding)\n>       return self._accessor.open(self, mode, buffering, encoding, errors,\n                                   newline)\nE       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/pytest-of-root/pytest-2588/test_app_wrap_priority0/app/.web/pages/_app.js'\n\n/usr/local/lib/python3.10/pathlib.py:1117: FileNotFoundError\n____________________ test_app_with_invalid_var_dependencies ____________________\n\ncompilable_app = (<App state=InvalidDepState>, PosixPath('/tmp/pytest-of-root/pytest-2588/test_app_with_invalid_var_depe0/app/.web'))\n\n    def test_app_with_invalid_var_dependencies(compilable_app: tuple[App, Path]):\n        app, _ = compilable_app\n    \n        class InvalidDepState(BaseState):\n            @computed_var(deps=[\"foolksjdf\"], cache=True)\n            def bar(self) -> str:\n                return \"bar\"\n    \n        app.state = InvalidDepState\n>       with pytest.raises(exceptions.VarDependencyError):\nE       Failed: DID NOT RAISE <class 'reflex.utils.exceptions.VarDependencyError'>\n\n/root/repos/py_data/reflex/tests/test_app.py:1572: Failed\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_app_wrap_compile_theme - FileNotFoundError: [E...\nFAILED tests/test_app.py::test_app_with_transpile_packages[True] - FileNotFou...\nFAILED tests/test_app.py::test_app_with_transpile_packages[False] - FileNotFo...\nFAILED tests/test_app.py::test_app_wrap_priority - FileNotFoundError: [Errno ...\nFAILED tests/test_app.py::test_app_with_invalid_var_dependencies - Failed: DI...\n=================== 5 failed, 1 passed, 5 warnings in 0.34s ====================\n\n"], "reflex-reflex/app.py-modify_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.23s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_waiter\n(no match in any of [<Module test_state.py>])\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_state.py::_coro_blocker\n(no match in any of [<Module test_state.py>])\n\n"], "reflex-reflex/vars.py-create": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:19: in <module>\n    from reflex.components.sonner.toast import Toaster, ToastProps\nreflex/components/sonner/__init__.py:3: in <module>\n    from .toast import toast\nreflex/components/sonner/toast.py:31: in <module>\n    toast_ref = Var.create_safe(\"refs['__toast']\", _var_is_string=False)\nreflex/vars.py:438: in create_safe\n    var = cls.create(\nE   TypeError: Var.create() got multiple values for argument '_var_is_local'\n"], "reflex-reflex/vars.py-create_safe": ["\nImportError while loading conftest '/root/repos/py_data/reflex/tests/conftest.py'.\ntests/conftest.py:13: in <module>\n    from reflex.app import App\nreflex/app.py:54: in <module>\n    from reflex.components.core.banner import connection_pulser, connection_toaster\nreflex/components/core/banner.py:31: in <module>\n    connect_errors: Var = Var.create_safe(\nE   TypeError: Var.create_safe() got multiple values for argument 'value'\n"], "reflex-reflex/vars.py-foreach": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/core/test_foreach.py .                                  [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.06s =========================\n\n"], "reflex-reflex/vars.py-get_default_value": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_var.py FFFFFFFF                                               [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_default_value[prop0-0] __________________________\n\nprop = BaseVar(_var_name='p', _var_type=<class 'int'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nexpected = 0\n\n    @pytest.mark.parametrize(\n        \"prop,expected\",\n        [\n            (BaseVar(_var_name=\"p\", _var_type=int), 0),\n            (BaseVar(_var_name=\"p\", _var_type=float), 0.0),\n            (BaseVar(_var_name=\"p\", _var_type=str), \"\"),\n            (BaseVar(_var_name=\"p\", _var_type=bool), False),\n            (BaseVar(_var_name=\"p\", _var_type=list), []),\n            (BaseVar(_var_name=\"p\", _var_type=dict), {}),\n            (BaseVar(_var_name=\"p\", _var_type=tuple), ()),\n            (BaseVar(_var_name=\"p\", _var_type=set), set()),\n        ],\n    )\n    def test_default_value(prop, expected):\n        \"\"\"Test that the default value of a var is correct.\n    \n        Args:\n            prop: The var to test.\n            expected: The expected default value.\n        \"\"\"\n>       assert prop.get_default_value() == expected\nE       AssertionError: assert None == 0\nE        +  where None = <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'int'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)>()\nE        +    where <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'int'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)> = BaseVar(_var_name='p', _var_type=<class 'int'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None).get_default_value\n\ntests/test_var.py:207: AssertionError\n________________________ test_default_value[prop1-0.0] _________________________\n\nprop = BaseVar(_var_name='p', _var_type=<class 'float'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nexpected = 0.0\n\n    @pytest.mark.parametrize(\n        \"prop,expected\",\n        [\n            (BaseVar(_var_name=\"p\", _var_type=int), 0),\n            (BaseVar(_var_name=\"p\", _var_type=float), 0.0),\n            (BaseVar(_var_name=\"p\", _var_type=str), \"\"),\n            (BaseVar(_var_name=\"p\", _var_type=bool), False),\n            (BaseVar(_var_name=\"p\", _var_type=list), []),\n            (BaseVar(_var_name=\"p\", _var_type=dict), {}),\n            (BaseVar(_var_name=\"p\", _var_type=tuple), ()),\n            (BaseVar(_var_name=\"p\", _var_type=set), set()),\n        ],\n    )\n    def test_default_value(prop, expected):\n        \"\"\"Test that the default value of a var is correct.\n    \n        Args:\n            prop: The var to test.\n            expected: The expected default value.\n        \"\"\"\n>       assert prop.get_default_value() == expected\nE       AssertionError: assert None == 0.0\nE        +  where None = <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'float'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)>()\nE        +    where <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'float'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)> = BaseVar(_var_name='p', _var_type=<class 'float'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None).get_default_value\n\ntests/test_var.py:207: AssertionError\n__________________________ test_default_value[prop2-] __________________________\n\nprop = BaseVar(_var_name='p', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nexpected = ''\n\n    @pytest.mark.parametrize(\n        \"prop,expected\",\n        [\n            (BaseVar(_var_name=\"p\", _var_type=int), 0),\n            (BaseVar(_var_name=\"p\", _var_type=float), 0.0),\n            (BaseVar(_var_name=\"p\", _var_type=str), \"\"),\n            (BaseVar(_var_name=\"p\", _var_type=bool), False),\n            (BaseVar(_var_name=\"p\", _var_type=list), []),\n            (BaseVar(_var_name=\"p\", _var_type=dict), {}),\n            (BaseVar(_var_name=\"p\", _var_type=tuple), ()),\n            (BaseVar(_var_name=\"p\", _var_type=set), set()),\n        ],\n    )\n    def test_default_value(prop, expected):\n        \"\"\"Test that the default value of a var is correct.\n    \n        Args:\n            prop: The var to test.\n            expected: The expected default value.\n        \"\"\"\n>       assert prop.get_default_value() == expected\nE       AssertionError: assert None == ''\nE        +  where None = <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)>()\nE        +    where <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)> = BaseVar(_var_name='p', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None).get_default_value\n\ntests/test_var.py:207: AssertionError\n_______________________ test_default_value[prop3-False] ________________________\n\nprop = BaseVar(_var_name='p', _var_type=<class 'bool'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nexpected = False\n\n    @pytest.mark.parametrize(\n        \"prop,expected\",\n        [\n            (BaseVar(_var_name=\"p\", _var_type=int), 0),\n            (BaseVar(_var_name=\"p\", _var_type=float), 0.0),\n            (BaseVar(_var_name=\"p\", _var_type=str), \"\"),\n            (BaseVar(_var_name=\"p\", _var_type=bool), False),\n            (BaseVar(_var_name=\"p\", _var_type=list), []),\n            (BaseVar(_var_name=\"p\", _var_type=dict), {}),\n            (BaseVar(_var_name=\"p\", _var_type=tuple), ()),\n            (BaseVar(_var_name=\"p\", _var_type=set), set()),\n        ],\n    )\n    def test_default_value(prop, expected):\n        \"\"\"Test that the default value of a var is correct.\n    \n        Args:\n            prop: The var to test.\n            expected: The expected default value.\n        \"\"\"\n>       assert prop.get_default_value() == expected\nE       AssertionError: assert None == False\nE        +  where None = <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'bool'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)>()\nE        +    where <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'bool'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)> = BaseVar(_var_name='p', _var_type=<class 'bool'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None).get_default_value\n\ntests/test_var.py:207: AssertionError\n_____________________ test_default_value[prop4-expected4] ______________________\n\nprop = BaseVar(_var_name='p', _var_type=<class 'list'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nexpected = []\n\n    @pytest.mark.parametrize(\n        \"prop,expected\",\n        [\n            (BaseVar(_var_name=\"p\", _var_type=int), 0),\n            (BaseVar(_var_name=\"p\", _var_type=float), 0.0),\n            (BaseVar(_var_name=\"p\", _var_type=str), \"\"),\n            (BaseVar(_var_name=\"p\", _var_type=bool), False),\n            (BaseVar(_var_name=\"p\", _var_type=list), []),\n            (BaseVar(_var_name=\"p\", _var_type=dict), {}),\n            (BaseVar(_var_name=\"p\", _var_type=tuple), ()),\n            (BaseVar(_var_name=\"p\", _var_type=set), set()),\n        ],\n    )\n    def test_default_value(prop, expected):\n        \"\"\"Test that the default value of a var is correct.\n    \n        Args:\n            prop: The var to test.\n            expected: The expected default value.\n        \"\"\"\n>       assert prop.get_default_value() == expected\nE       AssertionError: assert None == []\nE        +  where None = <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'list'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)>()\nE        +    where <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'list'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)> = BaseVar(_var_name='p', _var_type=<class 'list'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None).get_default_value\n\ntests/test_var.py:207: AssertionError\n_____________________ test_default_value[prop5-expected5] ______________________\n\nprop = BaseVar(_var_name='p', _var_type=<class 'dict'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nexpected = {}\n\n    @pytest.mark.parametrize(\n        \"prop,expected\",\n        [\n            (BaseVar(_var_name=\"p\", _var_type=int), 0),\n            (BaseVar(_var_name=\"p\", _var_type=float), 0.0),\n            (BaseVar(_var_name=\"p\", _var_type=str), \"\"),\n            (BaseVar(_var_name=\"p\", _var_type=bool), False),\n            (BaseVar(_var_name=\"p\", _var_type=list), []),\n            (BaseVar(_var_name=\"p\", _var_type=dict), {}),\n            (BaseVar(_var_name=\"p\", _var_type=tuple), ()),\n            (BaseVar(_var_name=\"p\", _var_type=set), set()),\n        ],\n    )\n    def test_default_value(prop, expected):\n        \"\"\"Test that the default value of a var is correct.\n    \n        Args:\n            prop: The var to test.\n            expected: The expected default value.\n        \"\"\"\n>       assert prop.get_default_value() == expected\nE       AssertionError: assert None == {}\nE        +  where None = <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'dict'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)>()\nE        +    where <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'dict'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)> = BaseVar(_var_name='p', _var_type=<class 'dict'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None).get_default_value\n\ntests/test_var.py:207: AssertionError\n_____________________ test_default_value[prop6-expected6] ______________________\n\nprop = BaseVar(_var_name='p', _var_type=<class 'tuple'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nexpected = ()\n\n    @pytest.mark.parametrize(\n        \"prop,expected\",\n        [\n            (BaseVar(_var_name=\"p\", _var_type=int), 0),\n            (BaseVar(_var_name=\"p\", _var_type=float), 0.0),\n            (BaseVar(_var_name=\"p\", _var_type=str), \"\"),\n            (BaseVar(_var_name=\"p\", _var_type=bool), False),\n            (BaseVar(_var_name=\"p\", _var_type=list), []),\n            (BaseVar(_var_name=\"p\", _var_type=dict), {}),\n            (BaseVar(_var_name=\"p\", _var_type=tuple), ()),\n            (BaseVar(_var_name=\"p\", _var_type=set), set()),\n        ],\n    )\n    def test_default_value(prop, expected):\n        \"\"\"Test that the default value of a var is correct.\n    \n        Args:\n            prop: The var to test.\n            expected: The expected default value.\n        \"\"\"\n>       assert prop.get_default_value() == expected\nE       AssertionError: assert None == ()\nE        +  where None = <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'tuple'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)>()\nE        +    where <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'tuple'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)> = BaseVar(_var_name='p', _var_type=<class 'tuple'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None).get_default_value\n\ntests/test_var.py:207: AssertionError\n_____________________ test_default_value[prop7-expected7] ______________________\n\nprop = BaseVar(_var_name='p', _var_type=<class 'set'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)\nexpected = set()\n\n    @pytest.mark.parametrize(\n        \"prop,expected\",\n        [\n            (BaseVar(_var_name=\"p\", _var_type=int), 0),\n            (BaseVar(_var_name=\"p\", _var_type=float), 0.0),\n            (BaseVar(_var_name=\"p\", _var_type=str), \"\"),\n            (BaseVar(_var_name=\"p\", _var_type=bool), False),\n            (BaseVar(_var_name=\"p\", _var_type=list), []),\n            (BaseVar(_var_name=\"p\", _var_type=dict), {}),\n            (BaseVar(_var_name=\"p\", _var_type=tuple), ()),\n            (BaseVar(_var_name=\"p\", _var_type=set), set()),\n        ],\n    )\n    def test_default_value(prop, expected):\n        \"\"\"Test that the default value of a var is correct.\n    \n        Args:\n            prop: The var to test.\n            expected: The expected default value.\n        \"\"\"\n>       assert prop.get_default_value() == expected\nE       AssertionError: assert None == set()\nE        +  where None = <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'set'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)>()\nE        +    where <bound method BaseVar.get_default_value of BaseVar(_var_name='p', _var_type=<class 'set'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None)> = BaseVar(_var_name='p', _var_type=<class 'set'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=None).get_default_value\n\ntests/test_var.py:207: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_var.py::test_default_value[prop0-0] - AssertionError: asser...\nFAILED tests/test_var.py::test_default_value[prop1-0.0] - AssertionError: ass...\nFAILED tests/test_var.py::test_default_value[prop2-] - AssertionError: assert...\nFAILED tests/test_var.py::test_default_value[prop3-False] - AssertionError: a...\nFAILED tests/test_var.py::test_default_value[prop4-expected4] - AssertionErro...\nFAILED tests/test_var.py::test_default_value[prop5-expected5] - AssertionErro...\nFAILED tests/test_var.py::test_default_value[prop6-expected6] - AssertionErro...\nFAILED tests/test_var.py::test_default_value[prop7-expected7] - AssertionErro...\n======================== 8 failed, 5 warnings in 0.20s =========================\n\n"], "reflex-reflex/state.py-get_skip_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py E                                                    [100%]\n\n==================================== ERRORS ====================================\n____________________ ERROR at setup of test_base_class_vars ____________________\n\n    @pytest.fixture\n    def test_state() -> TestState:\n        \"\"\"A state.\n    \n        Returns:\n            A test state.\n        \"\"\"\n>       return TestState()  # type: ignore\n\ntests/test_state.py:206: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:396: in __init__\n    self.substates[substate.get_name()] = substate(\nreflex/state.py:396: in __init__\n    self.substates[substate.get_name()] = substate(\nreflex/state.py:3079: in __setitem__\n    self._mark_dirty(super().__setitem__, args=(key, value))\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:2949: in _mark_dirty\n    self._self_state.dirty_vars.add(self._self_field_name)\nreflex/state.py:3024: in __getattr__\n    if isinstance(value, self.__mutable_types__) and __name not in (\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <class 'reflex.base.Base'>\ninstance = <FunctionWrapper at 0x7f8850ee9780 for builtin_function_or_method at 0x7f8850ecab60>\n\n    def __instancecheck__(self, instance: Any) -> bool:\n        \"\"\"\n        Avoid calling ABC _abc_subclasscheck unless we're pretty sure.\n    \n        See #3829 and python/cpython#92810\n        \"\"\"\n>       return hasattr(instance, '__fields__') and super().__instancecheck__(instance)\nE       RecursionError: maximum recursion depth exceeded while calling a Python object\n\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:304: RecursionError\n!!! Recursion error detected, but an error occurred locating the origin of recursion.\n  The following exception happened when comparing locals in the stack frame:\n    RecursionError: maximum recursion depth exceeded while calling a Python object\n  Displaying first and last 10 stack frames out of 1480.\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/test_state.py::test_base_class_vars - RecursionError: maximum rec...\n========================= 5 warnings, 1 error in 0.68s =========================\n\n"], "reflex-reflex/state.py-add_var": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/test_state.py .F                                                   [ 66%]\ntests/test_app.py .                                                      [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_add_var _________________________________\n\n    def test_add_var():\n        class DynamicState(BaseState):\n            pass\n    \n        ds1 = DynamicState()\n        assert \"dynamic_int\" not in ds1.__dict__\n        assert not hasattr(ds1, \"dynamic_int\")\n        ds1.add_var(\"dynamic_int\", int, 42)\n        # Existing instances get the BaseVar\n>       assert ds1.dynamic_int.equals(DynamicState.dynamic_int)  # type: ignore\n\ntests/test_state.py:869: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'DynamicState' object has no attribute 'dynamic_int'\") raised in repr()] DynamicState object at 0x7f268846cdc0>\nname = 'dynamic_int'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'DynamicState' object has no attribute 'dynamic_int'. Did you mean: 'set_dynamic_int'?\n\nreflex/state.py:1050: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_add_var - AttributeError: 'DynamicState' obj...\n=================== 1 failed, 2 passed, 5 warnings in 0.53s ====================\n\n"], "reflex-reflex/state.py-reset": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_state.py FF                                                   [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_reset __________________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})\nchild_state = ChildState({'test_state.child_state': {'count': 23, 'value': 'test'}, 'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    def test_reset(test_state, child_state):\n        \"\"\"Test resetting the state.\n    \n        Args:\n            test_state: A state.\n            child_state: A child state.\n        \"\"\"\n        # Set some values.\n        test_state.num1 = 1\n        test_state.num2 = 2\n        child_state.value = \"test\"\n    \n        # Reset the state.\n>       test_state.reset()\n\ntests/test_state.py:673: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1098: in reset\n    if key in self._non_default_attributes:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro...cached': ''}, 'test_state.child_state3': {'value': ''}, 'test_state.child_state3.grandchild_state3': {'computed': ''}})\nname = '_non_default_attributes'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'TestState' object has no attribute '_non_default_attributes'\n\nreflex/state.py:1040: AttributeError\n___________________________ test_reset_with_mutables ___________________________\n\n    def test_reset_with_mutables():\n        \"\"\"Calling reset should always reset fields to a copy of the defaults.\"\"\"\n        default = [[0, 0], [0, 1], [1, 1]]\n        copied_default = copy.deepcopy(default)\n    \n        class MutableResetState(BaseState):\n            items: List[List[int]] = default\n    \n        instance = MutableResetState()\n        assert instance.items.__wrapped__ is not default  # type: ignore\n        assert instance.items == default == copied_default\n        instance.items.append([3, 3])\n        assert instance.items != default\n        assert instance.items != copied_default\n    \n>       instance.reset()\n\ntests/test_state.py:2418: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/state.py:1098: in reset\n    if key in self._non_default_attributes:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MutableResetState({'mutable_reset_state': {'items': [[0, 0], [0, 1], [1, 1], [3, 3]], 'router': {'session': {'client_t...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\nname = '_non_default_attributes'\n\n    def __getattribute__(self, name: str) -> Any:\n        \"\"\"Get the state var.\n    \n        If the var is inherited, get the var from the parent state.\n    \n        Args:\n            name: The name of the var.\n    \n        Returns:\n            The value of the var.\n        \"\"\"\n        # If the state hasn't been initialized yet, return the default value.\n        if not super().__getattribute__(\"__dict__\"):\n            return super().__getattribute__(name)\n    \n        inherited_vars = {\n            **super().__getattribute__(\"inherited_vars\"),\n            **super().__getattribute__(\"inherited_backend_vars\"),\n        }\n    \n        # For now, handle router_data updates as a special case.\n        if name in inherited_vars or name == constants.ROUTER_DATA:\n            parent_state = super().__getattribute__(\"parent_state\")\n            if parent_state is not None:\n                return getattr(parent_state, name)\n    \n        # Allow event handlers to be called on the instance directly.\n        event_handlers = super().__getattribute__(\"event_handlers\")\n        if name in event_handlers:\n            handler = event_handlers[name]\n            if handler.is_background:\n                fn = _no_chain_background_task(type(self), name, handler.fn)\n            else:\n                fn = functools.partial(handler.fn, self)\n            fn.__module__ = handler.fn.__module__  # type: ignore\n            fn.__qualname__ = handler.fn.__qualname__  # type: ignore\n            return fn\n    \n        backend_vars = super().__getattribute__(\"_backend_vars\")\n        if name in backend_vars:\n            value = backend_vars[name]\n        else:\n>           value = super().__getattribute__(name)\nE           AttributeError: 'MutableResetState' object has no attribute '_non_default_attributes'\n\nreflex/state.py:1040: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_reset - AttributeError: 'TestState' object h...\nFAILED tests/test_state.py::test_reset_with_mutables - AttributeError: 'Mutab...\n======================== 2 failed, 5 warnings in 0.58s =========================\n\n"], "reflex-reflex/state.py-get_state": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/test_state.py .sFs.s                                               [ 33%]\ntests/test_state_tree.py sssssssss                                       [ 83%]\ntests/test_state.py sFs                                                  [100%]\n\n=================================== FAILURES ===================================\n______________ test_get_state_from_sibling_not_cached[in_process] ______________\n\nmock_app = <App state=Parent>, token = 'a9daed37-30f1-43dd-8d5b-2f90c8678089'\n\n    @pytest.mark.asyncio\n    async def test_get_state_from_sibling_not_cached(mock_app: rx.App, token: str):\n        \"\"\"A test simulating update_vars_internal when setting cookies with computed vars.\n    \n        In that case, a sibling state, UpdateVarsInternalState handles the fetching\n        of states that need to have values set. Only the states that have a computed\n        var are pre-fetched (like Child3 in this test), so `get_state` needs to\n        avoid refetching those already-cached states when getting substates,\n        otherwise the set values will be overridden by the freshly deserialized\n        version and lost.\n    \n        Explicit regression test for https://github.com/reflex-dev/reflex/issues/2851.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n    \n        class Parent(BaseState):\n            \"\"\"A root state like rx.State.\"\"\"\n    \n            parent_var: int = 0\n    \n        class Child(Parent):\n            \"\"\"A state simulating UpdateVarsInternalState.\"\"\"\n    \n            pass\n    \n        class Child2(Parent):\n            \"\"\"An unconnected child state.\"\"\"\n    \n            pass\n    \n        class Child3(Parent):\n            \"\"\"A child state with a computed var causing it to be pre-fetched.\n    \n            If child3_var gets set to a value, and `get_state` erroneously\n            re-fetches it from redis, the value will be lost.\n            \"\"\"\n    \n            child3_var: int = 0\n    \n            @rx.var\n            def v(self):\n                pass\n    \n        class Grandchild3(Child3):\n            \"\"\"An extra layer of substate to catch an issue discovered in\n            _determine_missing_parent_states while writing the regression test where\n            invalid parent state names were being constructed.\n            \"\"\"\n    \n            pass\n    \n        class GreatGrandchild3(Grandchild3):\n            \"\"\"Fetching this state wants to also fetch Child3 as a missing parent.\n            However, Child3 should already be cached in the state tree because it\n            has a computed var.\n            \"\"\"\n    \n            pass\n    \n        mock_app.state_manager.state = mock_app.state = Parent\n    \n        # Get the top level state via unconnected sibling.\n        root = await mock_app.state_manager.get_state(_substate_key(token, Child))\n        # Set value in parent_var to assert it does not get refetched later.\n        root.parent_var = 1\n    \n        if isinstance(mock_app.state_manager, StateManagerRedis):\n            # When redis is used, only states with computed vars are pre-fetched.\n            assert \"child2\" not in root.substates\n            assert \"child3\" in root.substates  # (due to @rx.var)\n    \n        # Get the unconnected sibling state, which will be used to `get_state` other instances.\n        child = root.get_substate(Child.get_full_name().split(\".\"))\n    \n        # Get an uncached child state.\n        child2 = await child.get_state(Child2)\n>       assert child2.parent_var == 1\nE       AssertionError: assert 0 == 1\nE        +  where 0 = Parent({'parent': {'parent_var': 0, 'router': {'session': {'client_token': '', 'client_ip': '', 'session_id': ''}, 'he...d3': {'child3_var': 0, 'v': None}, 'parent.child3.grandchild3': {}, 'parent.child3.grandchild3.great_grandchild3': {}}).parent_var\n\ntests/test_state.py:2896: AssertionError\n__________________________ test_get_state[in_process] __________________________\n\nmock_app = <App state=TestState>, token = 'b19a56a5-c0f6-4d95-ad71-3956bff76be9'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n        child_state2_get_state = await test_state.get_state(ChildState2)\n        # These should be the same object.\n>       assert child_state2_direct is child_state2_get_state\nE       AssertionError: assert ChildState2({'test_state.child_state2': {'value': ''}, 'test_state.child_state2.grandchild_state2': {'cached': ''}}) is TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\n\ntests/test_state.py:2736: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_get_state_from_sibling_not_cached[in_process]\nFAILED tests/test_state.py::test_get_state[in_process] - AssertionError: asse...\n============= 2 failed, 2 passed, 14 skipped, 5 warnings in 0.93s ==============\n\n"], "reflex-reflex/state.py-_process": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/test_app.py FFFFFFFFFFF                                            [ 52%]\ntests/test_state.py FFFFFFFFFs                                           [100%]\n\n=================================== FAILURES ===================================\n______ test_dict_mutation_detection__plain_list[update then __setitem__] _______\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...ny'}}}), ('dict_mutation_test_state.remove_last_detail', {'dict_mutation_test_state': {'details': {'name': 'Jenny'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '224d9899-1643-4634-9847-1f34f8b4d0e8'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...e': 'Tommy'}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-2' coro=<<async_generator_athrow without __name__>()>>\n________ test_dict_mutation_detection__plain_list[delitem then update] _________\n\nevent_tuples = [('dict_mutation_test_state.clear_details', {'dict_mutation_test_state': {'details': {}}}), ('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '48515a4d-7b67-4ea5-b44e-d4581a4e3ac4'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...details': {}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'details': {}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-4' coro=<<async_generator_athrow without __name__>()>>\n__________ test_dict_mutation_detection__plain_list[add, remove, pop] __________\n\nevent_tuples = [('dict_mutation_test_state.add_age', {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}), ('dict...': {'details': {'age': 20}}}), ('dict_mutation_test_state.pop_out_age', {'dict_mutation_test_state': {'details': {}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '3587dcc6-93f0-45c1-b033-b3858d3e0ff6'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...e': 'Tommy'}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'details': {'age': 20, 'name': 'Tommy'}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-6' coro=<<async_generator_athrow without __name__>()>>\n____________ test_dict_mutation_detection__plain_list[dict in list] ____________\n\nevent_tuples = [('dict_mutation_test_state.remove_home_address', {'dict_mutation_test_state': {'address': [{}, {'work': 'work address...to_home_address', {'dict_mutation_test_state': {'address': [{'street': 'street address'}, {'work': 'work address'}]}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '72c9c6e6-64ae-47ce-99d4-eb5da562f9d0'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...k address'}]}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'address': [{}, {'work': 'work address'}]}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-8' coro=<<async_generator_athrow without __name__>()>>\n____________ test_dict_mutation_detection__plain_list[nested dict] _____________\n\nevent_tuples = [('dict_mutation_test_state.change_friend_name', {'dict_mutation_test_state': {'friend_in_nested_dict': {'friend': {'n...'dict_mutation_test_state.remove_friend', {'dict_mutation_test_state': {'friend_in_nested_dict': {'name': 'Nikhil'}}})]\ndict_mutation_state = DictMutationTestState({'dict_mutation_test_state': {'address': [{'home': 'home address'}, {'work': 'work address'}], '...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '3e52fb2e-a3b9-4d07-8b0d-547781e1c9aa'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.change_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Jenny\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_last_detail\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"name\": \"Jenny\"}}},\n                    ),\n                ],\n                id=\"update then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.clear_details\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                ],\n                id=\"delitem then update\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.add_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"details\": {\"name\": \"Tommy\", \"age\": 20}\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_name\",\n                        {\"dict_mutation_test_state\": {\"details\": {\"age\": 20}}},\n                    ),\n                    (\n                        \"dict_mutation_test_state.pop_out_age\",\n                        {\"dict_mutation_test_state\": {\"details\": {}}},\n                    ),\n                ],\n                id=\"add, remove, pop\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.remove_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [{}, {\"work\": \"work address\"}]\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_street_to_home_address\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"address\": [\n                                    {\"street\": \"street address\"},\n                                    {\"work\": \"work address\"},\n                                ]\n                            }\n                        },\n                    ),\n                ],\n                id=\"dict in list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"dict_mutation_test_state.change_friend_name\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\"},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.add_friend_age\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\n                                    \"name\": \"Nikhil\",\n                                    \"friend\": {\"name\": \"Tommy\", \"age\": 30},\n                                }\n                            }\n                        },\n                    ),\n                    (\n                        \"dict_mutation_test_state.remove_friend\",\n                        {\n                            \"dict_mutation_test_state\": {\n                                \"friend_in_nested_dict\": {\"name\": \"Nikhil\"}\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested dict\",\n            ),\n        ],\n    )\n    async def test_dict_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        dict_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test dict mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            dict_mutation_state: A state with dict mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await dict_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'dict_mutati...': 'Nikhil'}}}\nE             \nE             Right contains 1 more item:\nE             {'dict_mutation_test_state': {'friend_in_nested_dict': {'friend': {'name': 'Tommy'},\nE                                                                     'name': 'Nikhil'}}}\nE             Use -v to get more diff\n\ntests/test_app.py:771: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-10' coro=<<async_generator_athrow without __name__>()>>\n____________________________ test_dynamic_var_event ____________________________\n\ntest_state = <class 'tests.test_app.ATestState'>\ntoken = '9341996d-5016-4c39-982f-64610084cd6b'\n\n    @pytest.mark.asyncio\n    async def test_dynamic_var_event(test_state: Type[ATestState], token: str):\n        \"\"\"Test that the default handler of a dynamic generated var\n        works as expected.\n    \n        Args:\n            test_state: State Fixture.\n            token: a Token.\n        \"\"\"\n        state = test_state()  # type: ignore\n        state.add_var(\"int_val\", int, 0)\n        result = await state._process(\n            Event(\n                token=token,\n                name=f\"{test_state.get_name()}.set_int_val\",\n                router_data={\"pathname\": \"/\", \"query\": {}},\n                payload={\"value\": 50},\n            )\n        ).__anext__()\n>       assert result.delta == {test_state.get_name(): {\"int_val\": 50}}\nE       AssertionError: assert {} == {'a_test_stat...int_val': 50}}\nE         \nE         Right contains 1 more item:\nE         {'a_test_state': {'int_val': 50}}\nE         Use -v to get more diff\n\ntests/test_app.py:476: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-12' coro=<<async_generator_athrow without __name__>()>>\n______ test_list_mutation_detection__plain_list[append then __setitem__] _______\n\nevent_tuples = [('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'another-fd']}}), ('list_mutation_test_state.change_first_friend', {'list_mutation_test_state': {'plain_friends': ['Jenny', 'another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'e4a6a972-f82d-4f8f-965b-d2c468c171da'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...another-fd']}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'plain_friends': ['Tommy', 'another-fd']}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-14' coro=<<async_generator_athrow without __name__>()>>\n________ test_list_mutation_detection__plain_list[delitem then append] _________\n\nevent_tuples = [('list_mutation_test_state.unfriend_first_friend', {'list_mutation_test_state': {'plain_friends': []}}), ('list_mutation_test_state.make_friend', {'list_mutation_test_state': {'plain_friends': ['another-fd']}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'ef233164-dbc2-47d1-8d10-66758496314a'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...friends': []}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'plain_friends': []}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-16' coro=<<async_generator_athrow without __name__>()>>\n_____ test_list_mutation_detection__plain_list[extend, remove, pop, clear] _____\n\nevent_tuples = [('list_mutation_test_state.make_friends_with_colleagues', {'list_mutation_test_state': {'plain_friends': ['Tommy', 'P...: ['Peter']}}), ('list_mutation_test_state.unfriend_all_friends', {'list_mutation_test_state': {'plain_friends': []}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'ead9b7ee-ef32-4e3f-96c9-662085e001d2'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...r', 'Jimmy']}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'plain_friends': ['Tommy', 'Peter', 'Jimmy']}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-18' coro=<<async_generator_athrow without __name__>()>>\n____________ test_list_mutation_detection__plain_list[nested list] _____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_second_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Tom...tation_test_state.remove_first_group', {'list_mutation_test_state': {'friends_in_nested_list': [['Jenny', 'Jimmy']]}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = '6939f4d5-186a-422f-9d30-ecc1432b8281'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...', 'Jimmy']]}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'friends_in_nested_list': [['Tommy'],\nE                                                                      ['Jenny', 'Jimmy']]}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-20' coro=<<async_generator_athrow without __name__>()>>\n____________ test_list_mutation_detection__plain_list[list in dict] ____________\n\nevent_tuples = [('list_mutation_test_state.add_jimmy_to_tommy_friends', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['...]}}}), ('list_mutation_test_state.tommy_has_no_fds', {'list_mutation_test_state': {'friends_in_dict': {'Tommy': []}}})]\nlist_mutation_state = ListMutationTestState({'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny']}, 'friends_in_nested_list':...anguage': ''}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}})\ntoken = 'cb389b89-d3a5-46f0-8bc1-95af0982ac4f'\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"event_tuples\",\n        [\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.change_first_friend\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Jenny\", \"another-fd\"]\n                            }\n                        },\n                    ),\n                ],\n                id=\"append then __setitem__\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.unfriend_first_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                    (\n                        \"list_mutation_test_state.make_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"another-fd\"]}},\n                    ),\n                ],\n                id=\"delitem then append\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.make_friends_with_colleagues\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"plain_friends\": [\"Tommy\", \"Peter\", \"Jimmy\"]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_tommy\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\", \"Jimmy\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_last_friend\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": [\"Peter\"]}},\n                    ),\n                    (\n                        \"list_mutation_test_state.unfriend_all_friends\",\n                        {\"list_mutation_test_state\": {\"plain_friends\": []}},\n                    ),\n                ],\n                id=\"extend, remove, pop, clear\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_second_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Tommy\"], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_person_from_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[], [\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_first_group\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_nested_list\": [[\"Jenny\", \"Jimmy\"]]\n                            }\n                        },\n                    ),\n                ],\n                id=\"nested list\",\n            ),\n            pytest.param(\n                [\n                    (\n                        \"list_mutation_test_state.add_jimmy_to_tommy_friends\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jenny\", \"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.remove_jenny_from_tommy\",\n                        {\n                            \"list_mutation_test_state\": {\n                                \"friends_in_dict\": {\"Tommy\": [\"Jimmy\"]}\n                            }\n                        },\n                    ),\n                    (\n                        \"list_mutation_test_state.tommy_has_no_fds\",\n                        {\"list_mutation_test_state\": {\"friends_in_dict\": {\"Tommy\": []}}},\n                    ),\n                ],\n                id=\"list in dict\",\n            ),\n        ],\n    )\n    async def test_list_mutation_detection__plain_list(\n        event_tuples: List[Tuple[str, List[str]]],\n        list_mutation_state: State,\n        token: str,\n    ):\n        \"\"\"Test list mutation detection\n        when reassignment is not explicitly included in the logic.\n    \n        Args:\n            event_tuples: From parametrization.\n            list_mutation_state: A state with list mutation features.\n            token: a Token.\n        \"\"\"\n        for event_name, expected_delta in event_tuples:\n            result = await list_mutation_state._process(\n                Event(\n                    token=token,\n                    name=event_name,\n                    router_data={\"pathname\": \"/\", \"query\": {}},\n                    payload={},\n                )\n            ).__anext__()\n    \n>           assert result.delta == expected_delta\nE           AssertionError: assert {} == {'list_mutati...', 'Jimmy']}}}\nE             \nE             Right contains 1 more item:\nE             {'list_mutation_test_state': {'friends_in_dict': {'Tommy': ['Jenny', 'Jimmy']}}}\nE             Use -v to get more diff\n\ntests/test_app.py:621: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-22' coro=<<async_generator_athrow without __name__>()>>\n_________________________ test_process_event_generator _________________________\n\n    @pytest.mark.asyncio\n    async def test_process_event_generator():\n        \"\"\"Test event handlers that generate multiple updates.\"\"\"\n        gen_state = GenState()  # type: ignore\n        event = Event(\n            token=\"t\",\n            name=\"go\",\n            payload={\"c\": 5},\n        )\n        gen = gen_state._process(event)\n    \n        count = 0\n        async for update in gen:\n            count += 1\n            if count == 6:\n                assert update.delta == {}\n                assert update.final\n            else:\n>               assert gen_state.value == count\nE               AssertionError: assert 0 == 1\nE                +  where 0 = GenState({'gen_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id': ''}, 'headers': {'ho...}, 'page': {'host': '', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'value': 0}}).value\n\ntests/test_state.py:786: AssertionError\n_________________________ test_process_event_substate __________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\nchild_state = ChildState({'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\ngrandchild_state = GrandchildState({'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_substate(test_state, child_state, grandchild_state):\n        \"\"\"Test processing an event on a substate.\n    \n        Args:\n            test_state: A state.\n            child_state: A child state.\n            grandchild_state: A grandchild state.\n        \"\"\"\n        # Events should bubble down to the substate.\n        assert child_state.value == \"\"\n        assert child_state.count == 23\n        event = Event(\n            token=\"t\", name=\"child_state.change_both\", payload={\"value\": \"hi\", \"count\": 12}\n        )\n        update = await test_state._process(event).__anext__()\n>       assert child_state.value == \"HI\"\nE       AssertionError: assert '' == 'HI'\nE         \nE         - HI\n\ntests/test_state.py:743: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-25' coro=<<async_generator_athrow without __name__>()>>\n__________________________ test_process_event_simple ___________________________\n\ntest_state = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}})\n\n    @pytest.mark.asyncio\n    async def test_process_event_simple(test_state):\n        \"\"\"Test processing an event.\n    \n        Args:\n            test_state: A state.\n        \"\"\"\n        assert test_state.num1 == 0\n    \n        event = Event(token=\"t\", name=\"set_num1\", payload={\"value\": 69})\n        update = await test_state._process(event).__anext__()\n    \n        # The event should update the value.\n>       assert test_state.num1 == 69\nE       AssertionError: assert 0 == 69\nE        +  where 0 = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}}).num1\n\ntests/test_state.py:716: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-27' coro=<<async_generator_athrow without __name__>()>>\n____________________ test_preprocess[OnLoadState-expected0] ____________________\n\napp_module_mock = <Mock id='139759634203360'>\ntoken = '1fa51264-bf41-4d80-987e-edc8e87e4e2f'\ntest_state = <class 'tests.test_state.OnLoadState'>\nexpected = {'on_load_state': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f1c5359c550>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2642: KeyError\n___________________ test_preprocess[OnLoadState2-expected1] ____________________\n\napp_module_mock = <Mock id='139759634216368'>\ntoken = 'ab040fa3-1072-480d-bbb2-f1ec3f25d1b3'\ntest_state = <class 'tests.test_state.OnLoadState2'>\nexpected = {'on_load_state2': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f1c535837f0>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2642: KeyError\n___________________ test_preprocess[OnLoadState3-expected2] ____________________\n\napp_module_mock = <Mock id='139759634090736'>\ntoken = '8923a21d-d975-4d17-b1cd-9bd151fe57e0'\ntest_state = <class 'tests.test_state.OnLoadState3'>\nexpected = {'on_load_state3': {'num': 1}}\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f1c53705f00>\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\n        \"test_state, expected\",\n        [\n            (OnLoadState, {\"on_load_state\": {\"num\": 1}}),\n            (OnLoadState2, {\"on_load_state2\": {\"num\": 1}}),\n            (OnLoadState3, {\"on_load_state3\": {\"num\": 1}}),\n        ],\n    )\n    async def test_preprocess(app_module_mock, token, test_state, expected, mocker):\n        \"\"\"Test that a state hydrate event is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            test_state: State to process event.\n            expected: Expected delta.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {test_state, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State, load_events={\"index\": [test_state.test_handler]}\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2642: KeyError\n_____________________ test_preprocess_multiple_load_events _____________________\n\napp_module_mock = <Mock id='139759635693280'>\ntoken = '663410ff-9b1d-4333-9ce4-a9dc8fce93df'\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f1c542a8d90>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_multiple_load_events(app_module_mock, token, mocker):\n        \"\"\"Test that a state hydrate event for multiple on-load events is processed correctly.\n    \n        Args:\n            app_module_mock: The app module that will be returned by get_app().\n            token: A token.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\n            \"reflex.state.State.class_subclasses\", {OnLoadState, OnLoadInternalState}\n        )\n        app = app_module_mock.app = App(\n            state=State,\n            load_events={\"index\": [OnLoadState.test_handler, OnLoadState.test_handler]},\n        )\n        state = State()\n    \n        updates = []\n        async for update in rx.app.process(\n            app=app,\n            event=Event(\n                token=token,\n                name=f\"{state.get_full_name()}.{CompileVars.ON_LOAD_INTERNAL}\",\n                router_data={RouteVar.PATH: \"/\", RouteVar.ORIGIN: \"/\", RouteVar.QUERY: {}},\n            ),\n            sid=\"sid\",\n            headers={},\n            client_ip=\"\",\n        ):\n            assert isinstance(update, StateUpdate)\n            updates.append(update)\n        assert len(updates) == 1\n>       assert updates[0].delta[\"state\"].pop(\"router\") is not None\nE       KeyError: 'state'\n\ntests/test_state.py:2686: KeyError\n________________________ test_state_with_invalid_yield _________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7f1c5426d780>\n\n    @pytest.mark.asyncio\n    async def test_state_with_invalid_yield(capsys):\n        \"\"\"Test that an error is thrown when a state yields an invalid value.\n    \n        Args:\n            capsys: Pytest fixture for capture standard streams.\n        \"\"\"\n    \n        class StateWithInvalidYield(BaseState):\n            \"\"\"A state that yields an invalid value.\"\"\"\n    \n            def invalid_handler(self):\n                \"\"\"Invalid handler.\n    \n                Yields:\n                    an invalid value.\n                \"\"\"\n                yield 1\n    \n        invalid_state = StateWithInvalidYield()\n        async for update in invalid_state._process(\n            rx.event.Event(token=\"fake_token\", name=\"invalid_handler\")\n        ):\n            assert not update.delta\n>           assert update.events == rx.event.fix_events(\n                [rx.window_alert(\"An error occurred. See logs for details.\")],\n                token=\"\",\n            )\nE           AssertionError: assert [] == [Event(token=...r details.'})]\nE             \nE             Right contains one more item: Event(token='', name='_alert', router_data={}, payload={'message': 'An error occurred. See logs for details.'})\nE             Use -v to get more diff\n\ntests/test_state.py:1490: AssertionError\n---------------------------- Captured log teardown -----------------------------\nERROR    asyncio:base_events.py:1729 Task was destroyed but it is pending!\ntask: <Task pending name='Task-33' coro=<<async_generator_athrow without __name__>()>>\n___________________________ test_setvar[in_process] ____________________________\n\nmock_app = <App state=TestState>, token = '33e60471-c0a3-4a21-97d4-2c41278b0a3c'\n\n    @pytest.mark.asyncio\n    async def test_setvar(mock_app: rx.App, token: str):\n        \"\"\"Test that setvar works correctly.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        state = await mock_app.state_manager.get_state(_substate_key(token, TestState))\n    \n        # Set Var in same state (with Var type casting)\n        for event in rx.event.fix_events(\n            [TestState.setvar(\"num1\", 42), TestState.setvar(\"num2\", \"4.2\")], token\n        ):\n            async for update in state._process(event):\n                print(update)\n>       assert state.num1 == 42\nE       AssertionError: assert 0 == 42\nE        +  where 0 = TestState({'test_state': {'array': [1, 2, 3.14], 'complex': {1: {'prop1': 42, 'prop2': 'hello'}, 2: {'prop1': 42, 'pro... ''}, 'test_state.child_state': {'count': 23, 'value': ''}, 'test_state.child_state.grandchild_state': {'value2': ''}}).num1\n\ntests/test_state.py:2951: AssertionError\n----------------------------- Captured stdout call -----------------------------\ndelta={} events=[] final=True\ndelta={} events=[] final=True\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[update then __setitem__]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[delitem then update]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[add, remove, pop]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[dict in list]\nFAILED tests/test_app.py::test_dict_mutation_detection__plain_list[nested dict]\nFAILED tests/test_app.py::test_dynamic_var_event - AssertionError: assert {} ...\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[append then __setitem__]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[delitem then append]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[extend, remove, pop, clear]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[nested list]\nFAILED tests/test_app.py::test_list_mutation_detection__plain_list[list in dict]\nFAILED tests/test_state.py::test_process_event_generator - AssertionError: as...\nFAILED tests/test_state.py::test_process_event_substate - AssertionError: ass...\nFAILED tests/test_state.py::test_process_event_simple - AssertionError: asser...\nFAILED tests/test_state.py::test_preprocess[OnLoadState-expected0] - KeyError...\nFAILED tests/test_state.py::test_preprocess[OnLoadState2-expected1] - KeyErro...\nFAILED tests/test_state.py::test_preprocess[OnLoadState3-expected2] - KeyErro...\nFAILED tests/test_state.py::test_preprocess_multiple_load_events - KeyError: ...\nFAILED tests/test_state.py::test_state_with_invalid_yield - AssertionError: a...\nFAILED tests/test_state.py::test_setvar[in_process] - AssertionError: assert ...\n================== 20 failed, 1 skipped, 5 warnings in 1.06s ===================\n\n"], "reflex-reflex/state.py-_dirty_computed_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py .                                                    [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.25s =========================\n\n"], "reflex-reflex/state.py-_potentially_dirty_substates": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_state.py F                                                    [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_potentially_dirty_substates _______________________\n\n    def test_potentially_dirty_substates():\n        \"\"\"Test that potentially_dirty_substates returns the correct substates.\n    \n        Even if the name \"State\" is shadowed, it should still work correctly.\n        \"\"\"\n    \n        class State(RxState):\n            @ComputedVar\n            def foo(self) -> str:\n                return \"\"\n    \n        class C1(State):\n            @ComputedVar\n            def bar(self) -> str:\n                return \"\"\n    \n>       assert RxState._potentially_dirty_substates() == {State}\nE       AssertionError: assert set() == {<class 'test...cals>.State'>}\nE         \nE         Extra items in the right set:\nE         <class 'tests.test_state.test_potentially_dirty_substates.<locals>.State'>\nE         Use -v to get more diff\n\ntests/test_state.py:2930: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_potentially_dirty_substates - AssertionError...\n======================== 1 failed, 5 warnings in 0.43s =========================\n\n"], "reflex-reflex/state.py-get_delta": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 15 items\n\ntests/test_state.py FFF                                                  [ 20%]\ntests/test_state_tree.py sssssssss                                       [ 80%]\ntests/test_state.py FFs                                                  [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_dirty_computed_var_from_var _______________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 1, 'v1x2': 2, 'v1x2x2': 4, 'v2x2': 2, 'v3x2': 2, 'x': 0}})\n\n    def test_dirty_computed_var_from_var(interdependent_state: InterdependentState) -> None:\n        \"\"\"Set Var that ComputedVar depends on, expect recalculation.\n    \n        The other ComputedVar depends on the changed ComputedVar and should also be\n        recalculated. No other ComputedVars should be recalculated.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.v1 = 1\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v1\": 1, \"v1x2\": 2, \"v1x2x2\": 4},\n        }\nE       AssertionError: assert {'v1': 1, 'v1..., 'v1x2x2': 4} == {'interdepend... 'v1x2x2': 4}}\nE         \nE         Left contains 3 more items:\nE         {'v1': 1, 'v1x2': 2, 'v1x2x2': 4}\nE         Right contains 1 more item:\nE         {'interdependent_state': {'v1': 1, 'v1x2': 2, 'v1x2x2': 4}}\nE         Use -v to get more diff\n\ntests/test_state.py:1001: AssertionError\n___________________ test_dirty_computed_var_from_backend_var ___________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 4, 'v3x2': 4, 'x': 0}})\n\n    def test_dirty_computed_var_from_backend_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set backend var that ComputedVar depends on, expect recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        assert InterdependentState._v3._backend is True\n        interdependent_state._v2 = 2\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"v2x2\": 4, \"v3x2\": 4},\n        }\nE       AssertionError: assert {'_v3': 2, 'v... 4, 'v3x2': 4} == {'interdepend...4, 'v3x2': 4}}\nE         \nE         Left contains 4 more items:\nE         {'_v3': 2, 'v2x2': 4, 'v2x2_backend': 4, 'v3x2': 4}\nE         Right contains 1 more item:\nE         {'interdependent_state': {'v2x2': 4, 'v3x2': 4}}\nE         Use -v to get more diff\n\ntests/test_state.py:1016: AssertionError\n_____________________ test_not_dirty_computed_var_from_var _____________________\n\ninterdependent_state = InterdependentState({'interdependent_state': {'router': {'session': {'client_token': '', 'client_ip': '', 'session_id'... 'full_path': '', 'full_raw_path': '', 'params': {}}}, 'v1': 0, 'v1x2': 0, 'v1x2x2': 0, 'v2x2': 2, 'v3x2': 2, 'x': 5}})\n\n    def test_not_dirty_computed_var_from_var(\n        interdependent_state: InterdependentState,\n    ) -> None:\n        \"\"\"Set Var that no ComputedVar depends on, expect no recalculation.\n    \n        Args:\n            interdependent_state: A state with varying Var dependencies.\n        \"\"\"\n        interdependent_state.x = 5\n>       assert interdependent_state.get_delta() == {\n            interdependent_state.get_full_name(): {\"x\": 5},\n        }\nE       AssertionError: assert {'x': 5} == {'interdepend...te': {'x': 5}}\nE         \nE         Left contains 1 more item:\nE         {'x': 5}\nE         Right contains 1 more item:\nE         {'interdependent_state': {'x': 5}}\nE         Use -v to get more diff\n\ntests/test_state.py:986: AssertionError\n________________ test_computed_var_cached_depends_on_non_cached ________________\n\n    def test_computed_var_cached_depends_on_non_cached():\n        \"\"\"Test that a cached var is recalculated if it depends on non-cached ComputedVar.\"\"\"\n    \n        class ComputedState(BaseState):\n            v: int = 0\n    \n            @rx.var\n            def no_cache_v(self) -> int:\n                return self.v\n    \n            @rx.var(cache=True)\n            def dep_v(self) -> int:\n                return self.no_cache_v  # type: ignore\n    \n            @rx.var(cache=True)\n            def comp_v(self) -> int:\n                return self.v\n    \n        cs = ComputedState()\n        assert cs.dirty_vars == set()\n>       assert cs.get_delta() == {cs.get_name(): {\"no_cache_v\": 0, \"dep_v\": 0}}\nE       AssertionError: assert {} == {'computed_st..._cache_v': 0}}\nE         \nE         Right contains 1 more item:\nE         {'computed_state': {'dep_v': 0, 'no_cache_v': 0}}\nE         Use -v to get more diff\n\ntests/test_state.py:1183: AssertionError\n__________________________ test_get_state[in_process] __________________________\n\nmock_app = <App state=TestState>, token = '7ae12e73-5470-4099-8428-422b7323c2d3'\n\n    @pytest.mark.asyncio\n    async def test_get_state(mock_app: rx.App, token: str):\n        \"\"\"Test that a get_state populates the top level state and delta calculation is correct.\n    \n        Args:\n            mock_app: An app that will be returned by `get_app()`\n            token: A token.\n        \"\"\"\n        mock_app.state_manager.state = mock_app.state = TestState\n    \n        # Get instance of ChildState2.\n        test_state = await mock_app.state_manager.get_state(\n            _substate_key(token, ChildState2)\n        )\n        assert isinstance(test_state, TestState)\n        if isinstance(mock_app.state_manager, StateManagerMemory):\n            # All substates are available\n            assert tuple(sorted(test_state.substates)) == (\n                \"child_state\",\n                \"child_state2\",\n                \"child_state3\",\n            )\n        else:\n            # Sibling states are only populated if they have computed vars\n            assert tuple(sorted(test_state.substates)) == (\"child_state2\", \"child_state3\")\n    \n        # Because ChildState3 has a computed var, it is always dirty, and always populated.\n        assert (\n            test_state.substates[\"child_state3\"].substates[\"grandchild_state3\"].computed\n            == \"\"\n        )\n    \n        # Get the child_state2 directly.\n        child_state2_direct = test_state.get_substate([\"child_state2\"])\n        child_state2_get_state = await test_state.get_state(ChildState2)\n        # These should be the same object.\n        assert child_state2_direct is child_state2_get_state\n    \n        # Get arbitrary GrandchildState.\n        grandchild_state = await child_state2_get_state.get_state(GrandchildState)\n        assert isinstance(grandchild_state, GrandchildState)\n    \n        # Now the original root should have all substates populated.\n        assert tuple(sorted(test_state.substates)) == (\n            \"child_state\",\n            \"child_state2\",\n            \"child_state3\",\n        )\n    \n        # ChildState should be retrievable\n        child_state_direct = test_state.get_substate([\"child_state\"])\n        child_state_get_state = await test_state.get_state(ChildState)\n        # These should be the same object.\n        assert child_state_direct is child_state_get_state\n    \n        # GrandchildState instance should be the same as the one retrieved from the child_state2.\n        assert grandchild_state is child_state_direct.get_substate([\"grandchild_state\"])\n        grandchild_state.value2 = \"set_value\"\n    \n>       assert test_state.get_delta() == {\n            TestState.get_full_name(): {\n                \"sum\": 3.14,\n                \"upper\": \"\",\n            },\n            GrandchildState.get_full_name(): {\n                \"value2\": \"set_value\",\n            },\n            GrandchildState3.get_full_name(): {\n                \"computed\": \"\",\n            },\n        }\nE       AssertionError: assert {} == {'test_state'...omputed': ''}}\nE         \nE         Right contains 3 more items:\nE         {'test_state': {'sum': 3.14, 'upper': ''},\nE          'test_state.child_state.grandchild_state': {'value2': 'set_value'},\nE          'test_state.child_state3.grandchild_state3': {'computed': ''}}\nE         Use -v to get more diff\n\ntests/test_state.py:2759: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_state.py::test_dirty_computed_var_from_var - AssertionError...\nFAILED tests/test_state.py::test_dirty_computed_var_from_backend_var - Assert...\nFAILED tests/test_state.py::test_not_dirty_computed_var_from_var - AssertionE...\nFAILED tests/test_state.py::test_computed_var_cached_depends_on_non_cached - ...\nFAILED tests/test_state.py::test_get_state[in_process] - AssertionError: asse...\n================== 5 failed, 10 skipped, 5 warnings in 0.65s ===================\n\n"], "reflex-reflex/model.py-get_db_engine": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py F                                                    [ 50%]\ntests/test_sqlalchemy.py F                                               [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2589/test_automigration0/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f91e61f8c10>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        # initial table\n        class AlembicThing(Model, table=True):  # type: ignore\n            t1: str\n    \n>       with Model.get_db_engine().connect() as connection:\n\n/root/repos/py_data/reflex/tests/test_model.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @staticmethod\n    def get_db_engine():\n        \"\"\"Get the database engine.\n    \n        Returns:\n            The database engine.\n        \"\"\"\n        config = get_config()\n        if config.db_url is None:\n            raise ValueError(\"db_url is not configured, cannot get database engine.\")\n>       return create_engine(config.db_url)\nE       NameError: name 'create_engine' is not defined\n\n/root/repos/py_data/reflex/reflex/model.py:210: NameError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2589/test_automigration0/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2589/test_automigration0/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2589/test_automigration0/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2589/test_automigration0/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2589/test_automigration0/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2589/test_automigration0/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2589/test_automigration0/working_dir/alembic.ini' before proceeding.\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2589/test_automigration1/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f91e639d2a0>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        assert alembic_ini.exists() is False\n        assert versions.exists() is False\n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        class Base(DeclarativeBase):\n            @declared_attr.directive\n            def __tablename__(cls) -> str:\n                return cls.__name__.lower()\n    \n        assert model_registry.register(Base)\n    \n        class ModelBase(Base, MappedAsDataclass):\n            __abstract__ = True\n            id: Mapped[Optional[int]] = mapped_column(primary_key=True, default=None)\n    \n        # initial table\n        class AlembicThing(ModelBase):  # pyright: ignore[reportGeneralTypeIssues]\n            t1: Mapped[str] = mapped_column(default=\"\")\n    \n>       with Model.get_db_engine().connect() as connection:\n\n/root/repos/py_data/reflex/tests/test_sqlalchemy.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @staticmethod\n    def get_db_engine():\n        \"\"\"Get the database engine.\n    \n        Returns:\n            The database engine.\n        \"\"\"\n        config = get_config()\n        if config.db_url is None:\n            raise ValueError(\"db_url is not configured, cannot get database engine.\")\n>       return create_engine(config.db_url)\nE       NameError: name 'create_engine' is not defined\n\n/root/repos/py_data/reflex/reflex/model.py:210: NameError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2589/test_automigration1/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2589/test_automigration1/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2589/test_automigration1/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2589/test_automigration1/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2589/test_automigration1/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2589/test_automigration1/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2589/test_automigration1/working_dir/alembic.ini' before proceeding.\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_model.py::test_automigration - NameError: name 'create_engi...\nFAILED tests/test_sqlalchemy.py::test_automigration - NameError: name 'create...\n======================== 2 failed, 5 warnings in 0.12s =========================\n\n"], "reflex-reflex/model.py-alembic_autogenerate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py F                                                    [ 50%]\ntests/test_sqlalchemy.py F                                               [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2590/test_automigration0/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fcac108cfd0>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        # initial table\n        class AlembicThing(Model, table=True):  # type: ignore\n            t1: str\n    \n        with Model.get_db_engine().connect() as connection:\n>           assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\nE           TypeError: Model.alembic_autogenerate() got multiple values for argument 'connection'\n\n/root/repos/py_data/reflex/tests/test_model.py:93: TypeError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2590/test_automigration0/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2590/test_automigration0/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2590/test_automigration0/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2590/test_automigration0/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2590/test_automigration0/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2590/test_automigration0/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2590/test_automigration0/working_dir/alembic.ini' before proceeding.\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2590/test_automigration1/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fcac0fc79d0>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        assert alembic_ini.exists() is False\n        assert versions.exists() is False\n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        class Base(DeclarativeBase):\n            @declared_attr.directive\n            def __tablename__(cls) -> str:\n                return cls.__name__.lower()\n    \n        assert model_registry.register(Base)\n    \n        class ModelBase(Base, MappedAsDataclass):\n            __abstract__ = True\n            id: Mapped[Optional[int]] = mapped_column(primary_key=True, default=None)\n    \n        # initial table\n        class AlembicThing(ModelBase):  # pyright: ignore[reportGeneralTypeIssues]\n            t1: Mapped[str] = mapped_column(default=\"\")\n    \n        with Model.get_db_engine().connect() as connection:\n>           assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\nE           TypeError: Model.alembic_autogenerate() got multiple values for argument 'connection'\n\n/root/repos/py_data/reflex/tests/test_sqlalchemy.py:66: TypeError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2590/test_automigration1/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2590/test_automigration1/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2590/test_automigration1/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2590/test_automigration1/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2590/test_automigration1/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2590/test_automigration1/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2590/test_automigration1/working_dir/alembic.ini' before proceeding.\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_model.py::test_automigration - TypeError: Model.alembic_aut...\nFAILED tests/test_sqlalchemy.py::test_automigration - TypeError: Model.alembi...\n======================== 2 failed, 5 warnings in 0.12s =========================\n\n"], "reflex-reflex/model.py-migrate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py F                                                    [ 50%]\ntests/test_sqlalchemy.py F                                               [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f498fe610f0>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        # initial table\n        class AlembicThing(Model, table=True):  # type: ignore\n            t1: str\n    \n        with Model.get_db_engine().connect() as connection:\n            assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\n>       assert Model.migrate()\n\n/root/repos/py_data/reflex/tests/test_model.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/repos/py_data/reflex/reflex/model.py:384: in migrate\n    command.upgrade(alembic_cfg, \"head\")\n/usr/local/lib/python3.10/site-packages/alembic/command.py:406: in upgrade\n    script.run_env()\n/usr/local/lib/python3.10/site-packages/alembic/script/base.py:582: in run_env\n    util.load_python_file(self.dir, \"env.py\")\n/usr/local/lib/python3.10/site-packages/alembic/util/pyfiles.py:95: in load_python_file\n    module = load_module_py(module_id, path)\n/usr/local/lib/python3.10/site-packages/alembic/util/pyfiles.py:113: in load_module_py\n    spec.loader.exec_module(module)  # type: ignore\n<frozen importlib._bootstrap_external>:883: in exec_module\n    ???\n<frozen importlib._bootstrap>:241: in _call_with_frames_removed\n    ???\n/tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic/env.py:78: in <module>\n    run_migrations_online()\n/tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic/env.py:60: in run_migrations_online\n    connectable = engine_from_config(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/create.py:820: in engine_from_config\n    return create_engine(url, **options)\n<string>:2: in create_engine\n    ???\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/create.py:550: in create_engine\n    entrypoint = u._get_entrypoint()\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/url.py:758: in _get_entrypoint\n    cls = registry.load(name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.util.langhelpers.PluginLoader object at 0x7f49dd2f5150>\nname = 'driver'\n\n    def load(self, name: str) -> Any:\n        if name in self.impls:\n            return self.impls[name]()\n    \n        if self.auto_fn:\n            loader = self.auto_fn(name)\n            if loader:\n                self.impls[name] = loader\n                return loader()\n    \n        for impl in compat.importlib_metadata_get(self.group):\n            if impl.name == name:\n                self.impls[name] = impl.load\n                return impl.load()\n    \n>       raise exc.NoSuchModuleError(\n            \"Can't load plugin: %s:%s\" % (self.group, name)\n        )\nE       sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:driver\n\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:375: NoSuchModuleError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic.ini' before proceeding.\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration0/working_dir/alembic/versions/fe8f5feb3bfc_initial_revision.py ...  done\n______________________________ test_automigration ______________________________\n\ntmp_working_dir = PosixPath('/tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir')\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f498f901a50>\nmodel_registry = <class 'reflex.model.ModelRegistry'>\n\n    @pytest.mark.filterwarnings(\n        \"ignore:This declarative base already contains a class with the same class name\",\n    )\n    def test_automigration(\n        tmp_working_dir: Path,\n        monkeypatch: pytest.MonkeyPatch,\n        model_registry: Type[ModelRegistry],\n    ):\n        \"\"\"Test alembic automigration with add and drop table and column.\n    \n        Args:\n            tmp_working_dir: directory where database and migrations are stored\n            monkeypatch: pytest fixture to overwrite attributes\n            model_registry: clean reflex ModelRegistry\n        \"\"\"\n        alembic_ini = tmp_working_dir / \"alembic.ini\"\n        versions = tmp_working_dir / \"alembic\" / \"versions\"\n        monkeypatch.setattr(reflex.constants, \"ALEMBIC_CONFIG\", str(alembic_ini))\n    \n        config_mock = mock.Mock()\n        config_mock.db_url = f\"sqlite:///{tmp_working_dir}/reflex.db\"\n        monkeypatch.setattr(reflex.model, \"get_config\", mock.Mock(return_value=config_mock))\n    \n        assert alembic_ini.exists() is False\n        assert versions.exists() is False\n        Model.alembic_init()\n        assert alembic_ini.exists()\n        assert versions.exists()\n    \n        class Base(DeclarativeBase):\n            @declared_attr.directive\n            def __tablename__(cls) -> str:\n                return cls.__name__.lower()\n    \n        assert model_registry.register(Base)\n    \n        class ModelBase(Base, MappedAsDataclass):\n            __abstract__ = True\n            id: Mapped[Optional[int]] = mapped_column(primary_key=True, default=None)\n    \n        # initial table\n        class AlembicThing(ModelBase):  # pyright: ignore[reportGeneralTypeIssues]\n            t1: Mapped[str] = mapped_column(default=\"\")\n    \n        with Model.get_db_engine().connect() as connection:\n            assert Model.alembic_autogenerate(\n                connection=connection, message=\"Initial Revision\"\n            )\n>       assert Model.migrate()\n\n/root/repos/py_data/reflex/tests/test_sqlalchemy.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/repos/py_data/reflex/reflex/model.py:384: in migrate\n    command.upgrade(alembic_cfg, \"head\")\n/usr/local/lib/python3.10/site-packages/alembic/command.py:406: in upgrade\n    script.run_env()\n/usr/local/lib/python3.10/site-packages/alembic/script/base.py:582: in run_env\n    util.load_python_file(self.dir, \"env.py\")\n/usr/local/lib/python3.10/site-packages/alembic/util/pyfiles.py:95: in load_python_file\n    module = load_module_py(module_id, path)\n/usr/local/lib/python3.10/site-packages/alembic/util/pyfiles.py:113: in load_module_py\n    spec.loader.exec_module(module)  # type: ignore\n<frozen importlib._bootstrap_external>:883: in exec_module\n    ???\n<frozen importlib._bootstrap>:241: in _call_with_frames_removed\n    ???\n/tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic/env.py:78: in <module>\n    run_migrations_online()\n/tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic/env.py:60: in run_migrations_online\n    connectable = engine_from_config(\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/create.py:820: in engine_from_config\n    return create_engine(url, **options)\n<string>:2: in create_engine\n    ???\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/create.py:550: in create_engine\n    entrypoint = u._get_entrypoint()\n/usr/local/lib/python3.10/site-packages/sqlalchemy/engine/url.py:758: in _get_entrypoint\n    cls = registry.load(name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.util.langhelpers.PluginLoader object at 0x7f49dd2f5150>\nname = 'driver'\n\n    def load(self, name: str) -> Any:\n        if name in self.impls:\n            return self.impls[name]()\n    \n        if self.auto_fn:\n            loader = self.auto_fn(name)\n            if loader:\n                self.impls[name] = loader\n                return loader()\n    \n        for impl in compat.importlib_metadata_get(self.group):\n            if impl.name == name:\n                self.impls[name] = impl.load\n                return impl.load()\n    \n>       raise exc.NoSuchModuleError(\n            \"Can't load plugin: %s:%s\" % (self.group, name)\n        )\nE       sqlalchemy.exc.NoSuchModuleError: Can't load plugin: sqlalchemy.dialects:driver\n\n/usr/local/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:375: NoSuchModuleError\n----------------------------- Captured stdout call -----------------------------\nCreating directory '/tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic' ...  done\nCreating directory '/tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic/versions' ...  done\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic.ini ...  done\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic/script.py.mako ...  done\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic/env.py ...  done\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic/README ...  done\nPlease edit configuration/connection/logging settings in '/tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic.ini' before proceeding.\nGenerating /tmp/pytest-of-root/pytest-2591/test_automigration1/working_dir/alembic/versions/22f94467c609_initial_revision.py ...  done\n----------------------------- Captured stderr call -----------------------------\nINFO  [alembic.runtime.migration] Context impl SQLiteImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added table 'alembicthing'\n------------------------------ Captured log call -------------------------------\nINFO     alembic.runtime.migration:migration.py:215 Context impl SQLiteImpl.\nINFO     alembic.runtime.migration:migration.py:218 Will assume non-transactional DDL.\nINFO     alembic.autogenerate.compare:compare.py:189 Detected added table 'alembicthing'\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\ntests/test_sqlalchemy.py::test_automigration\n  /root/repos/py_data/reflex/reflex/model.py:128: SAWarning:\n  \n  Table 'alembicthing' already exists within the given MetaData - not copying.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_model.py::test_automigration - sqlalchemy.exc.NoSuchModuleE...\nFAILED tests/test_sqlalchemy.py::test_automigration - sqlalchemy.exc.NoSuchMo...\n======================== 2 failed, 6 warnings in 0.32s =========================\n\n"], "reflex-reflex/model.py-select": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/test_model.py .                                                    [ 50%]\ntests/test_sqlalchemy.py .                                               [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 2 passed, 5 warnings in 0.27s =========================\n\n"], "reflex-reflex/compiler/compiler.py-compile_components": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py F                                     [100%]\n\n=================================== FAILURES ===================================\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\nE       ValueError: not enough values to unpack (expected 3, got 2)\n\ntests/components/test_component.py:1686: ValueError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 1 failed, 5 warnings in 0.81s =========================\n\n"], "reflex-reflex/utils/prerequisites.py-get_or_set_last_reflex_version_check_datetime": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.76s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/reflex/utils/prerequisites.py::check_latest_package_version\n(no match in any of [<Module prerequisites.py>])\n\n"], "reflex-reflex/middleware/hydrate_middleware.py-preprocess": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/middleware/test_hydrate_middleware.py F                            [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_preprocess_no_events ___________________________\n\nhydrate_middleware = HydrateMiddleware()\nevent1 = Event(token='<token>', name='state.hydrate', router_data={'pathname': '/', 'query': {}, 'token': '<token>', 'sid': '<sid>', 'headers': {}, 'ip': '127.0.0.1'}, payload={})\nmocker = <pytest_mock.plugin.MockerFixture object at 0x7f470b34a020>\n\n    @pytest.mark.asyncio\n    async def test_preprocess_no_events(hydrate_middleware, event1, mocker):\n        \"\"\"Test that app without on_load is processed correctly.\n    \n        Args:\n            hydrate_middleware: Instance of HydrateMiddleware\n            event1: An Event.\n            mocker: pytest mock object.\n        \"\"\"\n        mocker.patch(\"reflex.state.State.class_subclasses\", {TestState})\n        state = State()\n>       update = await hydrate_middleware.preprocess(\n            app=App(state=State),\n            event=event1,\n            state=state,\n        )\n\ntests/middleware/test_hydrate_middleware.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = HydrateMiddleware(), app = <App state=State>\nstate = State({'state': {'is_hydrated': False, 'router': {'session': {'client_token': '', 'client_ip': '', 'session_id': ''}, ...'', 'path': '', 'raw_path': '', 'full_path': '', 'full_raw_path': '', 'params': {}}}}, 'state.test_state': {'num': 0}})\nevent = Event(token='<token>', name='state.hydrate', router_data={'pathname': '/', 'query': {}, 'token': '<token>', 'sid': '<sid>', 'headers': {}, 'ip': '127.0.0.1'}, payload={})\n\n    async def preprocess(\n        self, app: App, state: BaseState, event: Event\n    ) -> Optional[StateUpdate]:\n        \"\"\"Preprocess the event.\n    \n        Args:\n            app: The app to apply the middleware to.\n            state: The client state.\n            event: The event to preprocess.\n    \n        Returns:\n            An optional delta or list of state updates to return.\n        \"\"\"\n        # Check if the event is a hydration event\n>       if event == get_hydrate_event():\nE       TypeError: get_hydrate_event() missing 1 required positional argument: 'state'\n\nreflex/middleware/hydrate_middleware.py:34: TypeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/middleware/test_hydrate_middleware.py::test_preprocess_no_events\n======================== 1 failed, 5 warnings in 0.11s =========================\n\n"], "reflex-reflex/components/component.py-get_event_triggers": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item / 1 error\n\n==================================== ERRORS ====================================\n_____________ ERROR collecting tests/components/test_component.py ______________\ntests/components/test_component.py:1225: in <module>\n    rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\nreflex/components/component.py:785: in create\n    return cls(children=children, **props)\nreflex/components/component.py:382: in __init__\n    raise ValueError(\nE   ValueError: The Fragment does not take in an `on_click` event trigger. If Fragment is a third party component make sure to add `on_click` to the component's event triggers. visit https://reflex.dev/docs/wrapping-react/guide/#event-triggers for more info.\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (hello) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (1) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (test) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (foo<reflex.Var>{\"state\": \"Test\", \n\"interpolations\": [], \"imports\": {\"test\": [{\"tag\": \"test\", \"is_default\": false, \n\"alias\": null, \"install\": true, \"render\": true, \"transpile\": false}]}, \"hooks\": \n{\"useTest\": null}, \"string_length\": 4}</reflex.Var>testbar) from a string \nwithout specifying _var_is_string has been deprecated in version 0.5.4 Specify \n_var_is_string=False to create a Var that is not a string literal. In the \nfuture, creating a Var from a string will be treated as a string literal by \ndefault. It will be completely removed in 0.6.0\nDeprecationWarning: Creating a Var (arg) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/test_component.py - ValueError: The Fragment does not ...\n========================= 5 warnings, 1 error in 0.76s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_declare_event_handlers_in_fields\n\n"], "reflex-reflex/components/component.py-get_props": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_____________ ERROR collecting tests/components/test_component.py ______________\ntests/components/test_component.py:1184: in <module>\n    rx.fragment(special_props={TEST_VAR}),\nreflex/components/component.py:812: in create\n    return cls(children=children, **props)\nreflex/components/component.py:447: in __init__\n    raise TypeError(\nE   TypeError: Invalid var passed for prop Fragment.special_props, expected type <class 'reflex.vars.Var'>, got value {BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_state_prefix=False, _var_data=VarData(state='Test', imports={'test': [ImportVar(tag='test', is_default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))} of type <class 'set'>.\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (hello) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (1) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (test) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (foo<reflex.Var>{\"state\": \"Test\", \n\"interpolations\": [], \"imports\": {\"test\": [{\"tag\": \"test\", \"is_default\": false, \n\"alias\": null, \"install\": true, \"render\": true, \"transpile\": false}]}, \"hooks\": \n{\"useTest\": null}, \"string_length\": 4}</reflex.Var>testbar) from a string \nwithout specifying _var_is_string has been deprecated in version 0.5.4 Specify \n_var_is_string=False to create a Var that is not a string literal. In the \nfuture, creating a Var from a string will be treated as a string literal by \ndefault. It will be completely removed in 0.6.0\nDeprecationWarning: Creating a Var (arg) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/test_component.py - TypeError: Invalid var passed for ...\n========================= 5 warnings, 1 error in 0.78s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_custom_component\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_filters_none_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_props\n\n"], "reflex-reflex/components/component.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 16 items / 1 error\n\n==================================== ERRORS ====================================\n_____________ ERROR collecting tests/components/test_component.py ______________\ntests/components/test_component.py:627: in <module>\n    (rx.text(\"first_text\"),),\nreflex/components/radix/themes/base.py:110: in create\n    component = super().create(*children, **props)\nreflex/components/component.py:760: in create\n    component = cls(*children, **props)\nreflex/components/component.py:485: in __init__\n    super().__init__(*args, **kwargs)\nE   TypeError: BaseModel.__init__() takes 1 positional argument but 2 were given\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (hello) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (1) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/test_component.py - TypeError: BaseModel.__init__() ta...\n========================= 5 warnings, 1 error in 0.66s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_unsupported_parent_components\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_instantiate_all_components\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_component\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_component_prop_validation\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_imports\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_validate_valid_parents\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_validate_invalid_children\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_add_style_foreach\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_with_only_valid_children\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_hooks_nested2\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_create_unallowed_types\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_event_trigger_arbitrary_args\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_invalid_event_handler_args\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::wrapper\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::outer\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_create_unpack_tuple_child\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_custom_code\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_create_filters_none_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_validate_valid_children\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_hooks_nested\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_invalid_prop_type\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_var_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_declare_event_handlers_in_fields\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_rename_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_valid_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_unsupported_child_components\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_wrapper\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_get_imports\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_hooks\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_custom_component_get_imports\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_hooks_var\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_deprecated_props\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_add_style_embedded_vars\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/test_component.py::test_component_add_custom_code\n\n"], "reflex-reflex/components/component.py-_add_style_recursive": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/components/core/test_foreach.py .                                  [ 33%]\ntests/components/test_component.py ..                                    [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 3 passed, 5 warnings in 0.78s =========================\n\n"], "reflex-reflex/components/component.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 21 items\n\ntests/components/test_component.py FFFF..                                [ 28%]\ntests/components/core/test_foreach.py ...........                        [ 80%]\ntests/components/test_component.py ..FF                                  [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_rename_props _______________________________\n\n    def test_rename_props():\n        \"\"\"Test that _rename_props works and is inherited.\"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            prop1: Var[str]\n            prop2: Var[str]\n    \n            _rename_props = {\"prop1\": \"renamed_prop1\", \"prop2\": \"renamed_prop2\"}\n    \n        class C2(C1):\n            tag = \"C2\"\n    \n            prop3: Var[str]\n    \n            _rename_props = {\"prop2\": \"subclass_prop2\", \"prop3\": \"renamed_prop3\"}\n    \n        c1 = C1.create(prop1=\"prop1_1\", prop2=\"prop2_1\")\n        rendered_c1 = c1.render()\n>       assert \"renamed_prop1={`prop1_1`}\" in rendered_c1[\"props\"]\nE       AssertionError: assert 'renamed_prop1={`prop1_1`}' in {'class_name': None, 'id': None, 'style': {}}\n\ntests/components/test_component.py:1597: AssertionError\n_________ test_component_create_unpack_tuple_child[element0-expected0] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"tag\": \"Text\", \"props\": {\"id\": null, \"class_name\": null, \"style\": {}}, \"children\": [{\"tag\": null, \"props\": {\"id\": null, \"class_name\": null, \"style\": {}}, \"children\": []}]},)\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [], 'contents': '{`first_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'children': ...': 'Fragment'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'props': {'class_name': None, 'id': None, 'style': {}}} != {'props': []}\nE         {'children': [{'children': [{'children': [], 'props': {'class_name': None, 'id': None, 'style': {}}, 'tag': None}], 'props': {'class_name': None, 'id': None, 'style': {}}, 'tag': 'Text'}]} != {'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [], 'contents': '{`first_text`}', ...}], 'contents': '', ...}]}\nE         Left contains 1 more item:\nE         {'tag': 'Fragment'}\nE         Right contains 5 more items:...\nE         \nE         ...Full output truncated (6 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element1-expected1] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"tag\": \"Text\", \"props\": {\"id\": null, \"class_name\": null, \"style\": {}}, \"children\": [{\"tag\": null, \"props\": {\"id\": nu...ll, \"style\": {}}, \"children\": [{\"tag\": null, \"props\": {\"id\": null, \"class_name\": null, \"style\": {}}, \"children\": []}]})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo..., 'autofocus': False, 'children': [], 'contents': '{`second_text`}', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'children': ...': 'Fragment'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'props': {'class_name': None, 'id': None, 'style': {}}} != {'props': []}\nE         {'children': [{'children': [{'children': [], 'props': {'class_name': None, 'id': None, 'style': {}}, 'tag': None}], 'p...None, 'id': None, 'style': {}}, 'tag': None}], 'props': {'class_name': None, 'id': None, 'style': {}}, 'tag': 'Text'}]} != {'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [], 'cont...dren': [{'args': None, 'autofocus': False, 'children': [], 'contents': '{`second_text`}', ...}], 'contents': '', ...}]}\nE         Left contains 1 more item:\nE         {'tag': 'Fragment'}\nE         Right contains 5 more items:...\nE         \nE         ...Full output truncated (6 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________ test_component_create_unpack_tuple_child[element2-expected2] _________\n\ntest_component = <class 'tests.components.test_component.test_component.<locals>.TestComponent'>\nelement = ({\"tag\": \"Text\", \"props\": {\"id\": null, \"class_name\": null, \"style\": {}}, \"children\": [{\"tag\": null, \"props\": {\"id\": nu...\"style\": {}}, \"children\": [{\"tag\": null, \"props\": {\"id\": null, \"class_name\": null, \"style\": {}}, \"children\": []}]}]}]})\nexpected = {'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofo...rgs': None, 'autofocus': False, 'children': [{...}], 'contents': '', ...}], 'contents': '', ...}], 'contents': '', ...}\n\n    @pytest.mark.parametrize(\n        \"element, expected\",\n        [\n            (\n                (rx.text(\"first_text\"),),\n                {\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"contents\": \"\",\n                    \"args\": None,\n                    \"special_props\": set(),\n                    \"children\": [\n                        {\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"contents\": \"\",\n                            \"args\": None,\n                            \"special_props\": set(),\n                            \"children\": [\n                                {\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"args\": None,\n                                    \"special_props\": set(),\n                                    \"children\": [],\n                                    \"autofocus\": False,\n                                }\n                            ],\n                            \"autofocus\": False,\n                        }\n                    ],\n                    \"autofocus\": False,\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.text(\"second_text\")),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`second_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n            (\n                (rx.text(\"first_text\"), rx.box((rx.text(\"second_text\"),))),\n                {\n                    \"args\": None,\n                    \"autofocus\": False,\n                    \"children\": [\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [],\n                                    \"contents\": \"{`first_text`}\",\n                                    \"name\": \"\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesText\",\n                            \"props\": [\"as={`p`}\"],\n                            \"special_props\": set(),\n                        },\n                        {\n                            \"args\": None,\n                            \"autofocus\": False,\n                            \"children\": [\n                                {\n                                    \"args\": None,\n                                    \"autofocus\": False,\n                                    \"children\": [\n                                        {\n                                            \"args\": None,\n                                            \"autofocus\": False,\n                                            \"children\": [\n                                                {\n                                                    \"args\": None,\n                                                    \"autofocus\": False,\n                                                    \"children\": [],\n                                                    \"contents\": \"{`second_text`}\",\n                                                    \"name\": \"\",\n                                                    \"props\": [],\n                                                    \"special_props\": set(),\n                                                }\n                                            ],\n                                            \"contents\": \"\",\n                                            \"name\": \"RadixThemesText\",\n                                            \"props\": [\"as={`p`}\"],\n                                            \"special_props\": set(),\n                                        }\n                                    ],\n                                    \"contents\": \"\",\n                                    \"name\": \"Fragment\",\n                                    \"props\": [],\n                                    \"special_props\": set(),\n                                }\n                            ],\n                            \"contents\": \"\",\n                            \"name\": \"RadixThemesBox\",\n                            \"props\": [],\n                            \"special_props\": set(),\n                        },\n                    ],\n                    \"contents\": \"\",\n                    \"name\": \"Fragment\",\n                    \"props\": [],\n                    \"special_props\": set(),\n                },\n            ),\n        ],\n    )\n    def test_component_create_unpack_tuple_child(test_component, element, expected):\n        \"\"\"Test that component in tuples are unwrapped into an rx.Fragment.\n    \n        Args:\n            test_component: Component fixture.\n            element: The children to pass to the component.\n            expected: The expected render dict.\n        \"\"\"\n        comp = test_component.create(element)\n    \n        assert len(comp.children) == 1\n        assert isinstance((fragment_wrapper := comp.children[0]), Fragment)\n>       assert fragment_wrapper.render() == expected\nE       AssertionError: assert {'children': ...': 'Fragment'} == {'args': None...nts': '', ...}\nE         \nE         Differing items:\nE         {'props': {'class_name': None, 'id': None, 'style': {}}} != {'props': []}\nE         {'children': [{'children': [{'children': [], 'props': {'class_name': None, 'id': None, 'style': {}}, 'tag': None}], 'p... 'id': None, 'style': {}}, 'tag': 'Fragment'}], 'props': {'class_name': None, 'id': None, 'style': {}}, 'tag': 'Box'}]} != {'children': [{'args': None, 'autofocus': False, 'children': [{'args': None, 'autofocus': False, 'children': [], 'cont...lse, 'children': [{'args': None, 'autofocus': False, 'children': [{...}], 'contents': '', ...}], 'contents': '', ...}]}\nE         Left contains 1 more item:\nE         {'tag': 'Fragment'}\nE         Right contains 5 more items:...\nE         \nE         ...Full output truncated (6 lines hidden), use '-vv' to show\n\ntests/components/test_component.py:794: AssertionError\n_________________ test_component_event_trigger_arbitrary_args __________________\n\n    def test_component_event_trigger_arbitrary_args():\n        \"\"\"Test that we can define arbitrary types for the args of an event trigger.\"\"\"\n    \n        class Obj(Base):\n            custom: int = 0\n    \n        def on_foo_spec(_e, alpha: str, bravo: Dict[str, Any], charlie: Obj):\n            return [_e.target.value, bravo[\"nested\"], charlie.custom + 42]\n    \n        class C1(Component):\n            library = \"/local\"\n            tag = \"C1\"\n    \n            def get_event_triggers(self) -> Dict[str, Any]:\n                return {\n                    **super().get_event_triggers(),\n                    \"on_foo\": on_foo_spec,\n                }\n    \n        comp = C1.create(on_foo=C1State.mock_handler)\n    \n>       assert comp.render()[\"props\"][0] == (\n            \"onFoo={(__e,_alpha,_bravo,_charlie) => addEvents(\"\n            '[Event(\"c1_state.mock_handler\", {_e:__e.target.value,_bravo:_bravo[\"nested\"],_charlie:((_charlie.custom) + (42))})], '\n            \"(__e,_alpha,_bravo,_charlie), {})}\"\n        )\nE       KeyError: 0\n\ntests/components/test_component.py:826: KeyError\n____________________________ test_deprecated_props _____________________________\n\ncapsys = <_pytest.capture.CaptureFixture object at 0x7fb15a2c5b40>\n\n    def test_deprecated_props(capsys):\n        \"\"\"Assert that deprecated underscore suffix props are translated.\n    \n        Args:\n            capsys: Pytest fixture for capturing stdout and stderr.\n        \"\"\"\n    \n        class C1(Component):\n            tag = \"C1\"\n    \n            type: Var[str]\n            min: Var[str]\n            max: Var[str]\n    \n        # No warnings are emitted when using the new prop names.\n        c1_1 = C1.create(type=\"type1\", min=\"min1\", max=\"max1\")\n        out_err = capsys.readouterr()\n        assert not out_err.err\n        assert not out_err.out\n    \n        c1_1_render = c1_1.render()\n>       assert \"type={`type1`}\" in c1_1_render[\"props\"]\nE       AssertionError: assert 'type={`type1`}' in {'class_name': None, 'id': None, 'style': {}}\n\ntests/components/test_component.py:1628: AssertionError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_rename_props - AssertionError...\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element0-expected0]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element1-expected1]\nFAILED tests/components/test_component.py::test_component_create_unpack_tuple_child[element2-expected2]\nFAILED tests/components/test_component.py::test_component_event_trigger_arbitrary_args\nFAILED tests/components/test_component.py::test_deprecated_props - AssertionE...\n=================== 6 failed, 15 passed, 5 warnings in 0.92s ===================\n\n"], "reflex-reflex/components/component.py-_get_vars": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 31 items\n\ntests/components/test_component.py ..FFFFFFFFFFFFFFFFFFFFFFFFFFFFF       [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_vars[direct-prop] __________________________\n\ncomponent = {\"name\": \"RadixThemesText\", \"props\": [\"as={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesText\", \"props\": [\"as={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Text' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_________________________ test_get_vars[fstring-prop] __________________________\n\ncomponent = {\"name\": \"RadixThemesHeading\", \"props\": [\"as={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"RadixThemesHeading\", \"props\": [\"as={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Heading' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n___________________________ test_get_vars[direct-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"id={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n__________________________ test_get_vars[fstring-id] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"id={`footestbar`}\", \"ref={ref_foo_reflex_Var_state_Test_interpolations_imports_test_ta...ength_4_reflex_Var_testbar}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"id={`footestbar`}\", \"ref={ref_foo_reflex_Var_state_Test_interpolations_imports_test_ta...ength_4_reflex_Var_testbar}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n__________________________ test_get_vars[direct-key] ___________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"key={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n__________________________ test_get_vars[fstring-key] __________________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"key={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"key={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_______________________ test_get_vars[direct-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"className={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n______________________ test_get_vars[fstring-class_name] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"className={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"className={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_____________________ test_get_vars[direct-special_props] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"test\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"state\\\\\\\":...hooks\\\\\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 4}</reflex.Var>test\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"test\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"state\\\\\\\":...hooks\\\\\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 4}</reflex.Var>test\\\"]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_____________________ test_get_vars[fstring-special_props] _____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"footestbar\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"stat...\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 10}</reflex.Var>footestbar\\\"]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"footestbar\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[\\\"<reflex.Var>{\\\\\\\"stat...\\\": {\\\\\\\"useTest\\\\\\\": null}, \\\\\\\"string_length\\\\\\\": 10}</reflex.Var>footestbar\\\"]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n__________________ test_get_vars[fstring-custom_attrs-nofmt] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_sta...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"href={`test`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_____________________ test_get_vars[fstring-custom_attrs] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"href={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='footestbar', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_nee...t=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[(3, 7)]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"href={`footestbar`}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n____________________ test_get_vars[direct-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n___________________ test_get_vars[fstring-background_color] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_________________ test_get_vars[direct-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": \\\"test\\\"}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n________________ test_get_vars[fstring-style-background_color] _________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='style', _var_type=<class 'str'>, _var_is_local=False, _var_is_string=False, _var_full_name_needs_s...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"css={{\\\"backgroundColor\\\": `footestbar`}}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n______________________ test_get_vars[direct-event-chain] _______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={test}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='test', _var_type=<class 'reflex.event.EventChain'>, _var_is_local=True, _var_is_string=False, _var...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={test}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_____________________ test_get_vars[direct-event-handler] ______________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler\\\", {})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = []\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler\\\", {})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n___________________ test_get_vars[direct-event-handler-arg] ____________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n___________________ test_get_vars[direct-event-handler-arg2] ___________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:state__event_state.v})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...False)]}, hooks={'const state__event_state = useContext(StateContexts.state__event_state)': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:state__event_state.v})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n__________________ test_get_vars[direct-event-handler-lambda] __________________\n\ncomponent = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nexp_vars = [BaseVar(_var_name='arg', _var_type=<class 'str'>, _var_is_local=True, _var_is_string=False, _var_full_name_needs_stat...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Fragment\", \"props\": [\"onClick={(_e) => addEvents([Event(\\\"state.event_state.handler2\\\", {arg:test})], (_e), {})}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'Fragment' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n______________________ test_get_vars[direct-dict_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109960>\nexp_vars = [BaseVar(_var_name='{\"a\": {\"b\": \"test\"}}', _var_type=<class 'dict'>, _var_is_local=True, _var_is_string=False, _var_fu...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109960>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_____________________ test_get_vars[fstring-dict_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109ff0>\nexp_vars = [BaseVar(_var_name='{\"a\": {\"b\": \"footestbar\"}}', _var_type=<class 'dict'>, _var_is_local=True, _var_is_string=False, _...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109ff0>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n______________________ test_get_vars[direct-list_of_list] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109f00>\nexp_vars = [BaseVar(_var_name='[[\"test\"]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_name_ne...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109f00>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_____________________ test_get_vars[fstring-list_of_list] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109870>\nexp_vars = [BaseVar(_var_name='[[\"footestbar\"]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_n...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109870>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n__________________ test_get_vars[direct-list_of_list_of_list] __________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109090>\nexp_vars = [BaseVar(_var_name='[[[\"test\"]]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_name_...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109090>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_________________ test_get_vars[fstring-list_of_list_of_list] __________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed10a320>\nexp_vars = [BaseVar(_var_name='[[[\"footestbar\"]]]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed10a320>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n______________________ test_get_vars[direct-list_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109d50>\nexp_vars = [BaseVar(_var_name='[{\"a\": \"test\"}]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_full_na...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed109d50>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n_____________________ test_get_vars[fstring-list_of_dict] ______________________\n\ncomponent = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed10a590>\nexp_vars = [BaseVar(_var_name='[{\"a\": \"footestbar\"}]', _var_type=<class 'list'>, _var_is_local=True, _var_is_string=False, _var_f...default=False, alias=None, install=True, render=True, transpile=False)]}, hooks={'useTest': None}, interpolations=[]))]\n\n    @pytest.mark.parametrize(\n        (\"component\", \"exp_vars\"),\n        (\n            pytest.param(\n                Bare.create(TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-bare\",\n            ),\n            pytest.param(\n                Bare.create(f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-bare\",\n            ),\n            pytest.param(\n                rx.text(as_=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-prop\",\n            ),\n            pytest.param(\n                rx.heading(as_=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-prop\",\n            ),\n            pytest.param(\n                rx.fragment(id=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-id\",\n            ),\n            pytest.param(\n                rx.fragment(id=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-id\",\n            ),\n            pytest.param(\n                rx.fragment(key=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-key\",\n            ),\n            pytest.param(\n                rx.fragment(key=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-key\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=TEST_VAR),\n                [TEST_VAR],\n                id=\"direct-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(class_name=f\"foo{TEST_VAR}bar\"),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-class_name\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={TEST_VAR}),\n                [TEST_VAR],\n                id=\"direct-special_props\",\n            ),\n            pytest.param(\n                rx.fragment(special_props={Var.create(f\"foo{TEST_VAR}bar\")}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-special_props\",\n            ),\n            pytest.param(\n                # custom_attrs cannot accept a Var directly as a value\n                rx.fragment(custom_attrs={\"href\": f\"{TEST_VAR}\"}),\n                [TEST_VAR],\n                id=\"fstring-custom_attrs-nofmt\",\n            ),\n            pytest.param(\n                rx.fragment(custom_attrs={\"href\": f\"foo{TEST_VAR}bar\"}),\n                [FORMATTED_TEST_VAR],\n                id=\"fstring-custom_attrs\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=TEST_VAR),\n                [STYLE_VAR],\n                id=\"direct-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(background_color=f\"foo{TEST_VAR}bar\"),\n                [STYLE_VAR],\n                id=\"fstring-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": TEST_VAR}),  # type: ignore\n                [STYLE_VAR],\n                id=\"direct-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(style={\"background_color\": f\"foo{TEST_VAR}bar\"}),  # type: ignore\n                [STYLE_VAR],\n                id=\"fstring-style-background_color\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EVENT_CHAIN_VAR),  # type: ignore\n                [EVENT_CHAIN_VAR],\n                id=\"direct-event-chain\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler),\n                [],\n                id=\"direct-event-handler\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-arg\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=EventState.handler2(EventState.v)),  # type: ignore\n                [ARG_VAR, EventState.v],\n                id=\"direct-event-handler-arg2\",\n            ),\n            pytest.param(\n                rx.fragment(on_click=lambda: EventState.handler2(TEST_VAR)),  # type: ignore\n                [ARG_VAR, TEST_VAR],\n                id=\"direct-event-handler-lambda\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": TEST_VAR}}),\n                [TEST_VAR_DICT_OF_DICT],\n                id=\"direct-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(dict_of_dict={\"a\": {\"b\": f\"foo{TEST_VAR}bar\"}}),\n                [FORMATTED_TEST_VAR_DICT_OF_DICT],\n                id=\"fstring-dict_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[TEST_VAR]]),\n                [TEST_VAR_LIST_OF_LIST],\n                id=\"direct-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list=[[f\"foo{TEST_VAR}bar\"]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST],\n                id=\"fstring-list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[TEST_VAR]]]),\n                [TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"direct-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_list_of_list=[[[f\"foo{TEST_VAR}bar\"]]]),\n                [FORMATTED_TEST_VAR_LIST_OF_LIST_OF_LIST],\n                id=\"fstring-list_of_list_of_list\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": TEST_VAR}]),\n                [TEST_VAR_LIST_OF_DICT],\n                id=\"direct-list_of_dict\",\n            ),\n            pytest.param(\n                ComponentNestedVar.create(list_of_dict=[{\"a\": f\"foo{TEST_VAR}bar\"}]),\n                [FORMATTED_TEST_VAR_LIST_OF_DICT],\n                id=\"fstring-list_of_dict\",\n            ),\n        ),\n    )\n    def test_get_vars(component, exp_vars):\n>       comp_vars = sorted(component._get_vars(), key=lambda v: v._var_name)\n\ntests/components/test_component.py:1292: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[ValidationError(model='Tag', errors=[{'loc': ('name',), 'msg': 'none is not an allowed value', 'type': 'type_error.none.not_allowed'}]) raised in repr()] ComponentNestedVar object at 0x7f6eed10a590>\ninclude_children = False\n\n    def _get_vars(self, include_children: bool = False) -> list[Var]:\n        \"\"\"Walk all Vars used in this component.\n    \n        Args:\n            include_children: Whether to include Vars from children.\n    \n        Returns:\n            Each var referenced by the component (props, styles, event handlers).\n        \"\"\"\n        vars_list = []\n    \n        # Include Vars from props\n>       for prop in self.props.values():\nE       AttributeError: 'ComponentNestedVar' object has no attribute 'props'\n\nreflex/components/component.py:1073: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_get_vars[direct-prop] - Attri...\nFAILED tests/components/test_component.py::test_get_vars[fstring-prop] - Attr...\nFAILED tests/components/test_component.py::test_get_vars[direct-id] - Attribu...\nFAILED tests/components/test_component.py::test_get_vars[fstring-id] - Attrib...\nFAILED tests/components/test_component.py::test_get_vars[direct-key] - Attrib...\nFAILED tests/components/test_component.py::test_get_vars[fstring-key] - Attri...\nFAILED tests/components/test_component.py::test_get_vars[direct-class_name]\nFAILED tests/components/test_component.py::test_get_vars[fstring-class_name]\nFAILED tests/components/test_component.py::test_get_vars[direct-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-special_props]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs-nofmt]\nFAILED tests/components/test_component.py::test_get_vars[fstring-custom_attrs]\nFAILED tests/components/test_component.py::test_get_vars[direct-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[fstring-style-background_color]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-chain]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-arg2]\nFAILED tests/components/test_component.py::test_get_vars[direct-event-handler-lambda]\nFAILED tests/components/test_component.py::test_get_vars[direct-dict_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[fstring-dict_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_list_of_list]\nFAILED tests/components/test_component.py::test_get_vars[direct-list_of_dict]\nFAILED tests/components/test_component.py::test_get_vars[fstring-list_of_dict]\n=================== 29 failed, 2 passed, 5 warnings in 1.99s ===================\n\n"], "reflex-reflex/components/component.py-_has_stateful_event_triggers": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/components/test_component.py ........                              [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 8 passed, 5 warnings in 0.70s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_custom_code": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py .                                     [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.71s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_imports": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/components/test_component.py .......                               [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 7 passed, 5 warnings in 0.78s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_hooks_internal": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py .                                     [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.76s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_hooks": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/components/test_component.py .                                     [100%]\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 5 warnings in 0.72s =========================\n\n"], "reflex-reflex/components/component.py-_get_all_custom_components": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/components/test_component.py FF                                    [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_create_custom_component _________________________\n\nmy_component = <function my_component.<locals>.my_component at 0x7f7cfde31cf0>\n\n    def test_create_custom_component(my_component):\n        \"\"\"Test that we can create a custom component.\n    \n        Args:\n            my_component: A test custom component.\n        \"\"\"\n        component = CustomComponent(component_fn=my_component, prop1=\"test\", prop2=1)\n        assert component.tag == \"MyComponent\"\n        assert component.get_props() == set()\n>       assert component._get_all_custom_components() == {component}\n\ntests/components/test_component.py:842: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1780: in _get_all_custom_components\n    custom_components = {self} | super()._get_all_custom_components(seen=seen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"MyComponent\", \"props\": [\"prop1={`test`}\", \"prop2={1}\"], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(self, seen: set[str] | None = None) -> Set[CustomComponent]:\n        \"\"\"Get all the custom components used by the component.\n    \n        Args:\n            seen: The tags of the components that have already been seen.\n    \n        Returns:\n            The set of custom components.\n        \"\"\"\n        assert self.tag is not None, \"The tag must be set.\"\n    \n        # Store the seen components in a set to avoid infinite recursion.\n        if seen is None:\n            seen = set()\n>       custom_components = {self} | super()._get_all_custom_components(seen=seen)\nE       AttributeError: 'super' object has no attribute '_get_all_custom_components'\n\nreflex/components/component.py:1589: AttributeError\n______________________ test_custom_component_get_imports _______________________\n\n    def test_custom_component_get_imports():\n        class Inner(Component):\n            tag = \"Inner\"\n            library = \"inner\"\n    \n        class Other(Component):\n            tag = \"Other\"\n            library = \"other\"\n    \n        @rx.memo\n        def wrapper():\n            return Inner.create()\n    \n        @rx.memo\n        def outer(c: Component):\n            return Other.create(c)\n    \n        custom_comp = wrapper()\n    \n        # Inner is not imported directly, but it is imported by the custom component.\n        assert \"inner\" not in custom_comp._get_all_imports()\n    \n        # The imports are only resolved during compilation.\n>       _, _, imports_inner = compile_components(custom_comp._get_all_custom_components())\n\ntests/components/test_component.py:1686: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/component.py:1780: in _get_all_custom_components\n    custom_components = {self} | super()._get_all_custom_components(seen=seen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = {\"name\": \"Wrapper\", \"props\": [], \"contents\": \"\", \"args\": null, \"special_props\": \"[]\", \"children\": [], \"autofocus\": false}\nseen = set()\n\n    def _get_all_custom_components(self, seen: set[str] | None = None) -> Set[CustomComponent]:\n        \"\"\"Get all the custom components used by the component.\n    \n        Args:\n            seen: The tags of the components that have already been seen.\n    \n        Returns:\n            The set of custom components.\n        \"\"\"\n        assert self.tag is not None, \"The tag must be set.\"\n    \n        # Store the seen components in a set to avoid infinite recursion.\n        if seen is None:\n            seen = set()\n>       custom_components = {self} | super()._get_all_custom_components(seen=seen)\nE       AttributeError: 'super' object has no attribute '_get_all_custom_components'\n\nreflex/components/component.py:1589: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/test_component.py::test_create_custom_component - Att...\nFAILED tests/components/test_component.py::test_custom_component_get_imports\n======================== 2 failed, 5 warnings in 0.86s =========================\n\n"], "reflex-reflex/components/core/upload.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 5 warnings in 0.03s ==============================\n\nERROR: not found: /root/repos/py_data/reflex/tests/test_app.py::page\n(no match in any of [<Module test_app.py>])\n\n"], "reflex-reflex/components/next/image.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n____________ ERROR collecting tests/components/media/test_image.py _____________\ntests/components/media/test_image.py:8: in <module>\n    from reflex.components.next.image import Image  # type: ignore\nreflex/components/next/__init__.py:4: in <module>\n    from .image import Image\nreflex/components/next/image.py:12: in <module>\n    class Image(NextComponent):\nreflex/components/next/image.py:70: in Image\n    ) -> Image:\nE   NameError: name 'Image' is not defined\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/components/media/test_image.py - NameError: name 'Image' is not d...\n========================= 5 warnings, 1 error in 0.09s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_set_src_img\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/components/media/test_image.py::test_render\n\n"], "reflex-reflex/components/lucide/icon.py-create": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/components/radix/test_icon_button.py .FF                           [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_icon_button_size_prop __________________________\n\n    def test_icon_button_size_prop():\n>       ib1 = IconButton.create(\"activity\", size=\"2\")\n\ntests/components/radix/test_icon_button.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/radix/themes/components/icon_button.py:66: in create\n    Icon.create(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'reflex.components.lucide.icon.Icon'>, children = ('activity',)\nprops = {}, icon_tag = None\n\n    @classmethod\n    def create(cls, *children, **props) -> Component:\n        \"\"\"Initialize the Icon component.\n    \n        Run some additional checks on Icon component.\n    \n        Args:\n            *children: The positional arguments\n            **props: The keyword arguments\n    \n        Raises:\n            AttributeError: The errors tied to bad usage of the Icon component.\n            ValueError: If the icon tag is invalid.\n    \n        Returns:\n            The created component.\n        \"\"\"\n        # Extract the icon tag from the props\n        icon_tag = props.get(\"tag\", None)\n    \n        # Check if the icon tag is provided\n        if icon_tag is None:\n>           raise AttributeError(\"Icon tag is required but not provided.\")\nE           AttributeError: Icon tag is required but not provided.\n\nreflex/components/lucide/icon.py:44: AttributeError\n_______________________________ test_icon_button _______________________________\n\n    def test_icon_button():\n>       ib1 = IconButton.create(\"activity\")\n\ntests/components/radix/test_icon_button.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nreflex/components/radix/themes/components/icon_button.py:66: in create\n    Icon.create(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'reflex.components.lucide.icon.Icon'>, children = ('activity',)\nprops = {}, icon_tag = None\n\n    @classmethod\n    def create(cls, *children, **props) -> Component:\n        \"\"\"Initialize the Icon component.\n    \n        Run some additional checks on Icon component.\n    \n        Args:\n            *children: The positional arguments\n            **props: The keyword arguments\n    \n        Raises:\n            AttributeError: The errors tied to bad usage of the Icon component.\n            ValueError: If the icon tag is invalid.\n    \n        Returns:\n            The created component.\n        \"\"\"\n        # Extract the icon tag from the props\n        icon_tag = props.get(\"tag\", None)\n    \n        # Check if the icon tag is provided\n        if icon_tag is None:\n>           raise AttributeError(\"Icon tag is required but not provided.\")\nE           AttributeError: Icon tag is required but not provided.\n\nreflex/components/lucide/icon.py:44: AttributeError\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/components/radix/test_icon_button.py::test_icon_button_size_prop\nFAILED tests/components/radix/test_icon_button.py::test_icon_button - Attribu...\n=================== 2 failed, 1 passed, 5 warnings in 0.13s ====================\n\n"], "reflex-reflex/components/tags/tag.py-format_props": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/reflex\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n_________________ ERROR collecting tests/utils/test_format.py __________________\ntests/utils/test_format.py:542: in <module>\n    \"h1\": f\"{{({{node, ...props}}) => <Heading {{...props}} {''.join(Tag(name='', props=Style({'as_': 'h1'})).format_props())} />}}\"\nreflex/components/tags/tag.py:58: in format_props\n    formatted_props.append(f\"{name}={prop.format()}\")\nreflex/vars.py:819: in __getattr__\n    raise VarAttributeError(\nE   reflex.utils.exceptions.VarAttributeError: The State var `h1` has no attribute 'format' or may have been annotated wrongly.\n------------------------------- Captured stdout --------------------------------\nDeprecationWarning: Creating a Var (test) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (<C1>) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (<C2>) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\nDeprecationWarning: Creating a Var (arg) from a string without specifying \n_var_is_string has been deprecated in version 0.5.4 Specify _var_is_string=False\nto create a Var that is not a string literal. In the future, creating a Var from\na string will be treated as a string literal by default. It will be completely \nremoved in 0.6.0\n=============================== warnings summary ===============================\nreflex/utils/prerequisites.py:26\n  /root/repos/py_data/reflex/reflex/utils/prerequisites.py:26: DeprecationWarning:\n  \n  pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google.cloud')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n../../../../usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563\n  /usr/local/lib/python3.10/site-packages/pkg_resources/__init__.py:2563: DeprecationWarning:\n  \n  Deprecated call to `pkg_resources.declare_namespace('google')`.\n  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/utils/test_format.py - reflex.utils.exceptions.VarAttributeError:...\n========================= 5 warnings, 1 error in 0.40s =========================\n\nERROR: found no collectors for /root/repos/py_data/reflex/tests/utils/test_format.py::test_format_props\n\n"], "textual-src/textual/screen.py-focus_next": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py ........                                             [100%]\n\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 8 passed, 8 warnings in 0.15s =========================\n\n"], "textual-src/textual/screen.py-focus_previous": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py ........                                             [100%]\n\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 8 passed, 8 warnings in 0.14s =========================\n\n"], "textual-src/textual/screen.py-set_focus": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/test_focus.py FFFFFFFF                                             [100%]\n\n=================================== FAILURES ===================================\n_________ test_focus_next_and_previous_with_str_selector_without_self __________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector_without_self(screen: Screen):\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget in to view.\n        \"\"\"\n        if widget is not None and not widget.can_focus:\n            raise errors.NoWidget(f\"Widget {widget!r} is not focusable\")\n        if self.focused is widget:\n            return\n        if self.focused is not None:\n            self.focused.post_message(events.Blur(self.focused))\n        self.focused = widget\n        if widget is not None:\n>           widget.post_message(events.Focus(widget))\nE           TypeError: Message.__init__() takes 1 positional argument but 2 were given\n\nsrc/textual/screen.py:705: TypeError\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n        app.push_screen(Screen())\n    \n        screen = app.screen\n    \n        from textual.containers import Horizontal, VerticalScroll\n        from textual.widgets import Button, Input, Switch\n    \n        screen._add_children(\n            VerticalScroll(\n                Horizontal(\n                    Input(id=\"w3\"),\n                    Switch(id=\"w4\"),\n                    Input(id=\"w5\"),\n                    Button(id=\"w6\"),\n                    Switch(id=\"w7\"),\n                    id=\"w2\",\n                ),\n                Horizontal(\n                    Button(id=\"w9\"),\n                    Switch(id=\"w10\"),\n                    Button(id=\"w11\"),\n                    Input(id=\"w12\"),\n                    Input(id=\"w13\"),\n                    id=\"w8\",\n                ),\n                id=\"w1\",\n            )\n        )\n    \n>       screen.set_focus(screen.query_one(\"#w3\"))\n\ntests/test_focus.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Input(id='w3'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget in to view.\n        \"\"\"\n        if widget is not None and not widget.can_focus:\n            raise errors.NoWidget(f\"Widget {widget!r} is not focusable\")\n        if self.focused is widget:\n            return\n        if self.focused is not None:\n            self.focused.post_message(events.Blur(self.focused))\n        self.focused = widget\n        if widget is not None:\n>           widget.post_message(events.Focus(widget))\nE           TypeError: Message.__init__() takes 1 positional argument but 2 were given\n\nsrc/textual/screen.py:705: TypeError\n__________________________ test_wrap_around_selector ___________________________\n\nscreen = Screen()\n\n    def test_wrap_around_selector(screen: Screen):\n        \"\"\"Ensure moving focus in both directions wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget in to view.\n        \"\"\"\n        if widget is not None and not widget.can_focus:\n            raise errors.NoWidget(f\"Widget {widget!r} is not focusable\")\n        if self.focused is widget:\n            return\n        if self.focused is not None:\n            self.focused.post_message(events.Blur(self.focused))\n        self.focused = widget\n        if widget is not None:\n>           widget.post_message(events.Focus(widget))\nE           TypeError: Message.__init__() takes 1 positional argument but 2 were given\n\nsrc/textual/screen.py:705: TypeError\n_________________________ test_focus_next_wrap_around __________________________\n\nscreen = Screen()\n\n    def test_focus_next_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the next widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#child\"))\n\ntests/test_focus.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='child'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget in to view.\n        \"\"\"\n        if widget is not None and not widget.can_focus:\n            raise errors.NoWidget(f\"Widget {widget!r} is not focusable\")\n        if self.focused is widget:\n            return\n        if self.focused is not None:\n            self.focused.post_message(events.Blur(self.focused))\n        self.focused = widget\n        if widget is not None:\n>           widget.post_message(events.Focus(widget))\nE           TypeError: Message.__init__() takes 1 positional argument but 2 were given\n\nsrc/textual/screen.py:705: TypeError\n_________________________ test_no_focus_empty_selector _________________________\n\nscreen = Screen()\n\n    def test_no_focus_empty_selector(screen: Screen):\n        \"\"\"Ensure focus is cleared when selector matches nothing.\"\"\"\n        assert screen.focus_next(\"#bananas\") is None\n        assert screen.focus_previous(\"#bananas\") is None\n    \n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget in to view.\n        \"\"\"\n        if widget is not None and not widget.can_focus:\n            raise errors.NoWidget(f\"Widget {widget!r} is not focusable\")\n        if self.focused is widget:\n            return\n        if self.focused is not None:\n            self.focused.post_message(events.Blur(self.focused))\n        self.focused = widget\n        if widget is not None:\n>           widget.post_message(events.Focus(widget))\nE           TypeError: Message.__init__() takes 1 positional argument but 2 were given\n\nsrc/textual/screen.py:705: TypeError\n________________ test_focus_next_and_previous_with_str_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_str_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget in to view.\n        \"\"\"\n        if widget is not None and not widget.can_focus:\n            raise errors.NoWidget(f\"Widget {widget!r} is not focusable\")\n        if self.focused is widget:\n            return\n        if self.focused is not None:\n            self.focused.post_message(events.Blur(self.focused))\n        self.focused = widget\n        if widget is not None:\n>           widget.post_message(events.Focus(widget))\nE           TypeError: Message.__init__() takes 1 positional argument but 2 were given\n\nsrc/textual/screen.py:705: TypeError\n_______________ test_focus_next_and_previous_with_type_selector ________________\n\nscreen = Screen()\n\n    def test_focus_next_and_previous_with_type_selector(screen: Screen):\n        \"\"\"Move focus with a selector that matches the currently focused node.\"\"\"\n>       screen.set_focus(screen.query_one(\"#Paul\"))\n\ntests/test_focus.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='Paul'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget in to view.\n        \"\"\"\n        if widget is not None and not widget.can_focus:\n            raise errors.NoWidget(f\"Widget {widget!r} is not focusable\")\n        if self.focused is widget:\n            return\n        if self.focused is not None:\n            self.focused.post_message(events.Blur(self.focused))\n        self.focused = widget\n        if widget is not None:\n>           widget.post_message(events.Focus(widget))\nE           TypeError: Message.__init__() takes 1 positional argument but 2 were given\n\nsrc/textual/screen.py:705: TypeError\n_______________________ test_focus_previous_wrap_around ________________________\n\nscreen = Screen()\n\n    def test_focus_previous_wrap_around(screen: Screen):\n        \"\"\"Ensure focusing the previous widget wraps around the focus chain.\"\"\"\n>       screen.set_focus(screen.query_one(\"#foo\"))\n\ntests/test_focus.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(), widget = Focusable(id='foo'), scroll_visible = True\n\n    def set_focus(self, widget: Widget | None, scroll_visible: bool = True) -> None:\n        \"\"\"Focus (or un-focus) a widget. A focused widget will receive key events first.\n    \n        Args:\n            widget: Widget to focus, or None to un-focus.\n            scroll_visible: Scroll widget in to view.\n        \"\"\"\n        if widget is not None and not widget.can_focus:\n            raise errors.NoWidget(f\"Widget {widget!r} is not focusable\")\n        if self.focused is widget:\n            return\n        if self.focused is not None:\n            self.focused.post_message(events.Blur(self.focused))\n        self.focused = widget\n        if widget is not None:\n>           widget.post_message(events.Focus(widget))\nE           TypeError: Message.__init__() takes 1 positional argument but 2 were given\n\nsrc/textual/screen.py:705: TypeError\n=============================== warnings summary ===============================\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\ntests/test_focus.py::test_wrap_around_selector\ntests/test_focus.py::test_focus_next_wrap_around\ntests/test_focus.py::test_no_focus_empty_selector\ntests/test_focus.py::test_focus_next_and_previous_with_str_selector\ntests/test_focus.py::test_focus_next_and_previous_with_type_selector\ntests/test_focus.py::test_focus_previous_wrap_around\n  /root/repos/py_data/textual/src/textual/app.py:2108: DeprecationWarning: There is no current event loop\n    future: asyncio.Future[ScreenResultType] = asyncio.Future()\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector_without_self\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/test_focus.py::test_wrap_around_selector - TypeError: Message.__...\nFAILED tests/test_focus.py::test_focus_next_wrap_around - TypeError: Message....\nFAILED tests/test_focus.py::test_no_focus_empty_selector - TypeError: Message...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_str_selector - ...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector\nFAILED tests/test_focus.py::test_focus_previous_wrap_around - TypeError: Mess...\n======================== 8 failed, 8 warnings in 0.26s =========================\n\n"], "textual-src/textual/strip.py-index_to_cell_position": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/test_strip.py FFFFFFFFFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_index_to_cell_position[0-0] _______________________\n\nindex = 0, cell_position = 0\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 0\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n_______________________ test_index_to_cell_position[1-1] _______________________\n\nindex = 1, cell_position = 1\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 1\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n_______________________ test_index_to_cell_position[2-2] _______________________\n\nindex = 2, cell_position = 2\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 2\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n_______________________ test_index_to_cell_position[3-3] _______________________\n\nindex = 3, cell_position = 3\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 3\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n_______________________ test_index_to_cell_position[4-4] _______________________\n\nindex = 4, cell_position = 4\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 4\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n_______________________ test_index_to_cell_position[5-6] _______________________\n\nindex = 5, cell_position = 6\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 5\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n_______________________ test_index_to_cell_position[6-8] _______________________\n\nindex = 6, cell_position = 8\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 6\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n______________________ test_index_to_cell_position[7-10] _______________________\n\nindex = 7, cell_position = 10\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 7\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n______________________ test_index_to_cell_position[8-11] _______________________\n\nindex = 8, cell_position = 11\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 8\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n______________________ test_index_to_cell_position[9-12] _______________________\n\nindex = 9, cell_position = 12\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 9\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n______________________ test_index_to_cell_position[10-13] ______________________\n\nindex = 10, cell_position = 13\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 10\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n______________________ test_index_to_cell_position[11-14] ______________________\n\nindex = 11, cell_position = 14\n\n    @pytest.mark.parametrize(\n        \"index,cell_position\",\n        [\n            (0, 0),\n            (1, 1),\n            (2, 2),\n            (3, 3),\n            (4, 4),\n            (5, 6),\n            (6, 8),\n            (7, 10),\n            (8, 11),\n            (9, 12),\n            (10, 13),\n            (11, 14),\n        ],\n    )\n    def test_index_to_cell_position(index, cell_position):\n        strip = Strip([Segment(\"ab\"), Segment(\"cd\u65e5\u672c\u8a9eef\"), Segment(\"gh\")])\n>       assert cell_position == strip.index_to_cell_position(index)\n\ntests/test_strip.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('ab'), Segment('cd\u65e5\u672c\u8a9eef'), Segment('gh')], 14), index = 11\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n___________________ test_index_cell_position_index_too_large ___________________\n\n    def test_index_cell_position_index_too_large():\n        strip = Strip([Segment(\"abcdef\"), Segment(\"ghi\")])\n        with pytest.raises(NoCellPositionForIndex):\n>           strip.index_to_cell_position(100)\n\ntests/test_strip.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([Segment('abcdef'), Segment('ghi')], 9), index = 100\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n_____________________ test_index_cell_position_no_segments _____________________\n\n    def test_index_cell_position_no_segments():\n        strip = Strip([])\n        with pytest.raises(NoCellPositionForIndex):\n>           strip.index_to_cell_position(2)\n\ntests/test_strip.py:186: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Strip([], 0), index = 2\n\n    def index_to_cell_position(self, index: int) -> int:\n        \"\"\"Given a character index, return the cell position of that character.\n        This is the sum of the cell lengths of all the characters *before* the character\n        at `index`.\n    \n        Args:\n            index: The index to convert.\n    \n        Returns:\n            The cell position of the character at `index`.\n        \"\"\"\n>       return sum(cell_len(text) for text, _, _ in islice(self._segments, index))\nE       NameError: name 'islice' is not defined\n\nsrc/textual/strip.py:169: NameError\n=========================== short test summary info ============================\nFAILED tests/test_strip.py::test_index_to_cell_position[0-0] - NameError: nam...\nFAILED tests/test_strip.py::test_index_to_cell_position[1-1] - NameError: nam...\nFAILED tests/test_strip.py::test_index_to_cell_position[2-2] - NameError: nam...\nFAILED tests/test_strip.py::test_index_to_cell_position[3-3] - NameError: nam...\nFAILED tests/test_strip.py::test_index_to_cell_position[4-4] - NameError: nam...\nFAILED tests/test_strip.py::test_index_to_cell_position[5-6] - NameError: nam...\nFAILED tests/test_strip.py::test_index_to_cell_position[6-8] - NameError: nam...\nFAILED tests/test_strip.py::test_index_to_cell_position[7-10] - NameError: na...\nFAILED tests/test_strip.py::test_index_to_cell_position[8-11] - NameError: na...\nFAILED tests/test_strip.py::test_index_to_cell_position[9-12] - NameError: na...\nFAILED tests/test_strip.py::test_index_to_cell_position[10-13] - NameError: n...\nFAILED tests/test_strip.py::test_index_to_cell_position[11-14] - NameError: n...\nFAILED tests/test_strip.py::test_index_cell_position_index_too_large - NameEr...\nFAILED tests/test_strip.py::test_index_cell_position_no_segments - NameError:...\n============================== 14 failed in 0.21s ==============================\n\n"], "textual-src/textual/strip.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py .......                                       [100%]\n\n============================== 7 passed in 0.09s ===============================\n\n"], "textual-src/textual/app.py-batch_update": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_app.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_batch_update _______________________________\n\n    def test_batch_update():\n        \"\"\"Test `batch_update` context manager\"\"\"\n        app = App()\n        assert app._batch_count == 0  # Start at zero\n    \n>       with app.batch_update():\n\ntests/test_app.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <contextlib._GeneratorContextManager object at 0x7f8a409c1ed0>\n\n    def __enter__(self):\n        # do not keep args and kwds alive unnecessarily\n        # they are only needed for recreation, which is not possible anymore\n        del self.args, self.kwds, self.func\n        try:\n>           return next(self.gen)\nE           TypeError: '_GeneratorContextManager' object is not an iterator\n\n/usr/local/lib/python3.10/contextlib.py:135: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_app.py::test_batch_update - TypeError: '_GeneratorContextMa...\n============================== 1 failed in 0.15s ===============================\n\n"], "textual-src/textual/app.py-call_from_thread": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\n============================ no tests ran in 0.10s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_concurrency.py::on_ready\n(no match in any of [<Module test_concurrency.py>])\n\n"], "textual-src/textual/app.py-run_test": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 79 errors\n\n==================================== ERRORS ====================================\n___________________ ERROR collecting tests/test_reactive.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_reactive.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_dynamic_bindings.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_dynamic_bindings.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/text_area/test_edit_via_api.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_api.py:11: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_header.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_header.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________________ ERROR collecting tests/test_app.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_app.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/text_area/test_selection_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection_bindings.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______ ERROR collecting tests/animations/test_tabs_underline_animation.py ______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_tabs_underline_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/test_progress_bar.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_progress_bar.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_tabbed_content.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_tabbed_content.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_overflow_change.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_overflow_change.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_data_table.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_table.py:9: in <module>\n    from textual.app import App, ComposeResult, RenderableType\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/input/test_input_value_visibility.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_value_visibility.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/workers/test_worker.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_call_x_schedulers.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_call_x_schedulers.py:4: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_widget.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/text_area/test_edit_via_bindings.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_edit_via_bindings.py:12: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____ ERROR collecting tests/animations/test_loading_indicator_animation.py _____\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_loading_indicator_animation.py:6: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_messages.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_messages.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_languages.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_languages.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/css/test_css_reloading.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_css_reloading.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_pilot.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_pilot.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/suggester/test_input_suggestions.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/suggester/test_input_suggestions.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_query.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_query.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/select/test_blank_and_clear.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_blank_and_clear.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/select/test_value.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_value.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_keys.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_keys.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/select/test_prompt.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_prompt.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/input/test_input_validation.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_validation.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________ ERROR collecting tests/text_area/test_setting_themes.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_setting_themes.py:3: in <module>\n    from textual._text_area_theme import TextAreaTheme\nsrc/textual/_text_area_theme.py:8: in <module>\n    from textual.app import DEFAULT_COLORS\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_inheritance.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_inheritance.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/tree/test_directory_tree.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_directory_tree.py:8: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_lazy.py ______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_lazy.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/text_area/test_selection.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_selection.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_containers.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_containers.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________________ ERROR collecting tests/test_message_pump.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_pump.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_screen_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_screen_css.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/listview/test_listview_initial_index.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_initial_index.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_animation.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_animation.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_border_subtitle.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_border_subtitle.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________ ERROR collecting tests/select/test_empty_select.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_empty_select.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/tree/test_tree_availability.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_tree_availability.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_driver.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_driver.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/animations/test_switch_animation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_switch_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_focus.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_focus.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/test_widget_removing.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_widget_removing.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/select/test_changed_message.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/select/test_changed_message.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/css/test_initial.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_initial.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_unmount.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_unmount.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/toggles/test_radioset.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/toggles/test_radioset.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_mount.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_mount.py:8: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/command_palette/test_events.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/command_palette/test_events.py:5: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/workers/test_worker_manager.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_worker_manager.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_screens.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_screens.py:8: in <module>\n    from textual.app import App, ComposeResult, ScreenError, ScreenStackError\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_message_handling.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_message_handling.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________ ERROR collecting tests/input/test_input_terminal_cursor.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_terminal_cursor.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_loading.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_loading.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n______________________ ERROR collecting tests/test_on.py _______________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_on.py:9: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/animations/test_disabling_animations.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_disabling_animations.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_data_bind.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_data_bind.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________________ ERROR collecting tests/css/test_nested_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_nested_css.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______ ERROR collecting tests/animations/test_progress_bar_animation.py _______\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_progress_bar_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/animations/test_scrolling_animation.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_scrolling_animation.py:6: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________________ ERROR collecting tests/test_paste.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_paste.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_issue_4248.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_issue_4248.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________ ERROR collecting tests/workers/test_work_decorator.py _____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/workers/test_work_decorator.py:9: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n________ ERROR collecting tests/css/test_programmatic_style_changes.py _________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_programmatic_style_changes.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________ ERROR collecting tests/text_area/test_escape_binding.py ____________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/text_area/test_escape_binding.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_________ ERROR collecting tests/listview/test_listview_navigation.py __________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/listview/test_listview_navigation.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/test_style_inheritance.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_style_inheritance.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_freeze.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_freeze.py:3: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_disabled.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_disabled.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_signal.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_signal.py:3: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n__________________ ERROR collecting tests/test_test_runner.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_test_runner.py:2: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_____________ ERROR collecting tests/input/test_input_restrict.py ______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/input/test_input_restrict.py:5: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_shutdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_shutdown.py:1: in <module>\n    from textual.app import App\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n___________________ ERROR collecting tests/test_markdown.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_markdown.py:13: in <module>\n    import textual.widgets._markdown as MD\nsrc/textual/widgets/_markdown.py:19: in <module>\n    from ..app import ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______________ ERROR collecting tests/tree/test_node_refresh.py _______________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/tree/test_node_refresh.py:4: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n_______ ERROR collecting tests/option_list/test_option_list_movement.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/option_list/test_option_list_movement.py:7: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n____________________ ERROR collecting tests/test_visible.py ____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_visible.py:1: in <module>\n    from textual.app import App, ComposeResult\nE     File \"/root/repos/py_data/textual/src/textual/app.py\", line 1416\nE       Args:\nE   IndentationError: unexpected indent\n=========================== short test summary info ============================\nERROR tests/test_reactive.py\nERROR tests/test_dynamic_bindings.py\nERROR tests/text_area/test_edit_via_api.py\nERROR tests/test_header.py\nERROR tests/test_app.py\nERROR tests/text_area/test_selection_bindings.py\nERROR tests/animations/test_tabs_underline_animation.py\nERROR tests/test_progress_bar.py\nERROR tests/test_tabbed_content.py\nERROR tests/test_overflow_change.py\nERROR tests/test_data_table.py\nERROR tests/input/test_input_value_visibility.py\nERROR tests/workers/test_worker.py\nERROR tests/test_call_x_schedulers.py\nERROR tests/test_widget.py\nERROR tests/text_area/test_edit_via_bindings.py\nERROR tests/animations/test_loading_indicator_animation.py\nERROR tests/text_area/test_messages.py\nERROR tests/text_area/test_languages.py\nERROR tests/css/test_css_reloading.py\nERROR tests/test_pilot.py\nERROR tests/suggester/test_input_suggestions.py\nERROR tests/test_query.py\nERROR tests/select/test_blank_and_clear.py\nERROR tests/select/test_value.py\nERROR tests/test_keys.py\nERROR tests/select/test_prompt.py\nERROR tests/input/test_input_validation.py\nERROR tests/text_area/test_setting_themes.py\nERROR tests/css/test_inheritance.py\nERROR tests/tree/test_directory_tree.py\nERROR tests/test_lazy.py\nERROR tests/text_area/test_selection.py\nERROR tests/test_containers.py\nERROR tests/test_message_pump.py\nERROR tests/css/test_screen_css.py\nERROR tests/listview/test_listview_initial_index.py\nERROR tests/test_animation.py\nERROR tests/test_border_subtitle.py\nERROR tests/select/test_empty_select.py\nERROR tests/tree/test_tree_availability.py\nERROR tests/test_driver.py\nERROR tests/animations/test_switch_animation.py\nERROR tests/test_focus.py\nERROR tests/test_widget_removing.py\nERROR tests/select/test_changed_message.py\nERROR tests/css/test_initial.py\nERROR tests/test_unmount.py\nERROR tests/toggles/test_radioset.py\nERROR tests/test_mount.py\nERROR tests/command_palette/test_events.py\nERROR tests/workers/test_worker_manager.py\nERROR tests/test_screens.py\nERROR tests/test_message_handling.py\nERROR tests/input/test_input_terminal_cursor.py\nERROR tests/test_loading.py\nERROR tests/test_on.py\nERROR tests/animations/test_disabling_animations.py\nERROR tests/test_data_bind.py\nERROR tests/css/test_nested_css.py\nERROR tests/animations/test_progress_bar_animation.py\nERROR tests/animations/test_scrolling_animation.py\nERROR tests/test_paste.py\nERROR tests/test_issue_4248.py\nERROR tests/workers/test_work_decorator.py\nERROR tests/css/test_programmatic_style_changes.py\nERROR tests/text_area/test_escape_binding.py\nERROR tests/listview/test_listview_navigation.py\nERROR tests/test_style_inheritance.py\nERROR tests/test_freeze.py\nERROR tests/test_disabled.py\nERROR tests/test_signal.py\nERROR tests/test_test_runner.py\nERROR tests/input/test_input_restrict.py\nERROR tests/test_shutdown.py\nERROR tests/test_markdown.py\nERROR tests/tree/test_node_refresh.py\nERROR tests/option_list/test_option_list_movement.py\nERROR tests/test_visible.py\n============================== 79 errors in 3.29s ==============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_method_call_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_dynamic_bindings.py::test_dynamic_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_return_code_is_one_after_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_set_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_progress_bar.py::test_show_sub_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_overflow_change.py::test_overflow_change_updates_virtual_size_appropriately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_row_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_on_instantiation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_after_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_compose_order\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_constructor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_applies_to_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_nested_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_widget_under_another_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_invalid_css_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_show_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_fails_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_priority\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_assign_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_keys.py::test_character_bindings\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_css_reloading.py::test_css_reloading_file_not_found\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_builtin_themes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_returns_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_inheritance.py::test_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_directory_tree.py::test_directory_tree_reloading_preserves_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_lazy.py::test_lazy\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_reverse_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_backward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_column_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste_read_only_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_get_child_by_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_column_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_horizontal_vs_horizontalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_with_call_next\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_initial_index.py::test_listview_initial_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_failure\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_vertical_movement_visual_alignment_snapping\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_character_near_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_outside_screen_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_valid_empty\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_blur_should_not_happen_unless_specified\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_and_scheduled_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_border_subtitle.py::test_border_subtitle\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_visible_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set_while_selecting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_compute_first_time_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_right_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_enabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_home_basic_behaviour\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_pseudo_class\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_with_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_type_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_function_sum\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_message_control\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_on_blur_triggers_validation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right_to_previous_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newlines_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children_match_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hiding_tabs_moves_active_to_next_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_unsetting_tabbed_content_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_windows_newlines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_unmount.py::test_unmount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/toggles/test_radioset.py::test_keyboard_navigation_with_disabled_buttons\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_mount.py::test_render_only_after_mount\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_inside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_always_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_click_row_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_none_is_ignored\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_all\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel_immediately\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_non_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_text_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_get\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_updates_virtual_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_disabled_tree_node_selected_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_progress_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_at_coordinate_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_enabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_row_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_unset_hover_highlight_when_no_table_cell_under_mouse\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_handling.py::test_message_inheritance_namespace\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_value_to_blank_with_allow_blank_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_terminal_cursor_position_update_on_cursor_move\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cursor_movement_with_home_pagedown_etc\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_no_return_code_while_running\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_click_cell_cursor\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_reenabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_clamp_from_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_drag_outside_widget_up_click\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_schedule_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_setting_and_checking_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_loading.py::test_loading_disables_and_remove_scrollbars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_screen_always_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_arbitrary_attributes\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabled_tab_cannot_be_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_async_init_true\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_does_not_move_to_invisible_widgets\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_all_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_selector_does_not_leak\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test__allow_scroll\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_screen_offset_and_terminal_cursor_position_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_no_duplicate_external_watchers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column_and_update\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_doesnt_exist\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_up_does_not_give_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_enabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_closed_event_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_up\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_coordinate_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_forward\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars_in_middle_of_word\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_value_is_blank_by_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_reverse_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_returns_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_prompt.py::test_reactive_prompt_change_when_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_via_typing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_initial_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_default_custom_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_bad_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_registering_and_setting_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_unknown_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_screen_walk_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_call_x_schedulers.py::test_call_later\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_action\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_row_label_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_to_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_to_start_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_changed_message_edit_via_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selection_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_after_value_assignment\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_refresh\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_inside_compose_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_mouse_click_gutter_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_focused\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_index_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_resize_terminal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_same_selection_does_not_post_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_focus_blur\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_language_to_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_header_selected\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_empty_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_tab_within_tabbed_content_stays_isolated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_inside_screen_is_fine_with_correct_coordinate_system\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_language_binary_missing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_enter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_issue_4248.py::test_issue_4248\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_empty_string\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_rule_declaration_after_nested\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_star_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_work_decorator.py::test_calling_workers_from_within_workers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right_at_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_align_change_updates_children_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_does_not_animate_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_movement_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate_to_externals\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_switch_animation.py::test_switch_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_fully_within_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_double_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/listview/test_listview_navigation.py::test_keyboard_navigation_with_disabled_items\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_default_return_code_is_zero\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_nest_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_inheritance.py::test_text_style_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_no_op\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_changed_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_tab_with_spaces_goes_to_tab_stop\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_with_width\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_none_validate_on_means_all_validations_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_bottom\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_cancel\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_empty_table_interactions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_to_line_end\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_message_queue_size\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_move_cursor_respects_animate_parameter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clicking_border_link_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_picked_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestion_on_empty_value_after_deleting\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_reactive_with_callable_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_not_static_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_offset_getter_setter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css_and_kwds\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_creating_disabled_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_external_watch_init_does_not_propagate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_center_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_select_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_line_multiline_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_thread_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_set_return_code\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_animate_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_freeze.py::test_freeze\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_down_when_cursor_on_last_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_reuse_column_key_after_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_get_focusable_widget_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_progress_bar_animation.py::test_progress_bar_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_multiple_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_paste.py::test_paste_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_premature_reactive_call\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_sub_title_overrides_app_sub_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_disabled.py::test_children_loses_focus_if_container_is_disabled\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_single_keypress_printable_character\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_show_messages\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_reactive_updates_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_loading_indicator_animation.py::test_loading_indicator_is_static_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_accept_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_driver.py::test_driver_mouse_down_up_click_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_word_left\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_initialize\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_middle_container\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_cell_padding_cannot_be_negative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_no_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_line_home_smart_home\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_terminal_cursor.py::test_initial_terminal_cursor_position\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_does_not_deactivate_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_sort_children_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_message_pump.py::test_prevent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_relative\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_replace_multiline_text_maintain_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_edits_on_read_only_mode\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_select_raises_exception_if_allow_blank_is_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_wait_without_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabbed_content_switch_via_ui\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_paste\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_escape_binding.py::test_escape_key_when_tab_behavior_is_indent\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_in_tabbed_content_doesnt_crash\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_moves_to_visible_widgets_inside_invisible_containers\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_shows_up_after_deleting_extra_chars\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_coordinate_and_key_access\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_tabs_underline_animation.py::test_tabs_underline_animates_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_value_visibility.py::test_input_value_visible_if_mounted_later_and_assigned_after\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_opened_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_expands_column_widths\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_vertical_vs_verticalscroll_scrolling\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_compute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_no_suggestions\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_default_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_select_line_binding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_mouse_down_gives_focus\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_messages.py::test_selection_changed_via_api\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_newline_around_cursor_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_clear_empty_document\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_coordinate_to_cell_key_invalid_coordinate\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_initial_value_is_validated\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_wait_for_current_animations\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right_end_of_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/command_palette/test_events.py::test_command_palette_option_highlighted_event\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_invalid_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_location_set\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_multiple_lines_selection_above\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_column_duplicate_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_empty_select.py::test_empty_set_options_is_ok_with_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_test_runner.py::test_run_test\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_restrict.py::test_bad_type\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_pilot.py::test_pilot_target_on_widget_that_is_not_visible_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_deletion_with_non_empty_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_validation_on_submitted_should_not_happen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_changed_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row_index_invalid_row_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_changed_message.py::test_selecting_posts_message\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_via_tab_pane\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_setting_themes.py::test_setting_unknown_theme_raises_exception\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_row\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_validate_init_true_set_before_dom_ready\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_remove_column\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_on.py::test_on_button_pressed\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_default_selection\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_tabs_does_not_change_active_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_setting_builtin_language_via_attribute\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/input/test_input_validation.py::test_input_submitted_message_validation_success\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_up_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_signal.py::test_signal_parameters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_value_unknown_option_raises_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_replace_lines_with_fewer_lines\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_auto_focus_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_run_error\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_dismiss_non_top_screen\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_installed_screens\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_showing_first_tab_activates_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_ansi_theme\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_edit_read_only_mode_does_nothing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_remove_unmounted\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_blank_and_clear.py::test_clear_with_allow_blanks\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget_removing.py::test_widget_remove_children_with_string_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_multiline_selection_top\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_shutdown.py::test_shutdown\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_self_referential_deadlock\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_languages.py::test_register_language_existing_language\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_markdown.py::test_link_in_markdown_table_posts_message_when_clicked\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_columns_user_defined_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_row_auto_height\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_node_refresh.py::test_initial_state\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/suggester/test_input_suggestions.py::test_suggestion_with_special_characters\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_update_cell_cell_exists\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_widget.py::test_mount_error_not_widget\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_focus.py::test_focus_chain_handles_inherited_visibility\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start_maintain_selection_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_multiline_text\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/tree/test_tree_availability.py::test_creating_disabled_tree\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_reactive.py::test_watch_init_false_always_update_false\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_invalid_column_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker_manager.py::test_run_worker_async\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_screens.py::test_switch_screen_updates_results_callback_stack\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_containers.py::test_scrollbar_zero_thickness\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_scrolling_cursor_into_view\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_left_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/workers/test_worker.py::test_get_worker\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_selection_up_when_cursor_on_first_line\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_app.py::test_hover_update_styles\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_tabs_nested_doesnt_interfere_with_ancestor_tabbed_content\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/select/test_value.py::test_set_options_resets_value_to_blank\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_query_set_styles_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_programmatic_style_changes.py::test_programmatic_style_change_updates_children\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_animation.py::test_scheduling_animation\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_scrolling_animation.py::test_scrolling_animates_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_cell_at_returns_value_at_cell\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection_bindings.py::test_cursor_page_down\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_header.py::test_screen_title_overrides_app_title\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_get_column_at_invalid_index\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_sort_by_all_columns_no_key\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_delete_within_line_dont_maintain_offset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_labels\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_column_cursor_highlight_events\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_datatable_message_emission\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_left_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_hover_mouse_leave\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_text_non_cursor_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/option_list/test_option_list_movement.py::test_keyboard_navigation_with_disabled_options\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_word_left_at_line_start\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_add_rows\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_visible.py::test_visible_is_inherited\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_bind.py::test_data_binding_missing_reactive\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_query.py::test_universal_selector_doesnt_select_self\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_hide_last_tab_means_no_tab_active\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_bindings.py::test_delete_right\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_move_cursor_select\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_selected_text_multibyte\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_cursor_word_right_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_selection.py::test_get_cursor_down_location\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_disabling_unknown_tab\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_data_table.py::test_clear\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_tabbed_content.py::test_navigation_around_disabled_tabs\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/text_area/test_edit_via_api.py::test_insert_old_mac_newlines\n\n"], "textual-src/textual/app.py-run": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/test_auto_refresh.py .                                             [ 33%]\ntests/test_concurrency.py .                                              [ 66%]\ntests/test_win_sleep.py s                                                [100%]\n\n========================= 2 passed, 1 skipped in 1.14s =========================\n\n"], "textual-src/textual/app.py-switch_mode": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/css/test_screen_css.py ...                                         [100%]\n\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_type_by_name\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_switch_mode_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 3 passed, 4 warnings in 0.85s =========================\n\n"], "textual-src/textual/app.py-push_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 31 items\n\ntests/test_header.py F                                                   [  3%]\ntests/test_focus.py F                                                    [  6%]\ntests/css/test_screen_css.py F                                           [  9%]\ntests/test_focus.py F                                                    [ 12%]\ntests/test_header.py F                                                   [ 16%]\ntests/test_screens.py FF                                                 [ 22%]\ntests/test_header.py F                                                   [ 25%]\ntests/css/test_screen_css.py F                                           [ 29%]\ntests/test_screens.py F                                                  [ 32%]\ntests/test_widget.py F                                                   [ 35%]\ntests/test_header.py F                                                   [ 38%]\ntests/css/test_screen_css.py F                                           [ 41%]\ntests/test_screens.py FF                                                 [ 48%]\ntests/test_header.py F                                                   [ 51%]\ntests/test_screens.py FF                                                 [ 58%]\ntests/test_focus.py F                                                    [ 61%]\ntests/test_screens.py FF                                                 [ 67%]\ntests/test_unmount.py F                                                  [ 70%]\ntests/test_header.py F                                                   [ 74%]\ntests/test_screens.py F                                                  [ 77%]\ntests/test_header.py F                                                   [ 80%]\ntests/test_screens.py FF                                                 [ 87%]\ntests/css/test_screen_css.py F                                           [ 90%]\ntests/test_pilot.py F                                                    [ 93%]\ntests/test_screens.py F                                                  [ 96%]\ntests/test_header.py F                                                   [100%]\n\n=================================== FAILURES ===================================\n______________________ test_screen_title_none_is_ignored _______________________\n\n    async def test_screen_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").text == \"app title\"\n\ntests/test_header.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:15: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:15 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    12 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    13 \u2502   \u2502                                                                  \u2502\n\u2502    14 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  15 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    16 \u2502                                                                      \u2502\n\u2502    17 \u2502   app = MyApp()                                                      \u2502\n\u2502    18 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_title_none_is_ignored.<locals\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>          \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_________ test_focus_next_and_previous_with_type_selector_without_self _________\n\n    def test_focus_next_and_previous_with_type_selector_without_self():\n        \"\"\"Test moving the focus with a selector that does not match the currently focused node.\"\"\"\n        app = App()\n        app._set_active()\n>       app.push_screen(Screen())\n\ntests/test_focus.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'App' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n_____________________ test_screen_css_push_screen_instance _____________________\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_push_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_______________________________ test_allow_focus _______________________________\n\n    def test_allow_focus():\n        \"\"\"Test allow_focus and allow_focus_children are called and the result used.\"\"\"\n        focusable_allow_focus_called = False\n        non_focusable_allow_focus_called = False\n    \n        class Focusable(Widget, can_focus=False):\n            def allow_focus(self) -> bool:\n                nonlocal focusable_allow_focus_called\n                focusable_allow_focus_called = True\n                return True\n    \n        class NonFocusable(Container, can_focus=True):\n            def allow_focus(self) -> bool:\n                nonlocal non_focusable_allow_focus_called\n                non_focusable_allow_focus_called = True\n                return False\n    \n        class FocusableContainer(Container, can_focus_children=False):\n            def allow_focus_children(self) -> bool:\n                return True\n    \n        class NonFocusableContainer(Container, can_focus_children=True):\n            def allow_focus_children(self) -> bool:\n                return False\n    \n        app = App()\n        app._set_active()\n>       app.push_screen(Screen())\n\ntests/test_focus.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'App' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n____________________ test_screen_sub_title_none_is_ignored _____________________\n\n    async def test_screen_sub_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"app sub-title\"\n\ntests/test_header.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_sub_title_none_is_ignored():\n        class MyScreen(Screen):\n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:89: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:89 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    86 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502    87 \u2502   \u2502                                                                  \u2502\n\u2502    88 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  89 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    90 \u2502                                                                      \u2502\n\u2502    91 \u2502   app = MyApp()                                                      \u2502\n\u2502    92 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_sub_title_none_is_ignored.<lo\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_____________________________ test_dismiss_action ______________________________\n\n    async def test_dismiss_action():\n        class ConfirmScreen(Screen[bool]):\n            BINDINGS = [(\"y\", \"dismiss(True)\", \"Dismiss\")]\n    \n        class MyApp(App[None]):\n            bingo = False\n    \n            def on_mount(self) -> None:\n                self.push_screen(ConfirmScreen(), callback=self.callback)\n    \n            def callback(self, result: bool) -> None:\n                self.bingo = result\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            await pilot.press(\"y\")\n>           assert app.bingo\nE           AssertionError: assert False\nE            +  where False = MyApp(title='MyApp', classes={'-dark-mode'}).bingo\n\ntests/test_screens.py:324: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_dismiss_action():\n        class ConfirmScreen(Screen[bool]):\n            BINDINGS = [(\"y\", \"dismiss(True)\", \"Dismiss\")]\n    \n        class MyApp(App[None]):\n            bingo = False\n    \n            def on_mount(self) -> None:\n                self.push_screen(ConfirmScreen(), callback=self.callback)\n    \n            def callback(self, result: bool) -> None:\n                self.bingo = result\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:322: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:316: in on_mount\n    self.push_screen(ConfirmScreen(), callback=self.callback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = ConfirmScreen()\ncallback = <bound method test_dismiss_action.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})>\nwait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:316 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   313 \u2502   \u2502   bingo = False                                                  \u2502\n\u2502   314 \u2502   \u2502                                                                  \u2502\n\u2502   315 \u2502   \u2502   def on_mount(self) -> None:                                    \u2502\n\u2502 \u2771 316 \u2502   \u2502   \u2502   self.push_screen(ConfirmScreen(), callback=self.callback)  \u2502\n\u2502   317 \u2502   \u2502                                                                  \u2502\n\u2502   318 \u2502   \u2502   def callback(self, result: bool) -> None:                      \u2502\n\u2502   319 \u2502   \u2502   \u2502   self.bingo = result                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 ConfirmScreen = <class                                                   \u2502 \u2502\n\u2502 \u2502                 'tests.test_screens.test_dismiss_action.<locals>.Confir\u2026 \u2502 \u2502\n\u2502 \u2502          self = MyApp(title='MyApp', classes={'-dark-mode'})             \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = <bound method                                         \u2502 \u2502\n\u2502 \u2502                    test_dismiss_action.<locals>.MyApp.callback of        \u2502 \u2502\n\u2502 \u2502                    MyApp(title='MyApp', classes={'-dark-mode'})>         \u2502 \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>               \u2502 \u2502\n\u2502 \u2502           screen = ConfirmScreen()                                       \u2502 \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'})          \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_________________ test_push_screen_wait_for_dismiss_no_worker __________________\n\n    async def test_push_screen_wait_for_dismiss_no_worker() -> None:\n        \"\"\"Test wait_for_dismiss raises NoActiveWorker when not using workers.\"\"\"\n    \n        class QuitScreen(Screen[bool]):\n            BINDINGS = [\n                (\"y\", \"quit(True)\"),\n                (\"n\", \"quit(False)\"),\n            ]\n    \n            def action_quit(self, quit: bool) -> None:\n                self.dismiss(quit)\n    \n        results: list[bool] = []\n    \n        class ScreensApp(App):\n            BINDINGS = [(\"x\", \"exit\")]\n    \n            async def action_exit(self) -> None:\n                result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n                results.append(result)\n    \n        app = ScreensApp()\n        # using `wait_for_dismiss` outside of a worker should raise NoActiveWorker\n        with pytest.raises(NoActiveWorker):\n>           async with app.run_test() as pilot:\n\ntests/test_screens.py:498: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3254: in _on_key\n    if not (await self._check_bindings(event.key)):\nsrc/textual/app.py:3020: in _check_bindings\n    if await self.run_action(binding.action, namespace):\nsrc/textual/app.py:3156: in run_action\n    return await self._dispatch_action(action_target, action_name, params)\nsrc/textual/app.py:3189: in _dispatch_action\n    await invoke(public_method, *params)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_screens.py:492: in action_exit\n    result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ScreensApp(title='ScreensApp', classes={'-dark-mode'})\nscreen = QuitScreen(), callback = None, wait_for_dismiss = True\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n>           if not get_current_worker(self.app):\nE           TypeError: get_current_worker() takes 0 positional arguments but 1 was given\n\nsrc/textual/app.py:2102: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:492 in action_exit         \u2502\n\u2502                                                                              \u2502\n\u2502   489 \u2502   \u2502   BINDINGS = [(\"x\", \"exit\")]                                     \u2502\n\u2502   490 \u2502   \u2502                                                                  \u2502\n\u2502   491 \u2502   \u2502   async def action_exit(self) -> None:                           \u2502\n\u2502 \u2771 492 \u2502   \u2502   \u2502   result = await self.push_screen(QuitScreen(), wait_for_dis \u2502\n\u2502   493 \u2502   \u2502   \u2502   results.append(result)                                     \u2502\n\u2502   494 \u2502                                                                      \u2502\n\u2502   495 \u2502   app = ScreensApp()                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 QuitScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_screens.test_push_screen_wait_for_dismiss_no_w\u2026 \u2502 \u2502\n\u2502 \u2502    results = []                                                          \u2502 \u2502\n\u2502 \u2502       self = ScreensApp(title='ScreensApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2102 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2099 \u2502   \u2502   from .worker import NoActiveWorker                            \u2502\n\u2502   2100 \u2502   \u2502                                                                 \u2502\n\u2502   2101 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502 \u2771 2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502   2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>               \u2502 \u2502\n\u2502 \u2502           screen = QuitScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = ScreensApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ScreensApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = True                                                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: get_current_worker() takes 0 positional arguments but 1 was given\n_______________ test_screen_sub_title_reactive_updates_sub_title _______________\n\n    async def test_screen_sub_title_reactive_updates_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.screen.sub_title = \"new screen sub-title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"new screen sub-title\"\n\ntests/test_header.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_sub_title_reactive_updates_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:125: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:125 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   122 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502   123 \u2502   \u2502                                                                  \u2502\n\u2502   124 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 125 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   126 \u2502                                                                      \u2502\n\u2502   127 \u2502   app = MyApp()                                                      \u2502\n\u2502   128 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_sub_title_reactive_updates_su\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_____________ test_screen_pushing_and_popping_does_not_reparse_css _____________\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n        async with app.run_test() as pilot:\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n            await pilot.press(\"p\")\n            await pilot.press(\"o\")\n>           assert counter == 1\nE           assert 0 == 1\n\ntests/css/test_screen_css.py:103: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_pushing_and_popping_does_not_reparse_css():\n        \"\"\"Check that pushing and popping the same screen doesn't trigger CSS reparses.\"\"\"\n    \n        class MyApp(BaseApp):\n            def key_p(self):\n                self.push_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        counter = 0\n    \n        def reparse_wrapper(reparse):\n            def _reparse(*args, **kwargs):\n                nonlocal counter\n                counter += 1\n                return reparse(*args, **kwargs)\n    \n            return _reparse\n    \n        app = MyApp()\n        app.stylesheet.reparse = reparse_wrapper(app.stylesheet.reparse)\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_____________ test_auto_focus_on_screen_if_app_auto_focus_is_none ______________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_none():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = None\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n______________________________ test_compose_order ______________________________\n\n    async def test_compose_order() -> None:\n        from textual.containers import Horizontal\n        from textual.screen import Screen\n        from textual.widgets import Select\n    \n        class MyScreen(Screen):\n            def on_mount(self) -> None:\n                self.query_one(Select).value = 1\n    \n            def compose(self) -> ComposeResult:\n                yield Horizontal(\n                    Select(((str(n), n) for n in range(10)), id=\"select\"),\n                    id=\"screen-horizontal\",\n                )\n    \n        class SelectBugApp(App[None]):\n            async def on_mount(self):\n                await self.push_screen(MyScreen(id=\"my-screen\"))\n                self.query_one(Select)\n    \n        app = SelectBugApp()\n        messages: list[Message] = []\n    \n>       async with app.run_test(message_hook=messages.append) as pilot:\n\ntests/test_widget.py:293: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_widget.py:287: in on_mount\n    await self.push_screen(MyScreen(id=\"my-screen\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SelectBugApp(title='SelectBugApp', classes={'-dark-mode'})\nscreen = MyScreen(id='my-screen'), callback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'SelectBugApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_widget.py:287 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   284 \u2502                                                                      \u2502\n\u2502   285 \u2502   class SelectBugApp(App[None]):                                     \u2502\n\u2502   286 \u2502   \u2502   async def on_mount(self):                                      \u2502\n\u2502 \u2771 287 \u2502   \u2502   \u2502   await self.push_screen(MyScreen(id=\"my-screen\"))           \u2502\n\u2502   288 \u2502   \u2502   \u2502   self.query_one(Select)                                     \u2502\n\u2502   289 \u2502                                                                      \u2502\n\u2502   290 \u2502   app = SelectBugApp()                                               \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_widget.test_compose_order.<locals>.MyScreen'>     \u2502 \u2502\n\u2502 \u2502   Select = <class 'textual.widgets._select.Select'>                      \u2502 \u2502\n\u2502 \u2502     self = SelectBugApp(title='SelectBugApp', classes={'-dark-mode'})    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>               \u2502 \u2502\n\u2502 \u2502           screen = MyScreen(id='my-screen')                              \u2502 \u2502\n\u2502 \u2502             self = SelectBugApp(                                         \u2502 \u2502\n\u2502 \u2502                    \u2502   title='SelectBugApp',                             \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'SelectBugApp' object has no attribute '_push_screen'\n________________ test_screen_sub_title_overrides_app_sub_title _________________\n\n    async def test_screen_sub_title_overrides_app_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"screen sub-title\"\n\ntests/test_header.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_sub_title_overrides_app_sub_title():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:107: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:107 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   104 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502   105 \u2502   \u2502                                                                  \u2502\n\u2502   106 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 107 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   108 \u2502                                                                      \u2502\n\u2502   109 \u2502   app = MyApp()                                                      \u2502\n\u2502   110 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_sub_title_overrides_app_sub_t\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_________________ test_screen_css_push_screen_instance_by_name _________________\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_push_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:138: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert len(app.screen._result_callbacks) == 1\nE           AssertionError: assert 0 == 1\nE            +  where 0 = len([])\nE            +    where [] = Screen(id='_default')._result_callbacks\nE            +      where Screen(id='_default') = MyApp(title='MyApp', classes={'-dark-mode'}).screen\n\ntests/test_screens.py:371: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:370: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:367: in on_mount\n    self.push_screen(\"a\", self.callback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'a'\ncallback = <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})>\nwait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:367 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   364 \u2502   \u2502   \u2502   return 42                                                  \u2502\n\u2502   365 \u2502   \u2502                                                                  \u2502\n\u2502   366 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 367 \u2502   \u2502   \u2502   self.push_screen(\"a\", self.callback)                       \u2502\n\u2502   368 \u2502                                                                      \u2502\n\u2502   369 \u2502   app = MyApp()                                                      \u2502\n\u2502   370 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = <bound method                                         \u2502 \u2502\n\u2502 \u2502                    test_switch_screen_updates_results_callback_stack.<l\u2026 \u2502 \u2502\n\u2502 \u2502                    of MyApp(title='MyApp', classes={'-dark-mode'})>      \u2502 \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>               \u2502 \u2502\n\u2502 \u2502           screen = 'a'                                                   \u2502 \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'})          \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n______________________ test_push_screen_wait_for_dismiss _______________________\n\n    async def test_push_screen_wait_for_dismiss() -> None:\n        \"\"\"Test push_screen returns result.\"\"\"\n    \n        class QuitScreen(Screen[bool]):\n            BINDINGS = [\n                (\"y\", \"quit(True)\"),\n                (\"n\", \"quit(False)\"),\n            ]\n    \n            def action_quit(self, quit: bool) -> None:\n                self.dismiss(quit)\n    \n        results: list[bool] = []\n    \n        class ScreensApp(App):\n            BINDINGS = [(\"x\", \"exit\")]\n    \n            @work\n            async def action_exit(self) -> None:\n                result = await self.push_screen(QuitScreen(), wait_for_dismiss=True)\n                results.append(result)\n    \n        app = ScreensApp()\n        # Press X to exit, then Y to dismiss, expect True result\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:462: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ScreensApp(title='ScreensApp', classes={'-dark-mode'})\n\n    @asynccontextmanager\n    async def run_test(\n        self,\n        *,\n        headless: bool = True,\n        size: tuple[int, int] | None = (80, 24),\n        tooltips: bool = False,\n        notifications: bool = False,\n        message_hook: Callable[[Message], None] | None = None,\n    ) -> AsyncGenerator[Pilot[ReturnType], None]:\n        \"\"\"An asynchronous context manager for testing apps.\n    \n        !!! tip\n    \n            See the guide for [testing](/guide/testing) Textual apps.\n    \n        Use this to run your app in \"headless\" mode (no output) and drive the app via a [Pilot][textual.pilot.Pilot] object.\n    \n        Example:\n    \n            ```python\n            async with app.run_test() as pilot:\n                await pilot.click(\"#Button.ok\")\n                assert ...\n            ```\n    \n        Args:\n            headless: Run in headless mode (no output or input).\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            tooltips: Enable tooltips when testing.\n            notifications: Enable notifications when testing.\n            message_hook: An optional callback that will be called each time any message arrives at any\n                message pump in the app.\n        \"\"\"\n        from .pilot import Pilot\n    \n        app = self\n        app._disable_tooltips = not tooltips\n        app._disable_notifications = not notifications\n        app_ready_event = asyncio.Event()\n    \n        def on_app_ready() -> None:\n            \"\"\"Called when app is ready to process events.\"\"\"\n            app_ready_event.set()\n    \n        async def run_app(app: App) -> None:\n            if message_hook is not None:\n                message_hook_context_var.set(message_hook)\n            app._loop = asyncio.get_running_loop()\n            app._thread_id = threading.get_ident()\n            await app._process_messages(\n                ready_callback=on_app_ready,\n                headless=headless,\n                terminal_size=size,\n            )\n    \n        # Launch the app in the \"background\"\n        active_message_pump.set(app)\n        app_task = create_task(run_app(app), name=f\"run_test {app}\")\n    \n        # Wait until the app has performed all startup routines.\n        await app_ready_event.wait()\n    \n        # Get the app in an active state.\n        app._set_active()\n    \n        # Context manager returns pilot object to manipulate the app\n        try:\n            pilot = Pilot(app)\n            await pilot._wait_for_screen()\n            yield pilot\n        finally:\n            # Shutdown the app cleanly\n            await app._shutdown()\n            await app_task\n            # Re-raise the exception which caused panic so test frameworks are aware\n            if self._exception:\n>               raise self._exception\nE               textual.worker.WorkerFailed: Worker raised exception: TypeError('get_current_worker() takes 0 positional arguments but 1 was given')\n\nsrc/textual/app.py:1492: WorkerFailed\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:365 in _run                \u2502\n\u2502                                                                              \u2502\n\u2502   362 \u2502   \u2502   self.state = WorkerState.RUNNING                               \u2502\n\u2502   363 \u2502   \u2502   app.log.worker(self)                                           \u2502\n\u2502   364 \u2502   \u2502   try:                                                           \u2502\n\u2502 \u2771 365 \u2502   \u2502   \u2502   self._result = await self.run()                            \u2502\n\u2502   366 \u2502   \u2502   except asyncio.CancelledError as error:                        \u2502\n\u2502   367 \u2502   \u2502   \u2502   self.state = WorkerState.CANCELLED                         \u2502\n\u2502   368 \u2502   \u2502   \u2502   self._error = error                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502           app = ScreensApp(title='ScreensApp', classes={'-dark-mode'})   \u2502 \u2502\n\u2502 \u2502         error = TypeError('get_current_worker() takes 0 positional       \u2502 \u2502\n\u2502 \u2502                 arguments but 1 was given')                              \u2502 \u2502\n\u2502 \u2502          self = <Worker                                                  \u2502 \u2502\n\u2502 \u2502                 \u2502   ERROR                                                \u2502 \u2502\n\u2502 \u2502                 \u2502   name='action_exit'                                   \u2502 \u2502\n\u2502 \u2502                 \u2502   description='action_exit()'                          \u2502 \u2502\n\u2502 \u2502                 >                                                        \u2502 \u2502\n\u2502 \u2502     Traceback = <class 'rich.traceback.Traceback'>                       \u2502 \u2502\n\u2502 \u2502 worker_failed = WorkerFailed(\"Worker raised exception:                   \u2502 \u2502\n\u2502 \u2502                 TypeError('get_current_worker() takes 0 positional       \u2502 \u2502\n\u2502 \u2502                 arguments but 1 was given')\")                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:349 in run                 \u2502\n\u2502                                                                              \u2502\n\u2502   346 \u2502   \u2502   Returns:                                                       \u2502\n\u2502   347 \u2502   \u2502   \u2502   Return value of the work.                                  \u2502\n\u2502   348 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502 \u2771 349 \u2502   \u2502   return await (                                                 \u2502\n\u2502   350 \u2502   \u2502   \u2502   self._run_threaded() if self._thread_worker else self._run \u2502\n\u2502   351 \u2502   \u2502   )                                                              \u2502\n\u2502   352                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u2502\n\u2502 \u2502 self = <Worker ERROR name='action_exit' description='action_exit()'> \u2502     \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/worker.py:334 in _run_async          \u2502\n\u2502                                                                              \u2502\n\u2502   331 \u2502   \u2502   \u2502   or hasattr(self._work, \"func\")                             \u2502\n\u2502   332 \u2502   \u2502   \u2502   and inspect.iscoroutinefunction(self._work.func)           \u2502\n\u2502   333 \u2502   \u2502   ):                                                             \u2502\n\u2502 \u2771 334 \u2502   \u2502   \u2502   return await self._work()                                  \u2502\n\u2502   335 \u2502   \u2502   elif inspect.isawaitable(self._work):                          \u2502\n\u2502   336 \u2502   \u2502   \u2502   return await self._work                                    \u2502\n\u2502   337 \u2502   \u2502   elif callable(self._work):                                     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e     \u2502\n\u2502 \u2502 self = <Worker ERROR name='action_exit' description='action_exit()'> \u2502     \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f     \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:457 in action_exit         \u2502\n\u2502                                                                              \u2502\n\u2502   454 \u2502   \u2502                                                                  \u2502\n\u2502   455 \u2502   \u2502   @work                                                          \u2502\n\u2502   456 \u2502   \u2502   async def action_exit(self) -> None:                           \u2502\n\u2502 \u2771 457 \u2502   \u2502   \u2502   result = await self.push_screen(QuitScreen(), wait_for_dis \u2502\n\u2502   458 \u2502   \u2502   \u2502   results.append(result)                                     \u2502\n\u2502   459 \u2502                                                                      \u2502\n\u2502   460 \u2502   app = ScreensApp()                                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 QuitScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_screens.test_push_screen_wait_for_dismiss.<loc\u2026 \u2502 \u2502\n\u2502 \u2502    results = []                                                          \u2502 \u2502\n\u2502 \u2502       self = ScreensApp(title='ScreensApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2102 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2099 \u2502   \u2502   from .worker import NoActiveWorker                            \u2502\n\u2502   2100 \u2502   \u2502                                                                 \u2502\n\u2502   2101 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502 \u2771 2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502   2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>               \u2502 \u2502\n\u2502 \u2502           screen = QuitScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = ScreensApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ScreensApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = True                                                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: get_current_worker() takes 0 positional arguments but 1 was given\n___________________ test_screen_title_reactive_updates_title ___________________\n\n    async def test_screen_title_reactive_updates_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.screen.title = \"new screen title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").text == \"new screen title\"\n\ntests/test_header.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_title_reactive_updates_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:51: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:51 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    48 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    49 \u2502   \u2502                                                                  \u2502\n\u2502    50 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  51 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    52 \u2502                                                                      \u2502\n\u2502    53 \u2502   app = MyApp()                                                      \u2502\n\u2502    54 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_title_reactive_updates_title.\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>          \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_________________________ test_auto_focus_inheritance __________________________\n\n    async def test_auto_focus_inheritance():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            pass\n    \n        app = MyApp()\n        async with app.run_test():\n            MyApp.AUTO_FOCUS = \"Input\"\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n____________________ test_screen_receives_mouse_move_events ____________________\n\n    async def test_screen_receives_mouse_move_events():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        mouse_offset = Offset(1, 1)\n    \n>       async with SimpleApp().run_test() as pilot:\n\ntests/test_screens.py:394: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:390: in on_mount\n    self.push_screen(\"a\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SimpleApp(title='SimpleApp', classes={'-dark-mode'}), screen = 'a'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'SimpleApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:390 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   387 \u2502   \u2502   SCREENS = {\"a\": MouseMoveRecordingScreen()}                    \u2502\n\u2502   388 \u2502   \u2502                                                                  \u2502\n\u2502   389 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 390 \u2502   \u2502   \u2502   self.push_screen(\"a\")                                      \u2502\n\u2502   391 \u2502                                                                      \u2502\n\u2502   392 \u2502   mouse_offset = Offset(1, 1)                                        \u2502\n\u2502   393                                                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e              \u2502\n\u2502 \u2502 self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502              \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f              \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e  \u2502\n\u2502 \u2502         callback = None                                                 \u2502  \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>              \u2502  \u2502\n\u2502 \u2502           screen = 'a'                                                  \u2502  \u2502\n\u2502 \u2502             self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502  \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                \u2502  \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'SimpleApp' object has no attribute '_push_screen'\n_______________________________ test_focus_chain _______________________________\n\n    def test_focus_chain():\n        app = App()\n        app._set_active()\n>       app.push_screen(Screen())\n\ntests/test_focus.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'App' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n>       await app.push_screen(\"screen1\")\n\ntests/test_screens.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = App(title='App', classes={'-dark-mode'}), screen = 'screen1'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'App' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n_________________________ test_dismiss_non_top_screen __________________________\n\n    async def test_dismiss_non_top_screen():\n        class MyApp(App[None]):\n            async def key_p(self) -> None:\n                self.bottom = Screen()\n                top = Screen()\n                await self.push_screen(self.bottom)\n                await self.push_screen(top)\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_screens.py:302: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:589: in _process_messages_loop\n    await self._dispatch_message(message)\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:3255: in _on_key\n    await self.dispatch_key(event)\nsrc/textual/message_pump.py:850: in dispatch_key\n    handled = (await invoke(key_method, event)) is not False\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_screens.py:298: in key_p\n    await self.push_screen(self.bottom)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = Screen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:298 in key_p               \u2502\n\u2502                                                                              \u2502\n\u2502   295 \u2502   \u2502   async def key_p(self) -> None:                                 \u2502\n\u2502   296 \u2502   \u2502   \u2502   self.bottom = Screen()                                     \u2502\n\u2502   297 \u2502   \u2502   \u2502   top = Screen()                                             \u2502\n\u2502 \u2771 298 \u2502   \u2502   \u2502   await self.push_screen(self.bottom)                        \u2502\n\u2502   299 \u2502   \u2502   \u2502   await self.push_screen(top)                                \u2502\n\u2502   300 \u2502                                                                      \u2502\n\u2502   301 \u2502   app = MyApp()                                                      \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2502  top = Screen()                                     \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = Screen()                                     \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_________________________________ test_unmount _________________________________\n\n    async def test_unmount():\n        \"\"\"Test unmount events are received in reverse DOM order.\"\"\"\n        unmount_ids: list[str] = []\n    \n        class UnmountWidget(Container):\n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(\n                    f\"{self.__class__.__name__}#{self.id}-{self.parent is not None}-{len(self._nodes)}\"\n                )\n    \n        class MyScreen(Screen):\n            def compose(self) -> ComposeResult:\n                yield UnmountWidget(\n                    UnmountWidget(\n                        UnmountWidget(id=\"bar1\"), UnmountWidget(id=\"bar2\"), id=\"bar\"\n                    ),\n                    UnmountWidget(\n                        UnmountWidget(id=\"baz1\"), UnmountWidget(id=\"baz2\"), id=\"baz\"\n                    ),\n                    id=\"top\",\n                )\n    \n            def on_unmount(self, event: events.Unmount):\n                unmount_ids.append(f\"{self.__class__.__name__}#{self.id}\")\n    \n        class UnmountApp(App):\n            async def on_mount(self) -> None:\n                await self.push_screen(MyScreen(id=\"main\"))\n    \n        app = UnmountApp()\n>       async with app.run_test() as pilot:\n\ntests/test_unmount.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\ntests/test_unmount.py:36: in on_mount\n    await self.push_screen(MyScreen(id=\"main\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = UnmountApp(title='UnmountApp', classes={'-dark-mode'})\nscreen = MyScreen(id='main'), callback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'UnmountApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_unmount.py:36 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   33 \u2502                                                                       \u2502\n\u2502   34 \u2502   class UnmountApp(App):                                              \u2502\n\u2502   35 \u2502   \u2502   async def on_mount(self) -> None:                               \u2502\n\u2502 \u2771 36 \u2502   \u2502   \u2502   await self.push_screen(MyScreen(id=\"main\"))                 \u2502\n\u2502   37 \u2502                                                                       \u2502\n\u2502   38 \u2502   app = UnmountApp()                                                  \u2502\n\u2502   39 \u2502   async with app.run_test() as pilot:                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e   \u2502\n\u2502 \u2502 MyScreen = <class 'tests.test_unmount.test_unmount.<locals>.MyScreen'> \u2502   \u2502\n\u2502 \u2502     self = UnmountApp(title='UnmountApp', classes={'-dark-mode'})      \u2502   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>               \u2502 \u2502\n\u2502 \u2502           screen = MyScreen(id='main')                                   \u2502 \u2502\n\u2502 \u2502             self = UnmountApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='UnmountApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'UnmountApp' object has no attribute '_push_screen'\n_ test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set _\n\n    async def test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.sub_title = \"new app sub-title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").sub_text == \"screen sub-title\"\n\ntests/test_header.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set():\n        class MyScreen(Screen):\n            SUB_TITLE = \"screen sub-title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            SUB_TITLE = \"app sub-title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:148: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:145: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:145 in on_mount             \u2502\n\u2502                                                                              \u2502\n\u2502   142 \u2502   \u2502   SUB_TITLE = \"app sub-title\"                                    \u2502\n\u2502   143 \u2502   \u2502                                                                  \u2502\n\u2502   144 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 145 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   146 \u2502                                                                      \u2502\n\u2502   147 \u2502   app = MyApp()                                                      \u2502\n\u2502   148 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_app_sub_title_reactive_does_not_upda\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_____________ test_mouse_move_event_bubbles_to_screen_from_widget ______________\n\n    async def test_mouse_move_event_bubbles_to_screen_from_widget():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            DEFAULT_CSS = \"\"\"\n            Label {\n                offset: 10 10;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield Label(\"Any label\")\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        label_offset = Offset(10, 10)\n        mouse_offset = Offset(1, 1)\n    \n        async with SimpleApp().run_test() as pilot:\n>           await pilot.hover(Label, mouse_offset)\n\ntests/test_screens.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/pilot.py:271: in hover\n    return await self._post_mouse_events(\nsrc/textual/pilot.py:317: in _post_mouse_events\n    target_widget = app.query_one(selector)\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='Label'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='Label'> on SimpleApp(title='SimpleApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_mouse_move_event_bubbles_to_screen_from_widget():\n        class MouseMoveRecordingScreen(Screen):\n            mouse_events = []\n    \n            DEFAULT_CSS = \"\"\"\n            Label {\n                offset: 10 10;\n            }\n            \"\"\"\n    \n            def compose(self) -> ComposeResult:\n                yield Label(\"Any label\")\n    \n            def on_mouse_move(self, event: MouseMove) -> None:\n                MouseMoveRecordingScreen.mouse_events.append(event)\n    \n        class SimpleApp(App[None]):\n            SCREENS = {\"a\": MouseMoveRecordingScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"a\")\n    \n        label_offset = Offset(10, 10)\n        mouse_offset = Offset(1, 1)\n    \n>       async with SimpleApp().run_test() as pilot:\n\ntests/test_screens.py:427: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:422: in on_mount\n    self.push_screen(\"a\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SimpleApp(title='SimpleApp', classes={'-dark-mode'}), screen = 'a'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'SimpleApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:422 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   419 \u2502   \u2502   SCREENS = {\"a\": MouseMoveRecordingScreen()}                    \u2502\n\u2502   420 \u2502   \u2502                                                                  \u2502\n\u2502   421 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 422 \u2502   \u2502   \u2502   self.push_screen(\"a\")                                      \u2502\n\u2502   423 \u2502                                                                      \u2502\n\u2502   424 \u2502   label_offset = Offset(10, 10)                                      \u2502\n\u2502   425 \u2502   mouse_offset = Offset(1, 1)                                        \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e              \u2502\n\u2502 \u2502 self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502              \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f              \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e  \u2502\n\u2502 \u2502         callback = None                                                 \u2502  \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>              \u2502  \u2502\n\u2502 \u2502           screen = 'a'                                                  \u2502  \u2502\n\u2502 \u2502             self = SimpleApp(title='SimpleApp', classes={'-dark-mode'}) \u2502  \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                \u2502  \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'SimpleApp' object has no attribute '_push_screen'\n____ test_app_title_reactive_does_not_update_title_when_screen_title_is_set ____\n\n    async def test_app_title_reactive_does_not_update_title_when_screen_title_is_set():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n            app.title = \"new app title\"\n            await pilot.pause()\n>           assert app.query_one(\"HeaderTitle\").text == \"screen title\"\n\ntests/test_header.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='new app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_app_title_reactive_does_not_update_title_when_screen_title_is_set():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/test_header.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:71: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='new app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:71 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    68 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    69 \u2502   \u2502                                                                  \u2502\n\u2502    70 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  71 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    72 \u2502                                                                      \u2502\n\u2502    73 \u2502   app = MyApp()                                                      \u2502\n\u2502    74 \u2502   async with app.run_test() as pilot:                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_app_title_reactive_does_not_update_t\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>          \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n___________________________ test_switch_screen_no_op ___________________________\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n        async with app.run_test():\n            screen_id = id(app.screen)\n>           app.switch_screen(\"screen\")\n\ntests/test_screens.py:342: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:2158: in switch_screen\n    top_screen._pop_result_callback()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default')\n\n    def _pop_result_callback(self) -> None:\n        \"\"\"Remove the latest result callback from the stack.\"\"\"\n>       self._result_callbacks.pop()\nE       IndexError: pop from empty list\n\nsrc/textual/screen.py:899: IndexError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_switch_screen_no_op():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class MyScreen(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\"screen\": MyScreen()}\n    \n            def on_mount(self):\n                self.push_screen(\"screen\")\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:337: in on_mount\n    self.push_screen(\"screen\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = 'screen'\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:337 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   334 \u2502   \u2502   SCREENS = {\"screen\": MyScreen()}                               \u2502\n\u2502   335 \u2502   \u2502                                                                  \u2502\n\u2502   336 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 337 \u2502   \u2502   \u2502   self.push_screen(\"screen\")                                 \u2502\n\u2502   338 \u2502                                                                      \u2502\n\u2502   339 \u2502   app = MyApp()                                                      \u2502\n\u2502   340 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = 'screen'                                     \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_________________ test_auto_focus_skips_non_focusable_widgets __________________\n\n    async def test_auto_focus_skips_non_focusable_widgets():\n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Label()\n                yield Button()\n    \n        class MyApp(App[None]):\n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.focused is not None\nE           AssertionError: assert None is not None\nE            +  where None = MyApp(title='MyApp', classes={'-dark-mode'}).focused\n\ntests/test_screens.py:289: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_auto_focus_skips_non_focusable_widgets():\n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Label()\n                yield Button()\n    \n        class MyApp(App[None]):\n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_screens.py:285: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_screens.py:285 in on_mount            \u2502\n\u2502                                                                              \u2502\n\u2502   282 \u2502                                                                      \u2502\n\u2502   283 \u2502   class MyApp(App[None]):                                            \u2502\n\u2502   284 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771 285 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502   286 \u2502                                                                      \u2502\n\u2502   287 \u2502   app = MyApp()                                                      \u2502\n\u2502   288 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_screens.test_auto_focus_skips_non_focusable_widg\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='MyApp', classes={'-dark-mode'})                  \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = MyScreen()                                   \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n___________________ test_screen_css_push_screen_type_by_name ___________________\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n        async with app.run_test() as pilot:\n>           check_colors_before_screen_css(app)\n\ntests/css/test_screen_css.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/css/test_screen_css.py:61: in check_colors_before_screen_css\n    assert app.query_one(\"#app-css\").styles.background == GREEN\nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='#app-css'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='#app-css'> on MyApp(title='MyApp', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_css_push_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when pushing a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(BaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            def key_p(self):\n                self.push_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/css/test_screen_css.py:50: in on_mount\n    self.push_screen(BaseScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = BaseScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/css/test_screen_css.py:50 in on_mount      \u2502\n\u2502                                                                              \u2502\n\u2502    47 \u2502   \"\"\"                                                                \u2502\n\u2502    48 \u2502                                                                      \u2502\n\u2502    49 \u2502   def on_mount(self):                                                \u2502\n\u2502 \u2771  50 \u2502   \u2502   self.push_screen(BaseScreen())                                 \u2502\n\u2502    51                                                                        \u2502\n\u2502    52                                                                        \u2502\n\u2502    53 class SwitchBaseApp(BaseApp):                                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                      \u2502\n\u2502 \u2502 self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502                      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                      \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e          \u2502\n\u2502 \u2502         callback = None                                         \u2502          \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>      \u2502          \u2502\n\u2502 \u2502           screen = BaseScreen()                                 \u2502          \u2502\n\u2502 \u2502             self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502          \u2502\n\u2502 \u2502 wait_for_dismiss = False                                        \u2502          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n_________________ test_pilot_exception_catching_widget_compose _________________\n\n    async def test_pilot_exception_catching_widget_compose():\n        class SomeScreen(Screen[None]):\n            def compose(self) -> ComposeResult:\n                1 / 0\n                yield Label(\"Beep\")\n    \n        class FailingApp(App[None]):\n            def on_mount(self) -> None:\n                self.push_screen(SomeScreen())\n    \n        with pytest.raises(ZeroDivisionError):\n>           async with FailingApp().run_test():\n\ntests/test_pilot.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_pilot.py:83: in on_mount\n    self.push_screen(SomeScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = FailingApp(title='FailingApp', classes={'-dark-mode'})\nscreen = SomeScreen(), callback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'FailingApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_pilot.py:83 in on_mount               \u2502\n\u2502                                                                              \u2502\n\u2502    80 \u2502                                                                      \u2502\n\u2502    81 \u2502   class FailingApp(App[None]):                                       \u2502\n\u2502    82 \u2502   \u2502   def on_mount(self) -> None:                                    \u2502\n\u2502 \u2771  83 \u2502   \u2502   \u2502   self.push_screen(SomeScreen())                             \u2502\n\u2502    84 \u2502                                                                      \u2502\n\u2502    85 \u2502   with pytest.raises(ZeroDivisionError):                             \u2502\n\u2502    86 \u2502   \u2502   async with FailingApp().run_test():                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502       self = FailingApp(title='FailingApp', classes={'-dark-mode'})      \u2502 \u2502\n\u2502 \u2502 SomeScreen = <class                                                      \u2502 \u2502\n\u2502 \u2502              'tests.test_pilot.test_pilot_exception_catching_widget_com\u2026 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         callback = None                                                  \u2502 \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>               \u2502 \u2502\n\u2502 \u2502           screen = SomeScreen()                                          \u2502 \u2502\n\u2502 \u2502             self = FailingApp(                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   title='FailingApp',                               \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502 wait_for_dismiss = False                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'FailingApp' object has no attribute '_push_screen'\n___________ test_auto_focus_on_screen_if_app_auto_focus_is_disabled ____________\n\n    async def test_auto_focus_on_screen_if_app_auto_focus_is_disabled():\n        \"\"\"Setting app.AUTO_FOCUS = `None` means it is not taken into consideration.\"\"\"\n    \n        class MyScreen(Screen[None]):\n            def compose(self):\n                yield Button()\n                yield Input(id=\"one\")\n                yield Input(id=\"two\")\n    \n        class MyApp(App[None]):\n            AUTO_FOCUS = \"\"\n    \n        app = MyApp()\n        async with app.run_test():\n            MyScreen.AUTO_FOCUS = \"*\"\n>           await app.push_screen(MyScreen())\n\ntests/test_screens.py:218: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='MyApp', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n____________________ test_screen_title_overrides_app_title _____________________\n\n    async def test_screen_title_overrides_app_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n        async with app.run_test():\n>           assert app.query_one(\"HeaderTitle\").text == \"screen title\"\n\ntests/test_header.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/dom.py:1347: in query_one\n    return query.only_one() if expect_type is None else query.only_one(expect_type)\nsrc/textual/css/query.py:278: in only_one\n    self.first(expect_type) if expect_type is not None else self.first()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DOMQuery query='HeaderTitle'>, expect_type = None\n\n    def first(\n        self, expect_type: type[ExpectType] | None = None\n    ) -> QueryType | ExpectType:\n        \"\"\"Get the *first* matching node.\n    \n        Args:\n            expect_type: Require matched node is of this type,\n                or None for any type.\n    \n        Raises:\n            WrongType: If the wrong type was found.\n            NoMatches: If there are no matching nodes in the query.\n    \n        Returns:\n            The matching Widget.\n        \"\"\"\n        _rich_traceback_omit = True\n        if self.nodes:\n            first = self.nodes[0]\n            if expect_type is not None:\n                if not isinstance(first, expect_type):\n                    raise WrongType(\n                        f\"Query value is wrong type; expected {expect_type}, got {type(first)}\"\n                    )\n            return first\n        else:\n>           raise NoMatches(f\"No nodes match {self!r} on {self.node!r}\")\nE           textual.css.query.NoMatches: No nodes match <DOMQuery query='HeaderTitle'> on MyApp(title='app title', classes={'-dark-mode'})\n\nsrc/textual/css/query.py:247: NoMatches\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_screen_title_overrides_app_title():\n        class MyScreen(Screen):\n            TITLE = \"screen title\"\n    \n            def compose(self):\n                yield Header()\n    \n        class MyApp(App):\n            TITLE = \"app title\"\n    \n            def on_mount(self):\n                self.push_screen(MyScreen())\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_header.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2564: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2511: in run_process_messages\n    await self._dispatch_message(events.Mount())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3084: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:45: in _invoke\n    result = callback(*params[:parameter_count])\ntests/test_header.py:33: in on_mount\n    self.push_screen(MyScreen())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyApp(title='app title', classes={'-dark-mode'}), screen = MyScreen()\ncallback = None, wait_for_dismiss = False\n\n    def push_screen(\n        self,\n        screen: Screen[ScreenResultType] | str,\n        callback: ScreenResultCallbackType[ScreenResultType] | None = None,\n        wait_for_dismiss: bool = False,\n    ) -> AwaitMount | asyncio.Future[ScreenResultType]:\n        \"\"\"Push a new [screen](/guide/screens) on the screen stack, making it the current screen.\n    \n        Args:\n            screen: A Screen instance or the name of an installed screen.\n            callback: An optional callback function that will be called if the screen is [dismissed][textual.screen.Screen.dismiss] with a result.\n            wait_for_dismiss: If `True`, awaiting this method will return the dismiss value from the screen. When set to `False`, awaiting\n                this method will wait for the screen to be mounted. Note that `wait_for_dismiss` should only be set to `True` when running in a worker.\n    \n        Raises:\n            NoActiveWorker: If using `wait_for_dismiss` outside of a worker.\n    \n        Returns:\n            An optional awaitable that awaits the mounting of the screen and its children, or an asyncio Future\n                to await the result of the screen.\n        \"\"\"\n        from .worker import NoActiveWorker\n    \n        if wait_for_dismiss:\n            if not get_current_worker(self.app):\n                raise NoActiveWorker(\"Can't wait for dismiss outside of a worker\")\n    \n>       await_mount = self._push_screen(screen, callback)\nE       AttributeError: 'MyApp' object has no attribute '_push_screen'. Did you mean: 'push_screen'?\n\nsrc/textual/app.py:2105: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/tests/test_header.py:33 in on_mount              \u2502\n\u2502                                                                              \u2502\n\u2502    30 \u2502   \u2502   TITLE = \"app title\"                                            \u2502\n\u2502    31 \u2502   \u2502                                                                  \u2502\n\u2502    32 \u2502   \u2502   def on_mount(self):                                            \u2502\n\u2502 \u2771  33 \u2502   \u2502   \u2502   self.push_screen(MyScreen())                               \u2502\n\u2502    34 \u2502                                                                      \u2502\n\u2502    35 \u2502   app = MyApp()                                                      \u2502\n\u2502    36 \u2502   async with app.run_test():                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 MyScreen = <class                                                        \u2502 \u2502\n\u2502 \u2502            'tests.test_header.test_screen_title_overrides_app_title.<lo\u2026 \u2502 \u2502\n\u2502 \u2502     self = MyApp(title='app title', classes={'-dark-mode'})              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2105 in push_screen           \u2502\n\u2502                                                                              \u2502\n\u2502   2102 \u2502   \u2502   \u2502   if not get_current_worker(self.app):                      \u2502\n\u2502   2103 \u2502   \u2502   \u2502   \u2502   raise NoActiveWorker(\"Can't wait for dismiss outside  \u2502\n\u2502   2104 \u2502   \u2502                                                                 \u2502\n\u2502 \u2771 2105 \u2502   \u2502   await_mount = self._push_screen(screen, callback)             \u2502\n\u2502   2106 \u2502   \u2502   if wait_for_dismiss:                                          \u2502\n\u2502   2107 \u2502   \u2502   \u2502   future: asyncio.Future[ScreenResultType] = asyncio.Future \u2502\n\u2502   2108 \u2502   \u2502   \u2502   await_mount.add_done_callback(lambda _: self._screen_resu \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e      \u2502\n\u2502 \u2502         callback = None                                             \u2502      \u2502\n\u2502 \u2502   NoActiveWorker = <class 'textual.worker.NoActiveWorker'>          \u2502      \u2502\n\u2502 \u2502           screen = MyScreen()                                       \u2502      \u2502\n\u2502 \u2502             self = MyApp(title='app title', classes={'-dark-mode'}) \u2502      \u2502\n\u2502 \u2502 wait_for_dismiss = False                                            \u2502      \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'MyApp' object has no attribute '_push_screen'\n=============================== warnings summary ===============================\ntests/test_header.py: 8 warnings\ntests/css/test_screen_css.py: 4 warnings\ntests/test_screens.py: 13 warnings\ntests/test_widget.py: 1 warning\ntests/test_unmount.py: 1 warning\ntests/test_pilot.py: 1 warning\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_header.py::test_screen_title_none_is_ignored\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_header.py::test_screen_title_none_is_ignored - AttributeErr...\nFAILED tests/test_focus.py::test_focus_next_and_previous_with_type_selector_without_self\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance - A...\nFAILED tests/test_focus.py::test_allow_focus - AttributeError: 'App' object h...\nFAILED tests/test_header.py::test_screen_sub_title_none_is_ignored - Attribut...\nFAILED tests/test_screens.py::test_dismiss_action - AttributeError: 'MyApp' o...\nFAILED tests/test_screens.py::test_push_screen_wait_for_dismiss_no_worker - T...\nFAILED tests/test_header.py::test_screen_sub_title_reactive_updates_sub_title\nFAILED tests/css/test_screen_css.py::test_screen_pushing_and_popping_does_not_reparse_css\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_none\nFAILED tests/test_widget.py::test_compose_order - AttributeError: 'SelectBugA...\nFAILED tests/test_header.py::test_screen_sub_title_overrides_app_sub_title - ...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_instance_by_name\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/test_screens.py::test_push_screen_wait_for_dismiss - textual.wor...\nFAILED tests/test_header.py::test_screen_title_reactive_updates_title - Attri...\nFAILED tests/test_screens.py::test_auto_focus_inheritance - AttributeError: '...\nFAILED tests/test_screens.py::test_screen_receives_mouse_move_events - Attrib...\nFAILED tests/test_focus.py::test_focus_chain - AttributeError: 'App' object h...\nFAILED tests/test_screens.py::test_screens - AttributeError: 'App' object has...\nFAILED tests/test_screens.py::test_dismiss_non_top_screen - AttributeError: '...\nFAILED tests/test_unmount.py::test_unmount - AttributeError: 'UnmountApp' obj...\nFAILED tests/test_header.py::test_app_sub_title_reactive_does_not_update_sub_title_when_screen_sub_title_is_set\nFAILED tests/test_screens.py::test_mouse_move_event_bubbles_to_screen_from_widget\nFAILED tests/test_header.py::test_app_title_reactive_does_not_update_title_when_screen_title_is_set\nFAILED tests/test_screens.py::test_switch_screen_no_op - AttributeError: 'MyA...\nFAILED tests/test_screens.py::test_auto_focus_skips_non_focusable_widgets - A...\nFAILED tests/css/test_screen_css.py::test_screen_css_push_screen_type_by_name\nFAILED tests/test_pilot.py::test_pilot_exception_catching_widget_compose - At...\nFAILED tests/test_screens.py::test_auto_focus_on_screen_if_app_auto_focus_is_disabled\nFAILED tests/test_header.py::test_screen_title_overrides_app_title - Attribut...\n======================= 31 failed, 29 warnings in 6.36s ========================\n\n"], "textual-src/textual/app.py-switch_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_screens.py .F                                                 [ 33%]\ntests/css/test_screen_css.py FF                                          [ 66%]\ntests/test_screens.py F                                                  [ 83%]\ntests/css/test_screen_css.py F                                           [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n>       await app.switch_screen(\"screen2\")\n\ntests/test_screens.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def switch() -> None:\n        \"\"\"Switch to the new screen.\"\"\"\n        if current_screen is not None:\n            await self._replace_screen(current_screen)\n        self._screen_stack.append(next_screen)\n        self._load_screen_css(next_screen)\n>       await self._register(self, next_screen)\nE       TypeError: object list can't be used in 'await' expression\n\nsrc/textual/app.py:2189: TypeError\n____________________ test_screen_css_switch_screen_instance ____________________\n\n    async def test_screen_css_switch_screen_instance():\n        \"\"\"Check that screen CSS is loaded and applied when switching to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            def key_p(self):\n                self.switch_screen(ScreenWithCSS())\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:178: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:628: in _flush_next_callbacks\n    await invoke(callback.callback)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/await_complete.py:34: in __call__\n    return await self\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def switch() -> None:\n        \"\"\"Switch to the new screen.\"\"\"\n        if current_screen is not None:\n            await self._replace_screen(current_screen)\n        self._screen_stack.append(next_screen)\n        self._load_screen_css(next_screen)\n>       await self._register(self, next_screen)\nE       TypeError: object list can't be used in 'await' expression\n\nsrc/textual/app.py:2189: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/await_complete.py:34 in __call__     \u2502\n\u2502                                                                              \u2502\n\u2502   31 \u2502   \u2502   return self                                                     \u2502\n\u2502   32 \u2502                                                                       \u2502\n\u2502   33 \u2502   async def __call__(self) -> Any:                                    \u2502\n\u2502 \u2771 34 \u2502   \u2502   return await self                                               \u2502\n\u2502   35 \u2502                                                                       \u2502\n\u2502   36 \u2502   def __await__(self) -> Generator[Any, None, Any]:                   \u2502\n\u2502   37 \u2502   \u2502   return self._future.__await__()                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502 self = <AwaitComplete> \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2189 in switch                \u2502\n\u2502                                                                              \u2502\n\u2502   2186 \u2502   \u2502   \u2502   \u2502   await self._replace_screen(current_screen)            \u2502\n\u2502   2187 \u2502   \u2502   \u2502   self._screen_stack.append(next_screen)                    \u2502\n\u2502   2188 \u2502   \u2502   \u2502   self._load_screen_css(next_screen)                        \u2502\n\u2502 \u2771 2189 \u2502   \u2502   \u2502   await self._register(self, next_screen)                   \u2502\n\u2502   2190 \u2502   \u2502   \u2502   next_screen.post_message(events.ScreenResume())           \u2502\n\u2502   2191 \u2502   \u2502   \u2502   self.log.system(f\"{next_screen} RESUMED\")                 \u2502\n\u2502   2192 \u2502   \u2502   \u2502   self.refresh()                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502 current_screen = BaseScreen()                                 \u2502            \u2502\n\u2502 \u2502    next_screen = ScreenWithCSS()                              \u2502            \u2502\n\u2502 \u2502           self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: object list can't be used in 'await' expression\n________________ test_screen_css_switch_screen_instance_by_name ________________\n\n    async def test_screen_css_switch_screen_instance_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen instance.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS()}\n    \n            def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:628: in _flush_next_callbacks\n    await invoke(callback.callback)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/await_complete.py:34: in __call__\n    return await self\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def switch() -> None:\n        \"\"\"Switch to the new screen.\"\"\"\n        if current_screen is not None:\n            await self._replace_screen(current_screen)\n        self._screen_stack.append(next_screen)\n        self._load_screen_css(next_screen)\n>       await self._register(self, next_screen)\nE       TypeError: object list can't be used in 'await' expression\n\nsrc/textual/app.py:2189: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/await_complete.py:34 in __call__     \u2502\n\u2502                                                                              \u2502\n\u2502   31 \u2502   \u2502   return self                                                     \u2502\n\u2502   32 \u2502                                                                       \u2502\n\u2502   33 \u2502   async def __call__(self) -> Any:                                    \u2502\n\u2502 \u2771 34 \u2502   \u2502   return await self                                               \u2502\n\u2502   35 \u2502                                                                       \u2502\n\u2502   36 \u2502   def __await__(self) -> Generator[Any, None, Any]:                   \u2502\n\u2502   37 \u2502   \u2502   return self._future.__await__()                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502 self = <AwaitComplete> \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2189 in switch                \u2502\n\u2502                                                                              \u2502\n\u2502   2186 \u2502   \u2502   \u2502   \u2502   await self._replace_screen(current_screen)            \u2502\n\u2502   2187 \u2502   \u2502   \u2502   self._screen_stack.append(next_screen)                    \u2502\n\u2502   2188 \u2502   \u2502   \u2502   self._load_screen_css(next_screen)                        \u2502\n\u2502 \u2771 2189 \u2502   \u2502   \u2502   await self._register(self, next_screen)                   \u2502\n\u2502   2190 \u2502   \u2502   \u2502   next_screen.post_message(events.ScreenResume())           \u2502\n\u2502   2191 \u2502   \u2502   \u2502   self.log.system(f\"{next_screen} RESUMED\")                 \u2502\n\u2502   2192 \u2502   \u2502   \u2502   self.refresh()                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502 current_screen = BaseScreen()                                 \u2502            \u2502\n\u2502 \u2502    next_screen = ScreenWithCSS()                              \u2502            \u2502\n\u2502 \u2502           self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: object list can't be used in 'await' expression\n______________ test_switch_screen_updates_results_callback_stack _______________\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n        async with app.run_test():\n            assert len(app.screen._result_callbacks) == 1\n            assert app.screen._result_callbacks[-1].callback(None) == 42\n    \n            app.switch_screen(\"b\")\n            assert len(app.screen._result_callbacks) == 1\n>           assert app.screen._result_callbacks[-1].callback is None\nE           AssertionError: assert <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})> is None\nE            +  where <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})> = ResultCallback(MyApp(title='MyApp', classes={'-dark-mode'}), <bound method test_switch_screen_updates_results_callback_stack.<locals>.MyApp.callback of MyApp(title='MyApp', classes={'-dark-mode'})>, future=<Future pending>).callback\n\ntests/test_screens.py:376: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_switch_screen_updates_results_callback_stack():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2650\"\"\"\n    \n        class ScreenA(Screen):\n            pass\n    \n        class ScreenB(Screen):\n            pass\n    \n        class MyApp(App[None]):\n            SCREENS = {\n                \"a\": ScreenA(),\n                \"b\": ScreenB(),\n            }\n    \n            def callback(self, _):\n                return 42\n    \n            def on_mount(self):\n                self.push_screen(\"a\", self.callback)\n    \n        app = MyApp()\n>       async with app.run_test():\n\ntests/test_screens.py:370: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:628: in _flush_next_callbacks\n    await invoke(callback.callback)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/await_complete.py:34: in __call__\n    return await self\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def switch() -> None:\n        \"\"\"Switch to the new screen.\"\"\"\n        if current_screen is not None:\n            await self._replace_screen(current_screen)\n        self._screen_stack.append(next_screen)\n        self._load_screen_css(next_screen)\n>       await self._register(self, next_screen)\nE       TypeError: object list can't be used in 'await' expression\n\nsrc/textual/app.py:2189: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/await_complete.py:34 in __call__     \u2502\n\u2502                                                                              \u2502\n\u2502   31 \u2502   \u2502   return self                                                     \u2502\n\u2502   32 \u2502                                                                       \u2502\n\u2502   33 \u2502   async def __call__(self) -> Any:                                    \u2502\n\u2502 \u2771 34 \u2502   \u2502   return await self                                               \u2502\n\u2502   35 \u2502                                                                       \u2502\n\u2502   36 \u2502   def __await__(self) -> Generator[Any, None, Any]:                   \u2502\n\u2502   37 \u2502   \u2502   return self._future.__await__()                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502 self = <AwaitComplete> \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2189 in switch                \u2502\n\u2502                                                                              \u2502\n\u2502   2186 \u2502   \u2502   \u2502   \u2502   await self._replace_screen(current_screen)            \u2502\n\u2502   2187 \u2502   \u2502   \u2502   self._screen_stack.append(next_screen)                    \u2502\n\u2502   2188 \u2502   \u2502   \u2502   self._load_screen_css(next_screen)                        \u2502\n\u2502 \u2771 2189 \u2502   \u2502   \u2502   await self._register(self, next_screen)                   \u2502\n\u2502   2190 \u2502   \u2502   \u2502   next_screen.post_message(events.ScreenResume())           \u2502\n\u2502   2191 \u2502   \u2502   \u2502   self.log.system(f\"{next_screen} RESUMED\")                 \u2502\n\u2502   2192 \u2502   \u2502   \u2502   self.refresh()                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502 current_screen = ScreenA()                                    \u2502            \u2502\n\u2502 \u2502    next_screen = ScreenB()                                    \u2502            \u2502\n\u2502 \u2502           self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: object list can't be used in 'await' expression\n__________________ test_screen_css_switch_screen_type_by_name __________________\n\n    async def test_screen_css_switch_screen_type_by_name():\n        \"\"\"Check that screen CSS is loaded and applied when switching a screen name that points to a screen class.\"\"\"\n    \n        class MyApp(SwitchBaseApp):\n            SCREENS = {\"screenwithcss\": ScreenWithCSS}\n    \n            async def key_p(self):\n                self.switch_screen(\"screenwithcss\")\n    \n            def key_o(self):\n                self.pop_screen()\n    \n        app = MyApp()\n>       async with app.run_test() as pilot:\n\ntests/css/test_screen_css.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:206: in __aexit__\n    await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:628: in _flush_next_callbacks\n    await invoke(callback.callback)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/await_complete.py:34: in __call__\n    return await self\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    async def switch() -> None:\n        \"\"\"Switch to the new screen.\"\"\"\n        if current_screen is not None:\n            await self._replace_screen(current_screen)\n        self._screen_stack.append(next_screen)\n        self._load_screen_css(next_screen)\n>       await self._register(self, next_screen)\nE       TypeError: object list can't be used in 'await' expression\n\nsrc/textual/app.py:2189: TypeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/await_complete.py:34 in __call__     \u2502\n\u2502                                                                              \u2502\n\u2502   31 \u2502   \u2502   return self                                                     \u2502\n\u2502   32 \u2502                                                                       \u2502\n\u2502   33 \u2502   async def __call__(self) -> Any:                                    \u2502\n\u2502 \u2771 34 \u2502   \u2502   return await self                                               \u2502\n\u2502   35 \u2502                                                                       \u2502\n\u2502   36 \u2502   def __await__(self) -> Generator[Any, None, Any]:                   \u2502\n\u2502   37 \u2502   \u2502   return self._future.__await__()                                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                                   \u2502\n\u2502 \u2502 self = <AwaitComplete> \u2502                                                   \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2189 in switch                \u2502\n\u2502                                                                              \u2502\n\u2502   2186 \u2502   \u2502   \u2502   \u2502   await self._replace_screen(current_screen)            \u2502\n\u2502   2187 \u2502   \u2502   \u2502   self._screen_stack.append(next_screen)                    \u2502\n\u2502   2188 \u2502   \u2502   \u2502   self._load_screen_css(next_screen)                        \u2502\n\u2502 \u2771 2189 \u2502   \u2502   \u2502   await self._register(self, next_screen)                   \u2502\n\u2502   2190 \u2502   \u2502   \u2502   next_screen.post_message(events.ScreenResume())           \u2502\n\u2502   2191 \u2502   \u2502   \u2502   self.log.system(f\"{next_screen} RESUMED\")                 \u2502\n\u2502   2192 \u2502   \u2502   \u2502   self.refresh()                                            \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502 current_screen = BaseScreen()                                 \u2502            \u2502\n\u2502 \u2502    next_screen = ScreenWithCSS()                              \u2502            \u2502\n\u2502 \u2502           self = MyApp(title='MyApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nTypeError: object list can't be used in 'await' expression\n=============================== warnings summary ===============================\ntests/test_screens.py::test_switch_screen_no_op\ntests/test_screens.py::test_screens\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance\ntests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\ntests/test_screens.py::test_switch_screen_updates_results_callback_stack\ntests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_screens.py::test_switch_screen_no_op\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_screens.py::test_screens - TypeError: object list can't be ...\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_instance_by_name\nFAILED tests/test_screens.py::test_switch_screen_updates_results_callback_stack\nFAILED tests/css/test_screen_css.py::test_screen_css_switch_screen_type_by_name\n=================== 5 failed, 1 passed, 7 warnings in 1.06s ====================\n\n"], "textual-src/textual/app.py-pop_screen": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/css/test_screen_css.py .                                           [  9%]\ntests/test_screens.py ..F                                                [ 36%]\ntests/css/test_screen_css.py .....                                       [ 81%]\ntests/test_screens.py .                                                  [ 90%]\ntests/css/test_screen_css.py .                                           [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_screens _________________________________\n\n    async def test_screens():\n        app = App()\n        app._loop = asyncio.get_running_loop()\n        app._thread_id = threading.get_ident()\n        # There should be nothing in the children since the app hasn't run yet\n        assert not app._nodes\n        assert not app.children\n        app._set_active()\n    \n        with pytest.raises(ScreenStackError):\n            app.screen\n    \n        assert not app._installed_screens\n    \n        screen1 = Screen(name=\"screen1\")\n        screen2 = Screen(name=\"screen2\")\n        screen3 = Screen(name=\"screen3\")\n    \n        # installs screens\n        app.install_screen(screen1, \"screen1\")\n        app.install_screen(screen2, \"screen2\")\n    \n        # Installing a screen does not add it to the DOM\n        assert not app._nodes\n        assert not app.children\n    \n        # Check they are installed\n        assert app.is_screen_installed(\"screen1\")\n        assert app.is_screen_installed(\"screen2\")\n    \n        assert app.get_screen(\"screen1\") is screen1\n        with pytest.raises(KeyError):\n            app.get_screen(\"foo\")\n    \n        # Check screen3 is not installed\n        assert not app.is_screen_installed(\"screen3\")\n    \n        # Installs screen3\n        app.install_screen(screen3, \"screen3\")\n        # Confirm installed\n        assert app.is_screen_installed(\"screen3\")\n    \n        # Check screen stack is empty\n        assert app.screen_stack == []\n        # Push a screen\n        await app.push_screen(\"screen1\")\n        # Check it is on the stack\n        assert app.screen_stack == [screen1]\n        # Check it is current\n        assert app.screen is screen1\n        # There should be one item in the children view\n        assert app.children == (screen1,)\n    \n        # Switch to another screen\n        await app.switch_screen(\"screen2\")\n        # Check it has changed the stack and that it is current\n        assert app.screen_stack == [screen2]\n        assert app.screen is screen2\n        assert app.children == (screen2,)\n    \n        # Push another screen\n        await app.push_screen(\"screen3\")\n        assert app.screen_stack == [screen2, screen3]\n        assert app.screen is screen3\n        # Only the current screen is in children\n        assert app.children == (screen3,)\n    \n        # Pop a screen\n        await app.pop_screen()\n        assert app.screen is screen2\n        assert app.screen_stack == [screen2]\n    \n        # Uninstall screens\n        app.uninstall_screen(screen1)\n        assert not app.is_screen_installed(screen1)\n        app.uninstall_screen(\"screen3\")\n        assert not app.is_screen_installed(screen1)\n    \n        # Check we can't uninstall a screen on the stack\n        with pytest.raises(ScreenStackError):\n            app.uninstall_screen(screen2)\n    \n        # Check we can't pop last screen\n>       with pytest.raises(ScreenStackError):\nE       Failed: DID NOT RAISE <class 'textual.app.ScreenStackError'>\n\ntests/test_screens.py:151: Failed\n=============================== warnings summary ===============================\ntests/css/test_screen_css.py: 7 warnings\ntests/test_screens.py: 4 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_screen_css.py::test_screen_css_push_screen_instance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_screens.py::test_screens - Failed: DID NOT RAISE <class 'te...\n================== 1 failed, 10 passed, 12 warnings in 1.85s ===================\n\n"], "textual-src/textual/app.py-run_action": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_widget.py .                                                   [100%]\n\n=============================== warnings summary ===============================\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_widget.py::test_remove\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 2 warnings in 0.19s =========================\n\n"], "textual-src/textual/file_monitor.py-check": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_file_monitor.py .                                             [100%]\n\n============================== 1 passed in 0.08s ===============================\n\n"], "textual-src/textual/expand_tabs.py-expand_tabs_inline": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 13 items\n\ntests/test_expand_tabs.py FFFFFFFFFFFFF                                  [100%]\n\n=================================== FAILURES ===================================\n____________________ test_expand_tabs_inline[ b ar - b ar ] ____________________\n\nline = ' b ar ', expanded_line = ' b ar '\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert ' b ar   ' == ' b ar '\nE         \nE         -  b ar \nE         +  b ar   \nE         ?       ++\n\ntests/test_expand_tabs.py:25: AssertionError\n____________________ test_expand_tabs_inline[\\tbar-    bar] ____________________\n\nline = '\\tbar', expanded_line = '    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'bar ' == '    bar'\nE         \nE         -     bar\nE         + bar\n\ntests/test_expand_tabs.py:25: AssertionError\n__________________ test_expand_tabs_inline[\\tbar\\t-    bar ] ___________________\n\nline = '\\tbar\\t', expanded_line = '    bar '\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'bar ' == '    bar '\nE         \nE         -     bar \nE         + bar\n\ntests/test_expand_tabs.py:25: AssertionError\n___________________ test_expand_tabs_inline[\\tr\\t-    r   ] ____________________\n\nline = '\\tr\\t', expanded_line = '    r   '\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'r   ' == '    r   '\nE         \nE         -     r   \nE         + r\n\ntests/test_expand_tabs.py:25: AssertionError\n___________________ test_expand_tabs_inline[1\\tbar-1   bar] ____________________\n\nline = '1\\tbar', expanded_line = '1   bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '1   bar ' == '1   bar'\nE         \nE         - 1   bar\nE         + 1   bar \nE         ?        +\n\ntests/test_expand_tabs.py:25: AssertionError\n___________________ test_expand_tabs_inline[12\\tbar-12  bar] ___________________\n\nline = '12\\tbar', expanded_line = '12  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '12  bar ' == '12  bar'\nE         \nE         - 12  bar\nE         + 12  bar \nE         ?        +\n\ntests/test_expand_tabs.py:25: AssertionError\n__________________ test_expand_tabs_inline[123\\tbar-123 bar] ___________________\n\nline = '123\\tbar', expanded_line = '123 bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '123 bar ' == '123 bar'\nE         \nE         - 123 bar\nE         + 123 bar \nE         ?        +\n\ntests/test_expand_tabs.py:25: AssertionError\n________________ test_expand_tabs_inline[1234\\tbar-1234    bar] ________________\n\nline = '1234\\tbar', expanded_line = '1234    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '1234bar ' == '1234    bar'\nE         \nE         - 1234    bar\nE         + 1234bar\n\ntests/test_expand_tabs.py:25: AssertionError\n___________ test_expand_tabs_inline[\\U0001f4a9\\tbar-\\U0001f4a9  bar] ___________\n\nline = '\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9   bar ' == '\ud83d\udca9  bar'\nE         \nE         - \ud83d\udca9  bar\nE         + \ud83d\udca9   bar \nE         ?  +     +\n\ntests/test_expand_tabs.py:25: AssertionError\n_ test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9    bar] _\n\nline = '\ud83d\udca9\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9\ud83d\udca9    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9\ud83d\udca9  bar ' == '\ud83d\udca9\ud83d\udca9    bar'\nE         \nE         - \ud83d\udca9\ud83d\udca9    bar\nE         ?   --\nE         + \ud83d\udca9\ud83d\udca9  bar \nE         ?        +\n\ntests/test_expand_tabs.py:25: AssertionError\n_ test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9\\U0001f4a9  bar] _\n\nline = '\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar', expanded_line = '\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert '\ud83d\udca9\ud83d\udca9\ud83d\udca9 bar ' == '\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar'\nE         \nE         - \ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\nE         ?     -\nE         + \ud83d\udca9\ud83d\udca9\ud83d\udca9 bar \nE         ?        +\n\ntests/test_expand_tabs.py:25: AssertionError\n__________ test_expand_tabs_inline[F\\U0001f4a9\\tbar-F\\U0001f4a9 bar] ___________\n\nline = 'F\ud83d\udca9\\tbar', expanded_line = 'F\ud83d\udca9 bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'F\ud83d\udca9  bar ' == 'F\ud83d\udca9 bar'\nE         \nE         - F\ud83d\udca9 bar\nE         + F\ud83d\udca9  bar \nE         ?   +    +\n\ntests/test_expand_tabs.py:25: AssertionError\n________ test_expand_tabs_inline[F\\U0001f4a9O\\tbar-F\\U0001f4a9O    bar] ________\n\nline = 'F\ud83d\udca9O\\tbar', expanded_line = 'F\ud83d\udca9O    bar'\n\n    @pytest.mark.parametrize(\n        \"line, expanded_line\",\n        [\n            (\" b ar \", \" b ar \"),\n            (\"\\tbar\", \"    bar\"),\n            (\"\\tbar\\t\", \"    bar \"),\n            (\"\\tr\\t\", \"    r   \"),\n            (\"1\\tbar\", \"1   bar\"),\n            (\"12\\tbar\", \"12  bar\"),\n            (\"123\\tbar\", \"123 bar\"),\n            (\"1234\\tbar\", \"1234    bar\"),\n            (\"\ud83d\udca9\\tbar\", \"\ud83d\udca9  bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9    bar\"),\n            (\"\ud83d\udca9\ud83d\udca9\ud83d\udca9\\tbar\", \"\ud83d\udca9\ud83d\udca9\ud83d\udca9  bar\"),\n            (\"F\ud83d\udca9\\tbar\", \"F\ud83d\udca9 bar\"),\n            (\"F\ud83d\udca9O\\tbar\", \"F\ud83d\udca9O    bar\"),\n        ],\n    )\n    def test_expand_tabs_inline(line, expanded_line):\n>       assert expand_tabs_inline(line) == expanded_line\nE       AssertionError: assert 'F\ud83d\udca9O bar ' == 'F\ud83d\udca9O    bar'\nE         \nE         - F\ud83d\udca9O    bar\nE         ?     ---\nE         + F\ud83d\udca9O bar \nE         ?        +\n\ntests/test_expand_tabs.py:25: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[ b ar - b ar ] - As...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\tbar-    bar] - As...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\tbar\\t-    bar ]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\tr\\t-    r   ] - A...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[1\\tbar-1   bar] - A...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[12\\tbar-12  bar] - ...\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[123\\tbar-123 bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[1234\\tbar-1234    bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\tbar-\\U0001f4a9  bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9    bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[\\U0001f4a9\\U0001f4a9\\U0001f4a9\\tbar-\\U0001f4a9\\U0001f4a9\\U0001f4a9  bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[F\\U0001f4a9\\tbar-F\\U0001f4a9 bar]\nFAILED tests/test_expand_tabs.py::test_expand_tabs_inline[F\\U0001f4a9O\\tbar-F\\U0001f4a9O    bar]\n============================== 13 failed in 0.12s ==============================\n\n"], "textual-src/textual/_resolve.py-resolve": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_resolve.py ....F.F                                            [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_resolve[scalars3-100-1-result3] _____________________\n\nscalars = ['10', '1fr'], total = 100, gutter = 1, result = [(0, 10), (11, 89)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\nE       assert [(0, 10), (11, 8)] == [(0, 10), (11, 89)]\nE         \nE         At index 1 diff: (11, 8) != (11, 89)\nE         Use -v to get more diff\n\ntests/test_resolve.py:52: AssertionError\n_____________________ test_resolve[scalars5-100-1-result5] _____________________\n\nscalars = ['3', '1fr', '1fr', '1'], total = 100, gutter = 1\nresult = [(0, 3), (4, 46), (51, 47), (99, 1)]\n\n    @pytest.mark.parametrize(\n        \"scalars,total,gutter,result\",\n        [\n            ([\"10\"], 100, 0, [(0, 10)]),\n            (\n                [\"10\", \"20\"],\n                100,\n                0,\n                [(0, 10), (10, 20)],\n            ),\n            (\n                [\"10\", \"20\"],\n                100,\n                1,\n                [(0, 10), (11, 20)],\n            ),\n            (\n                [\"10\", \"1fr\"],\n                100,\n                1,\n                [(0, 10), (11, 89)],\n            ),\n            (\n                [\"1fr\", \"1fr\"],\n                100,\n                0,\n                [(0, 50), (50, 50)],\n            ),\n            (\n                [\"3\", \"1fr\", \"1fr\", \"1\"],\n                100,\n                1,\n                [(0, 3), (4, 46), (51, 47), (99, 1)],\n            ),\n        ],\n    )\n    def test_resolve(scalars, total, gutter, result):\n>       assert (\n            resolve(\n                [Scalar.parse(scalar) for scalar in scalars],\n                total,\n                gutter,\n                Size(40, 20),\n                Size(80, 24),\n            )\n            == result\n        )\nE       assert [(0, 3), (4, ...16), (23, 16)] == [(0, 3), (4, ... 47), (99, 1)]\nE         \nE         At index 1 diff: (4, 1) != (4, 46)\nE         Use -v to get more diff\n\ntests/test_resolve.py:52: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_resolve.py::test_resolve[scalars3-100-1-result3] - assert [...\nFAILED tests/test_resolve.py::test_resolve[scalars5-100-1-result5] - assert [...\n========================= 2 failed, 5 passed in 0.13s ==========================\n\n"], "textual-src/textual/widget.py-mount": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_mount.py F                                                    [100%]\n\n=================================== FAILURES ===================================\n_________________________ test_render_only_after_mount _________________________\n\n    async def test_render_only_after_mount():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2914\"\"\"\n        app = App()\n        async with app.run_test() as pilot:\n>           app.mount(W())\n\ntests/test_mount.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/app.py:1807: in mount\n    return self.screen.mount(*widgets, before=before, after=after)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default'), before = None, after = None, widgets = (W(),)\n\n    def mount(\n        self,\n        *widgets: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise MountError(\"Only one of 'before' or 'after' may be specified.\")\n    \n        if before is not None:\n            if isinstance(before, int):\n                index = before\n            elif isinstance(before, str):\n                try:\n                    before_widget = self.query_one(before)\n                except NoMatches:\n                    raise MountError(f\"No widget found with selector {before!r}\") from None\n                index = self._nodes.index(before_widget)\n            elif isinstance(before, Widget):\n                try:\n                    index = self._nodes.index(before)\n                except ValueError:\n                    raise MountError(f\"Widget {before!r} not found in children\") from None\n            else:\n                raise MountError(f\"Invalid type for 'before': {type(before)}\")\n            self._nodes[index:index] = widgets\n        elif after is not None:\n            if isinstance(after, int):\n                index = after + 1\n            elif isinstance(after, str):\n                try:\n                    after_widget = self.query_one(after)\n                except NoMatches:\n                    raise MountError(f\"No widget found with selector {after!r}\") from None\n                index = self._nodes.index(after_widget) + 1\n            elif isinstance(after, Widget):\n                try:\n                    index = self._nodes.index(after) + 1\n                except ValueError:\n                    raise MountError(f\"Widget {after!r} not found in children\") from None\n            else:\n                raise MountError(f\"Invalid type for 'after': {type(after)}\")\n            self._nodes[index:index] = widgets\n        else:\n>           self._nodes.extend(widgets)\nE           AttributeError: 'NodeList' object has no attribute 'extend'\n\nsrc/textual/widget.py:982: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_render_only_after_mount():\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/2914\"\"\"\n        app = App()\n>       async with app.run_test() as pilot:\n\ntests/test_mount.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:217: in __aexit__\n    await self.gen.athrow(typ, value, traceback)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3056: in on_event\n    await super().on_event(event)\nsrc/textual/message_pump.py:722: in on_event\n    await self._on_message(event)\nsrc/textual/message_pump.py:743: in _on_message\n    await invoke(method, message)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/app.py:2640: in _on_compose\n    await self.mount_all(widgets)\nsrc/textual/app.py:1837: in mount_all\n    return self.mount(*widgets, before=before, after=after)\nsrc/textual/app.py:1807: in mount\n    return self.screen.mount(*widgets, before=before, after=after)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Screen(id='_default'), before = None, after = None, widgets = ()\n\n    def mount(\n        self,\n        *widgets: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> AwaitMount:\n        \"\"\"Mount widgets below this widget (making this widget a container).\n    \n        Args:\n            *widgets: The widget(s) to mount.\n            before: Optional location to mount before. An `int` is the index\n                of the child to mount before, a `str` is a `query_one` query to\n                find the widget to mount before.\n            after: Optional location to mount after. An `int` is the index\n                of the child to mount after, a `str` is a `query_one` query to\n                find the widget to mount after.\n    \n        Returns:\n            An awaitable object that waits for widgets to be mounted.\n    \n        Raises:\n            MountError: If there is a problem with the mount request.\n    \n        Note:\n            Only one of ``before`` or ``after`` can be provided. If both are\n            provided a ``MountError`` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise MountError(\"Only one of 'before' or 'after' may be specified.\")\n    \n        if before is not None:\n            if isinstance(before, int):\n                index = before\n            elif isinstance(before, str):\n                try:\n                    before_widget = self.query_one(before)\n                except NoMatches:\n                    raise MountError(f\"No widget found with selector {before!r}\") from None\n                index = self._nodes.index(before_widget)\n            elif isinstance(before, Widget):\n                try:\n                    index = self._nodes.index(before)\n                except ValueError:\n                    raise MountError(f\"Widget {before!r} not found in children\") from None\n            else:\n                raise MountError(f\"Invalid type for 'before': {type(before)}\")\n            self._nodes[index:index] = widgets\n        elif after is not None:\n            if isinstance(after, int):\n                index = after + 1\n            elif isinstance(after, str):\n                try:\n                    after_widget = self.query_one(after)\n                except NoMatches:\n                    raise MountError(f\"No widget found with selector {after!r}\") from None\n                index = self._nodes.index(after_widget) + 1\n            elif isinstance(after, Widget):\n                try:\n                    index = self._nodes.index(after) + 1\n                except ValueError:\n                    raise MountError(f\"Widget {after!r} not found in children\") from None\n            else:\n                raise MountError(f\"Invalid type for 'after': {type(after)}\")\n            self._nodes[index:index] = widgets\n        else:\n>           self._nodes.extend(widgets)\nE           AttributeError: 'NodeList' object has no attribute 'extend'\n\nsrc/textual/widget.py:982: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1837 in mount_all             \u2502\n\u2502                                                                              \u2502\n\u2502   1834 \u2502   \u2502   \u2502   Only one of ``before`` or ``after`` can be provided. If b \u2502\n\u2502   1835 \u2502   \u2502   \u2502   provided a ``MountError`` will be raised.                 \u2502\n\u2502   1836 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502 \u2771 1837 \u2502   \u2502   return self.mount(*widgets, before=before, after=after)       \u2502\n\u2502   1838 \u2502                                                                     \u2502\n\u2502   1839 \u2502   def _init_mode(self, mode: str) -> AwaitMount:                    \u2502\n\u2502   1840 \u2502   \u2502   \"\"\"Do internal initialization of a new screen stack mode.     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                       \u2502\n\u2502 \u2502   after = None                                     \u2502                       \u2502\n\u2502 \u2502  before = None                                     \u2502                       \u2502\n\u2502 \u2502    self = App(title='App', classes={'-dark-mode'}) \u2502                       \u2502\n\u2502 \u2502 widgets = []                                       \u2502                       \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                       \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:1807 in mount                 \u2502\n\u2502                                                                              \u2502\n\u2502   1804 \u2502   \u2502   \u2502   Only one of ``before`` or ``after`` can be provided. If b \u2502\n\u2502   1805 \u2502   \u2502   \u2502   provided a ``MountError`` will be raised.                 \u2502\n\u2502   1806 \u2502   \u2502   \"\"\"                                                           \u2502\n\u2502 \u2771 1807 \u2502   \u2502   return self.screen.mount(*widgets, before=before, after=after \u2502\n\u2502   1808 \u2502                                                                     \u2502\n\u2502   1809 \u2502   def mount_all(                                                    \u2502\n\u2502   1810 \u2502   \u2502   self,                                                         \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                       \u2502\n\u2502 \u2502   after = None                                     \u2502                       \u2502\n\u2502 \u2502  before = None                                     \u2502                       \u2502\n\u2502 \u2502    self = App(title='App', classes={'-dark-mode'}) \u2502                       \u2502\n\u2502 \u2502 widgets = ()                                       \u2502                       \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                       \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/widget.py:982 in mount               \u2502\n\u2502                                                                              \u2502\n\u2502    979 \u2502   \u2502   \u2502   \u2502   raise MountError(f\"Invalid type for 'after': {type(af \u2502\n\u2502    980 \u2502   \u2502   \u2502   self._nodes[index:index] = widgets                        \u2502\n\u2502    981 \u2502   \u2502   else:                                                         \u2502\n\u2502 \u2771  982 \u2502   \u2502   \u2502   self._nodes.extend(widgets)                               \u2502\n\u2502    983 \u2502   \u2502                                                                 \u2502\n\u2502    984 \u2502   \u2502   for widget in widgets:                                        \u2502\n\u2502    985 \u2502   \u2502   \u2502   self.app._register_child(self, widget, before, after)     \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                          \u2502\n\u2502 \u2502   after = None                  \u2502                                          \u2502\n\u2502 \u2502  before = None                  \u2502                                          \u2502\n\u2502 \u2502    self = Screen(id='_default') \u2502                                          \u2502\n\u2502 \u2502 widgets = ()                    \u2502                                          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'NodeList' object has no attribute 'extend'\n=============================== warnings summary ===============================\ntests/test_mount.py::test_render_only_after_mount\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_mount.py::test_render_only_after_mount\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_mount.py::test_render_only_after_mount - AttributeError: 'N...\n======================== 1 failed, 2 warnings in 0.51s =========================\n\n"], "textual-src/textual/widget.py-move_child": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 6 items\n\ntests/test_widget_child_moving.py FFFFFF                                 [100%]\n\n=================================== FAILURES ===================================\n________________________ test_move_before_permutations _________________________\n\n    async def test_move_before_permutations() -> None:\n        \"\"\"Test the different permutations of moving one widget before another.\"\"\"\n        widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n        perms = ((1, 0), (widgets[1], 0), (1, widgets[0]), (widgets[1], widgets[0]))\n        for child, target in perms:\n            async with App().run_test() as pilot:\n                container = Widget(*widgets)\n                await pilot.app.mount(container)\n>               container.move_child(child, before=target)\n\ntests/test_widget_child_moving.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Widget(), child = 1, before = 0, after = None\n\n    def move_child(\n        self,\n        child: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise WidgetError(\"Only one of 'before' or 'after' can be provided.\")\n        if before is None and after is None:\n            raise WidgetError(\"One of 'before' or 'after' must be provided.\")\n    \n        if before is not None:\n            if isinstance(before, int):\n>               self._nodes.move_before(child, before)\nE               AttributeError: 'NodeList' object has no attribute 'move_before'\n\nsrc/textual/widget.py:1066: AttributeError\n_______________________ test_move_child_after_last_child _______________________\n\n    async def test_move_child_after_last_child() -> None:\n        \"\"\"Test moving after a child after the last child.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n>           container.move_child(widgets[0], after=widgets[-1])\n\ntests/test_widget_child_moving.py:171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Widget(), child = Widget(id='widget-0'), before = None\nafter = Widget(id='widget-9')\n\n    def move_child(\n        self,\n        child: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise WidgetError(\"Only one of 'before' or 'after' can be provided.\")\n        if before is None and after is None:\n            raise WidgetError(\"One of 'before' or 'after' must be provided.\")\n    \n        if before is not None:\n            if isinstance(before, int):\n                self._nodes.move_before(child, before)\n            elif isinstance(before, Widget):\n                self._nodes.move_before(child, before)\n            elif isinstance(before, str):\n                try:\n                    target = self.query_one(before)\n                except NoMatches:\n                    raise WidgetError(f\"No widget found with ID {before!r}\") from None\n                self._nodes.move_before(child, target)\n            else:\n                raise WidgetError(f\"Invalid 'before' target: {before!r}\")\n        elif after is not None:\n            if isinstance(after, int):\n                self._nodes.move_after(child, after)\n            elif isinstance(after, Widget):\n>               self._nodes.move_after(child, after)\nE               AttributeError: 'NodeList' object has no attribute 'move_after'\n\nsrc/textual/widget.py:1081: AttributeError\n_______________________ test_move_past_end_of_child_list _______________________\n\n    async def test_move_past_end_of_child_list() -> None:\n        \"\"\"Test attempting to move past the end of the child list.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n            with pytest.raises(WidgetError):\n>               container.move_child(widgets[0], before=len(widgets) + 10)\n\ntests/test_widget_child_moving.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Widget(), child = Widget(id='widget-0'), before = 20, after = None\n\n    def move_child(\n        self,\n        child: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise WidgetError(\"Only one of 'before' or 'after' can be provided.\")\n        if before is None and after is None:\n            raise WidgetError(\"One of 'before' or 'after' must be provided.\")\n    \n        if before is not None:\n            if isinstance(before, int):\n>               self._nodes.move_before(child, before)\nE               AttributeError: 'NodeList' object has no attribute 'move_before'\n\nsrc/textual/widget.py:1066: AttributeError\n_________________ test_move_child_after_last_numeric_location __________________\n\n    async def test_move_child_after_last_numeric_location() -> None:\n        \"\"\"Test moving after a child after the last child's numeric position.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n>           container.move_child(widgets[0], after=widgets[9])\n\ntests/test_widget_child_moving.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Widget(), child = Widget(id='widget-0'), before = None\nafter = Widget(id='widget-9')\n\n    def move_child(\n        self,\n        child: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise WidgetError(\"Only one of 'before' or 'after' can be provided.\")\n        if before is None and after is None:\n            raise WidgetError(\"One of 'before' or 'after' must be provided.\")\n    \n        if before is not None:\n            if isinstance(before, int):\n                self._nodes.move_before(child, before)\n            elif isinstance(before, Widget):\n                self._nodes.move_before(child, before)\n            elif isinstance(before, str):\n                try:\n                    target = self.query_one(before)\n                except NoMatches:\n                    raise WidgetError(f\"No widget found with ID {before!r}\") from None\n                self._nodes.move_before(child, target)\n            else:\n                raise WidgetError(f\"Invalid 'before' target: {before!r}\")\n        elif after is not None:\n            if isinstance(after, int):\n                self._nodes.move_after(child, after)\n            elif isinstance(after, Widget):\n>               self._nodes.move_after(child, after)\nE               AttributeError: 'NodeList' object has no attribute 'move_after'\n\nsrc/textual/widget.py:1081: AttributeError\n_________________________ test_move_after_permutations _________________________\n\n    async def test_move_after_permutations() -> None:\n        \"\"\"Test the different permutations of moving one widget after another.\"\"\"\n        widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n        perms = ((0, 1), (widgets[0], 1), (0, widgets[1]), (widgets[0], widgets[1]))\n        for child, target in perms:\n            async with App().run_test() as pilot:\n                container = Widget(*widgets)\n                await pilot.app.mount(container)\n>               container.move_child(child, after=target)\n\ntests/test_widget_child_moving.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Widget(), child = 0, before = None, after = 1\n\n    def move_child(\n        self,\n        child: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise WidgetError(\"Only one of 'before' or 'after' can be provided.\")\n        if before is None and after is None:\n            raise WidgetError(\"One of 'before' or 'after' must be provided.\")\n    \n        if before is not None:\n            if isinstance(before, int):\n                self._nodes.move_before(child, before)\n            elif isinstance(before, Widget):\n                self._nodes.move_before(child, before)\n            elif isinstance(before, str):\n                try:\n                    target = self.query_one(before)\n                except NoMatches:\n                    raise WidgetError(f\"No widget found with ID {before!r}\") from None\n                self._nodes.move_before(child, target)\n            else:\n                raise WidgetError(f\"Invalid 'before' target: {before!r}\")\n        elif after is not None:\n            if isinstance(after, int):\n>               self._nodes.move_after(child, after)\nE               AttributeError: 'NodeList' object has no attribute 'move_after'\n\nsrc/textual/widget.py:1079: AttributeError\n______________________ test_move_before_end_of_child_list ______________________\n\n    async def test_move_before_end_of_child_list() -> None:\n        \"\"\"Test attempting to move before the end of the child list.\"\"\"\n        async with App().run_test() as pilot:\n            widgets = [Widget(id=f\"widget-{n}\") for n in range(10)]\n            container = Widget(*widgets)\n            await pilot.app.mount(container)\n            with pytest.raises(WidgetError):\n>               container.move_child(widgets[0], before=-(len(widgets) + 10))\n\ntests/test_widget_child_moving.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Widget(), child = Widget(id='widget-0'), before = -20, after = None\n\n    def move_child(\n        self,\n        child: Widget,\n        before: int | str | Widget | None = None,\n        after: int | str | Widget | None = None,\n    ) -> None:\n        \"\"\"Move a child widget within its parent's list of children.\n    \n        Args:\n            child: The child widget to move.\n            before: Child widget or location index to move before.\n            after: Child widget or location index to move after.\n    \n        Raises:\n            WidgetError: If there is a problem with the child or target.\n    \n        Note:\n            Only one of `before` or `after` can be provided. If neither\n            or both are provided a `WidgetError` will be raised.\n        \"\"\"\n        if before is not None and after is not None:\n            raise WidgetError(\"Only one of 'before' or 'after' can be provided.\")\n        if before is None and after is None:\n            raise WidgetError(\"One of 'before' or 'after' must be provided.\")\n    \n        if before is not None:\n            if isinstance(before, int):\n>               self._nodes.move_before(child, before)\nE               AttributeError: 'NodeList' object has no attribute 'move_before'\n\nsrc/textual/widget.py:1066: AttributeError\n=============================== warnings summary ===============================\ntests/test_widget_child_moving.py::test_move_before_permutations\ntests/test_widget_child_moving.py::test_move_child_after_last_child\ntests/test_widget_child_moving.py::test_move_past_end_of_child_list\ntests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\ntests/test_widget_child_moving.py::test_move_after_permutations\ntests/test_widget_child_moving.py::test_move_before_end_of_child_list\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_widget_child_moving.py::test_move_before_permutations\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_widget_child_moving.py::test_move_before_permutations - Att...\nFAILED tests/test_widget_child_moving.py::test_move_child_after_last_child - ...\nFAILED tests/test_widget_child_moving.py::test_move_past_end_of_child_list - ...\nFAILED tests/test_widget_child_moving.py::test_move_child_after_last_numeric_location\nFAILED tests/test_widget_child_moving.py::test_move_after_permutations - Attr...\nFAILED tests/test_widget_child_moving.py::test_move_before_end_of_child_list\n======================== 6 failed, 7 warnings in 0.36s =========================\n\n"], "textual-src/textual/widget.py-_get_box_model": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 5 items\n\ntests/test_box_model.py FFFFF                                            [100%]\n\n=================================== FAILURES ===================================\n___________________________________ test_max ___________________________________\n\n    def test_max():\n        \"\"\"Check that max_width and max_height are respected.\"\"\"\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n        styles.width = 100\n        styles.height = 80\n        styles.max_width = 40\n        styles.max_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\n\ntests/test_box_model.py:166: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=40, height=30)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction,\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout)\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n        styles = self.styles\n        width = styles.width\n        height = styles.height\n        margin = styles.margin\n        padding = styles.padding\n        border = styles.border\n    \n        if width is None:\n            width_scalar = None\n        elif width.is_fraction:\n            width_scalar = width.value * width_fraction\n        else:\n            width_scalar = width.resolve(container, viewport, width_fraction)\n    \n        if height is None:\n            height_scalar = None\n        elif height.is_fraction:\n            height_scalar = height.value * height_fraction\n        else:\n            height_scalar = height.resolve(container, viewport, height_fraction)\n    \n>       margin_top = margin.top.resolve(container, viewport, height_fraction)\nE       AttributeError: 'int' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1201: AttributeError\n__________________________________ test_width __________________________________\n\n    def test_width():\n        \"\"\"Test width settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\n\ntests/test_box_model.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=60, height=20)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction,\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout)\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n        styles = self.styles\n        width = styles.width\n        height = styles.height\n        margin = styles.margin\n        padding = styles.padding\n        border = styles.border\n    \n        if width is None:\n            width_scalar = None\n        elif width.is_fraction:\n            width_scalar = width.value * width_fraction\n        else:\n            width_scalar = width.resolve(container, viewport, width_fraction)\n    \n        if height is None:\n            height_scalar = None\n        elif height.is_fraction:\n            height_scalar = height.value * height_fraction\n        else:\n            height_scalar = height.resolve(container, viewport, height_fraction)\n    \n>       margin_top = margin.top.resolve(container, viewport, height_fraction)\nE       AttributeError: 'int' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1201: AttributeError\n_________________________________ test_height __________________________________\n\n    def test_height():\n        \"\"\"Test height settings.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                return 10\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                return 10\n    \n        widget = TestWidget()\n        styles = widget.styles\n    \n>       box_model = widget._get_box_model(Size(60, 20), Size(80, 24), one, one)\n\ntests/test_box_model.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=60, height=20)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction,\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout)\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n        styles = self.styles\n        width = styles.width\n        height = styles.height\n        margin = styles.margin\n        padding = styles.padding\n        border = styles.border\n    \n        if width is None:\n            width_scalar = None\n        elif width.is_fraction:\n            width_scalar = width.value * width_fraction\n        else:\n            width_scalar = width.resolve(container, viewport, width_fraction)\n    \n        if height is None:\n            height_scalar = None\n        elif height.is_fraction:\n            height_scalar = height.value * height_fraction\n        else:\n            height_scalar = height.resolve(container, viewport, height_fraction)\n    \n>       margin_top = margin.top.resolve(container, viewport, height_fraction)\nE       AttributeError: 'int' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1201: AttributeError\n___________________________________ test_min ___________________________________\n\n    def test_min():\n        \"\"\"Check that min_width and min_height are respected.\"\"\"\n    \n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size, width: int) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n        styles = widget.styles\n        styles.width = 10\n        styles.height = 5\n        styles.min_width = 40\n        styles.min_height = 30\n    \n>       box_model = widget._get_box_model(Size(40, 30), Size(80, 24), one, one)\n\ntests/test_box_model.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=40, height=30)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction,\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout)\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n        styles = self.styles\n        width = styles.width\n        height = styles.height\n        margin = styles.margin\n        padding = styles.padding\n        border = styles.border\n    \n        if width is None:\n            width_scalar = None\n        elif width.is_fraction:\n            width_scalar = width.value * width_fraction\n        else:\n            width_scalar = width.resolve(container, viewport, width_fraction)\n    \n        if height is None:\n            height_scalar = None\n        elif height.is_fraction:\n            height_scalar = height.value * height_fraction\n        else:\n            height_scalar = height.resolve(container, viewport, height_fraction)\n    \n>       margin_top = margin.top.resolve(container, viewport, height_fraction)\nE       AttributeError: 'int' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1201: AttributeError\n_______________________________ test_content_box _______________________________\n\n    def test_content_box():\n        one = Fraction(1)\n    \n        class TestWidget(Widget):\n            def get_content_width(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n            def get_content_height(self, container: Size, parent: Size) -> int:\n                assert False, \"must not be called\"\n    \n        widget = TestWidget()\n    \n        # border-box is default\n        assert widget.styles.box_sizing == \"border-box\"\n    \n        widget.styles.width = 10\n        widget.styles.height = 8\n        widget.styles.padding = 1\n        widget.styles.border = (\"solid\", \"red\")\n    \n>       box_model = widget._get_box_model(\n            Size(60, 20),\n            Size(80, 24),\n            one,\n            one,\n        )\n\ntests/test_box_model.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TestWidget(), container = Size(width=60, height=20)\nviewport = Size(width=80, height=24), width_fraction = Fraction(1, 1)\nheight_fraction = Fraction(1, 1)\n\n    def _get_box_model(\n        self,\n        container: Size,\n        viewport: Size,\n        width_fraction: Fraction,\n        height_fraction: Fraction,\n    ) -> BoxModel:\n        \"\"\"Process the box model for this widget.\n    \n        Args:\n            container: The size of the container widget (with a layout)\n            viewport: The viewport size.\n            width_fraction: A fraction used for 1 `fr` unit on the width dimension.\n            height_fraction: A fraction used for 1 `fr` unit on the height dimension.\n    \n        Returns:\n            The size and margin for this widget.\n        \"\"\"\n        styles = self.styles\n        width = styles.width\n        height = styles.height\n        margin = styles.margin\n        padding = styles.padding\n        border = styles.border\n    \n        if width is None:\n            width_scalar = None\n        elif width.is_fraction:\n            width_scalar = width.value * width_fraction\n        else:\n            width_scalar = width.resolve(container, viewport, width_fraction)\n    \n        if height is None:\n            height_scalar = None\n        elif height.is_fraction:\n            height_scalar = height.value * height_fraction\n        else:\n            height_scalar = height.resolve(container, viewport, height_fraction)\n    \n>       margin_top = margin.top.resolve(container, viewport, height_fraction)\nE       AttributeError: 'int' object has no attribute 'resolve'\n\nsrc/textual/widget.py:1201: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_box_model.py::test_max - AttributeError: 'int' object has n...\nFAILED tests/test_box_model.py::test_width - AttributeError: 'int' object has...\nFAILED tests/test_box_model.py::test_height - AttributeError: 'int' object ha...\nFAILED tests/test_box_model.py::test_min - AttributeError: 'int' object has n...\nFAILED tests/test_box_model.py::test_content_box - AttributeError: 'int' obje...\n============================== 5 failed in 0.25s ===============================\n\n"], "textual-src/textual/widget.py-get_content_width": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.10s ===============================\n\n"], "textual-src/textual/widget.py-get_content_height": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/layouts/test_content_dimensions.py ...                             [100%]\n\n============================== 3 passed in 0.10s ===============================\n\n"], "textual-src/textual/suggester.py-_get_suggestion": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 11 items\n\ntests/suggester/test_suggester.py F......FFFF                            [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_case_insensitive_cache_hits _______________________\n\n    async def test_case_insensitive_cache_hits():\n        count = 0\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                nonlocal count\n                count += 1\n                return value + \"abc\"\n    \n        suggester = MySuggester(use_cache=True, case_sensitive=False)\n        hellos = [\"hello\", \"HELLO\", \"HeLlO\", \"Hello\", \"hELLO\"]\n        for hello in hellos:\n            await suggester._get_suggestion(DOMNode(), hello)\n>       assert count == 1\nE       assert 0 == 1\n\ntests/suggester/test_suggester.py:111: AssertionError\n________________________________ test_cache_on _________________________________\n\n    async def test_cache_on():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=True)\n        await suggester._get_suggestion(DOMNode(), \"hello\")\n>       assert log == [\"hello\"]\nE       AssertionError: assert [] == ['hello']\nE         \nE         Right contains one more item: 'hello'\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:34: AssertionError\n__________________ test_suggestion_ready_message_on_cache_hit __________________\n\n    async def test_suggestion_ready_message_on_cache_hit():\n        log = []\n        suggester = FillSuggester(use_cache=True)\n        await suggester._get_suggestion(LogListNode(log), \"hello\")\n>       assert log == [(\"helloxxxxx\", \"hello\")]\nE       AssertionError: assert [] == [('helloxxxxx', 'hello')]\nE         \nE         Right contains one more item: ('helloxxxxx', 'hello')\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:74: AssertionError\n________________________________ test_cache_off ________________________________\n\n    async def test_cache_off():\n        log = []\n    \n        class MySuggester(Suggester):\n            async def get_suggestion(self, value: str):\n                log.append(value)\n                return value\n    \n        suggester = MySuggester(use_cache=False)\n        await suggester._get_suggestion(DOMNode(), \"hello\")\n>       assert log == [\"hello\"]\nE       AssertionError: assert [] == ['hello']\nE         \nE         Right contains one more item: 'hello'\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:49: AssertionError\n________________________ test_suggestion_ready_message _________________________\n\n    async def test_suggestion_ready_message():\n        log = []\n        suggester = FillSuggester()\n        await suggester._get_suggestion(LogListNode(log), \"hello\")\n>       assert log == [(\"helloxxxxx\", \"hello\")]\nE       AssertionError: assert [] == [('helloxxxxx', 'hello')]\nE         \nE         Right contains one more item: ('helloxxxxx', 'hello')\nE         Use -v to get more diff\n\ntests/suggester/test_suggester.py:58: AssertionError\n=============================== warnings summary ===============================\ntests/suggester/test_suggester.py: 11 warnings\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/suggester/test_suggester.py::test_case_insensitive_cache_hits\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/suggester/test_suggester.py::test_case_insensitive_cache_hits - ...\nFAILED tests/suggester/test_suggester.py::test_cache_on - AssertionError: ass...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message_on_cache_hit\nFAILED tests/suggester/test_suggester.py::test_cache_off - AssertionError: as...\nFAILED tests/suggester/test_suggester.py::test_suggestion_ready_message - Ass...\n=================== 5 failed, 6 passed, 12 warnings in 0.12s ===================\n\n"], "textual-src/textual/dom.py-add_class": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/css/test_stylesheet.py F                                           [100%]\n\n=================================== FAILURES ===================================\n________________ test_stylesheet_apply_user_css_over_widget_css ________________\n\n    def test_stylesheet_apply_user_css_over_widget_css():\n        user_css = \".a {color: red; tint: yellow;}\"\n    \n        class MyWidget(Widget):\n            DEFAULT_CSS = \".a {color: blue !important; background: lime;}\"\n    \n        node = MyWidget()\n>       node.add_class(\"a\")\n\ntests/css/test_stylesheet.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MyWidget(), update = True, class_names = ('a',)\n\n    def add_class(self, *class_names: str, update: bool = True) -> Self:\n        \"\"\"Add class names to this Node.\n    \n        Args:\n            *class_names: CSS class names to add.\n            update: Also update styles.\n    \n        Returns:\n            Self.\n        \"\"\"\n        self._classes.update(class_names)\n        if update:\n>           self.update_styles()\nE           AttributeError: 'MyWidget' object has no attribute 'update_styles'. Did you mean: '_update_styles'?\n\nsrc/textual/dom.py:1435: AttributeError\n=========================== short test summary info ============================\nFAILED tests/css/test_stylesheet.py::test_stylesheet_apply_user_css_over_widget_css\n============================== 1 failed in 0.15s ===============================\n\n"], "textual-src/textual/reactive.py-_initialize_object": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_reactive.py .                                                 [100%]\n\n=============================== warnings summary ===============================\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_reactive.py::test_reactive_inheritance\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n======================== 1 passed, 2 warnings in 0.12s =========================\n\n"], "textual-src/textual/message_pump.py-call_after_refresh": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n___________________________ test_call_after_refresh ____________________________\n\n    async def test_call_after_refresh() -> None:\n        \"\"\"Check that call later makes a call after a refresh.\"\"\"\n        app = CallLaterApp()\n    \n        display_count = -1\n    \n        called_event = asyncio.Event()\n    \n        callback_message_pump: MessagePump | None = None\n    \n        def callback() -> None:\n            nonlocal display_count\n            nonlocal callback_message_pump\n            called_event.set()\n            display_count = app.display_count\n            callback_message_pump = active_message_pump.get()\n    \n        async with app.run_test():\n>           app.call_after_refresh(callback)\n\ntests/test_call_x_schedulers.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\ncallback = <function test_call_after_refresh.<locals>.callback at 0x7f2915364310>\nargs = (), kwargs = {}\napp = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\n\n    def call_after_refresh(self, callback: CallbackType, *args: Any, **kwargs: Any) -> bool:\n        \"\"\"Schedule a callback to run after all messages are processed and the screen\n        has been refreshed. Positional and keyword arguments are passed to the callable.\n    \n        Args:\n            callback: A callable.\n    \n        Returns:\n            `True` if the callback was scheduled, or `False` if the callback could not be\n                scheduled (may occur if the message pump was closed or closing).\n    \n        \"\"\"\n        try:\n            app = active_app.get()\n        except NoActiveAppError:\n            return False\n>       app._invoke_later(partial(callback, *args, **kwargs), self)\nE       AttributeError: 'CallLaterApp' object has no attribute '_invoke_later'. Did you mean: '_on_invoke_later'?\n\nsrc/textual/message_pump.py:433: AttributeError\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_after_refresh\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_after_refresh - AttributeEr...\n======================== 1 failed, 2 warnings in 0.15s =========================\n\n"], "textual-src/textual/message_pump.py-call_later": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_call_x_schedulers.py F                                        [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_call_later ________________________________\n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\n\n    @asynccontextmanager\n    async def run_test(\n        self,\n        *,\n        headless: bool = True,\n        size: tuple[int, int] | None = (80, 24),\n        tooltips: bool = False,\n        notifications: bool = False,\n        message_hook: Callable[[Message], None] | None = None,\n    ) -> AsyncGenerator[Pilot[ReturnType], None]:\n        \"\"\"An asynchronous context manager for testing apps.\n    \n        !!! tip\n    \n            See the guide for [testing](/guide/testing) Textual apps.\n    \n        Use this to run your app in \"headless\" mode (no output) and drive the app via a [Pilot][textual.pilot.Pilot] object.\n    \n        Example:\n    \n            ```python\n            async with app.run_test() as pilot:\n                await pilot.click(\"#Button.ok\")\n                assert ...\n            ```\n    \n        Args:\n            headless: Run in headless mode (no output or input).\n            size: Force terminal size to `(WIDTH, HEIGHT)`,\n                or None to auto-detect.\n            tooltips: Enable tooltips when testing.\n            notifications: Enable notifications when testing.\n            message_hook: An optional callback that will be called each time any message arrives at any\n                message pump in the app.\n        \"\"\"\n        from .pilot import Pilot\n    \n        app = self\n        app._disable_tooltips = not tooltips\n        app._disable_notifications = not notifications\n        app_ready_event = asyncio.Event()\n    \n        def on_app_ready() -> None:\n            \"\"\"Called when app is ready to process events.\"\"\"\n            app_ready_event.set()\n    \n        async def run_app(app: App) -> None:\n            if message_hook is not None:\n                message_hook_context_var.set(message_hook)\n            app._loop = asyncio.get_running_loop()\n            app._thread_id = threading.get_ident()\n            await app._process_messages(\n                ready_callback=on_app_ready,\n                headless=headless,\n                terminal_size=size,\n            )\n    \n        # Launch the app in the \"background\"\n        active_message_pump.set(app)\n        app_task = create_task(run_app(app), name=f\"run_test {app}\")\n    \n        # Wait until the app has performed all startup routines.\n        await app_ready_event.wait()\n    \n        # Get the app in an active state.\n        app._set_active()\n    \n        # Context manager returns pilot object to manipulate the app\n        try:\n            pilot = Pilot(app)\n>           await pilot._wait_for_screen()\n\nsrc/textual/app.py:1484: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/pilot.py:383: in _wait_for_screen\n    if child.call_later(decrement_counter):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\ncallback = <function Pilot._wait_for_screen.<locals>.decrement_counter at 0x7f5cab191f30>\nargs = (), kwargs = {}\n\n    def call_later(self, callback: Callback, *args: Any, **kwargs: Any) -> bool:\n        \"\"\"Schedule a callback to run after all messages are processed in this object.\n        Positional and keywords arguments are passed to the callable.\n    \n        Args:\n            callback: Callable to call next.\n            *args: Positional arguments to pass to the callable.\n            **kwargs: Keyword arguments to pass to the callable.\n    \n        Returns:\n            `True` if the callback was scheduled, or `False` if the callback could not be\n                scheduled (may occur if the message pump was closed or closing).\n    \n        \"\"\"\n>       return self._call_later(callback, *args, **kwargs)\nE       AttributeError: 'CallLaterApp' object has no attribute '_call_later'. Did you mean: 'call_later'?\n\nsrc/textual/message_pump.py:449: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\n    async def test_call_later() -> None:\n        \"\"\"Check that call later makes a call.\"\"\"\n        app = CallLaterApp()\n        called_event = asyncio.Event()\n    \n>       async with app.run_test():\n\ntests/test_call_x_schedulers.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/message_pump.py:615: in _process_messages_loop\n    await invoke(method, event)\nsrc/textual/_callback.py:85: in invoke\n    return await _invoke(callback, *params)\nsrc/textual/_callback.py:47: in _invoke\n    result = await result\nsrc/textual/screen.py:778: in _on_idle\n    self.app.call_later(self.bindings_updated_signal.publish, self)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})\ncallback = <bound method Signal.publish of <Signal owner=Screen(id='_default') name='bindings_updated' subscriptions=[]>>\nargs = (Screen(id='_default'),), kwargs = {}\n\n    def call_later(self, callback: Callback, *args: Any, **kwargs: Any) -> bool:\n        \"\"\"Schedule a callback to run after all messages are processed in this object.\n        Positional and keywords arguments are passed to the callable.\n    \n        Args:\n            callback: Callable to call next.\n            *args: Positional arguments to pass to the callable.\n            **kwargs: Keyword arguments to pass to the callable.\n    \n        Returns:\n            `True` if the callback was scheduled, or `False` if the callback could not be\n                scheduled (may occur if the message pump was closed or closing).\n    \n        \"\"\"\n>       return self._call_later(callback, *args, **kwargs)\nE       AttributeError: 'CallLaterApp' object has no attribute '_call_later'. Did you mean: 'call_later'?\n\nsrc/textual/message_pump.py:449: AttributeError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/screen.py:778 in _on_idle            \u2502\n\u2502                                                                              \u2502\n\u2502    775 \u2502   \u2502   finally:                                                      \u2502\n\u2502    776 \u2502   \u2502   \u2502   if self._bindings_updated:                                \u2502\n\u2502    777 \u2502   \u2502   \u2502   \u2502   self._bindings_updated = False                        \u2502\n\u2502 \u2771  778 \u2502   \u2502   \u2502   \u2502   self.app.call_later(self.bindings_updated_signal.publ \u2502\n\u2502    779 \u2502                                                                     \u2502\n\u2502    780 \u2502   def _compositor_refresh(self) -> None:                            \u2502\n\u2502    781 \u2502   \u2502   \"\"\"Perform a compositor refresh.\"\"\"                           \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                                            \u2502\n\u2502 \u2502 event = Idle()                \u2502                                            \u2502\n\u2502 \u2502  self = Screen(id='_default') \u2502                                            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                                            \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/message_pump.py:449 in call_later    \u2502\n\u2502                                                                              \u2502\n\u2502   446 \u2502   \u2502   \u2502   \u2502   scheduled (may occur if the message pump was closed or \u2502\n\u2502   447 \u2502   \u2502                                                                  \u2502\n\u2502   448 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502 \u2771 449 \u2502   \u2502   return self._call_later(callback, *args, **kwargs)             \u2502\n\u2502   450 \u2502                                                                      \u2502\n\u2502   451 \u2502                                                                      \u2502\n\u2502   452 \u2502   def call_next(self, callback: Callback, *args: Any, **kwargs: Any) \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502     args = (Screen(id='_default'),)                                      \u2502 \u2502\n\u2502 \u2502 callback = <bound method Signal.publish of <Signal                       \u2502 \u2502\n\u2502 \u2502            owner=Screen(id='_default') name='bindings_updated'           \u2502 \u2502\n\u2502 \u2502            subscriptions=[]>>                                            \u2502 \u2502\n\u2502 \u2502   kwargs = {}                                                            \u2502 \u2502\n\u2502 \u2502     self = CallLaterApp(title='CallLaterApp', classes={'-dark-mode'})    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nAttributeError: 'CallLaterApp' object has no attribute '_call_later'\n=============================== warnings summary ===============================\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/test_call_x_schedulers.py::test_call_later\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/test_call_x_schedulers.py::test_call_later - AttributeError: 'Ca...\n======================== 1 failed, 2 warnings in 0.32s =========================\n\n"], "textual-src/textual/message_pump.py-post_message": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\n============================ no tests ran in 0.09s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/test_reactive.py::watch_test_var\n(no match in any of [<Module test_reactive.py>])\n\n"], "textual-src/textual/_spatial_map.py-get_values_in_region": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_spatial_map.py F                                              [100%]\n\n=================================== FAILURES ===================================\n__________________________ test_get_values_in_region ___________________________\n\n    def test_get_values_in_region() -> None:\n        spatial_map: SpatialMap[str] = SpatialMap(20, 10)\n    \n        spatial_map.insert(\n            [\n                (Region(10, 5, 5, 5), False, False, \"foo\"),\n                (Region(5, 20, 5, 5), False, False, \"bar\"),\n                (Region(0, 0, 40, 1), True, False, \"title\"),\n            ]\n        )\n    \n>       assert spatial_map.get_values_in_region(Region(0, 0, 10, 5)) == [\n            \"title\",\n            \"foo\",\n        ]\n\ntests/test_spatial_map.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual._spatial_map.SpatialMap object at 0x7f872a0dd570>\nregion = Region(x=0, y=0, width=10, height=5)\n\n    def get_values_in_region(self, region: Region) -> list[ValueType]:\n        \"\"\"Get a superset of all the values that intersect with a given region.\n    \n        Note that this may return false positives.\n    \n        Args:\n            region: A region.\n    \n        Returns:\n            Values under the region.\n        \"\"\"\n        values_in_region = []\n>       for value, value_region in self._regions.items():\nE       AttributeError: 'SpatialMap' object has no attribute '_regions'\n\nsrc/textual/_spatial_map.py:96: AttributeError\n=========================== short test summary info ============================\nFAILED tests/test_spatial_map.py::test_get_values_in_region - AttributeError:...\n============================== 1 failed in 0.10s ===============================\n\n"], "textual-src/textual/validation.py-validate": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 45 items\n\ntests/test_validation.py ...................................FFFFFFF...   [100%]\n\n=================================== FAILURES ===================================\n__________________ test_URL_validate[http://example.com-True] __________________\n\nvalue = 'http://example.com', expected_result = True\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7fa01206f8b0>\nvalue = 'http://example.com'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        if not value.startswith((\"http://\", \"https://\")):\n            return ValidationResult(False, \"URL must start with http:// or https://\")\n>       return ValidationResult(True, \"Valid URL\")\nE       TypeError: ValidationResult.__init__() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/validation.py:490: TypeError\n_________________ test_URL_validate[https://example.com-True] __________________\n\nvalue = 'https://example.com', expected_result = True\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7fa01206d450>\nvalue = 'https://example.com'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        if not value.startswith((\"http://\", \"https://\")):\n            return ValidationResult(False, \"URL must start with http:// or https://\")\n>       return ValidationResult(True, \"Valid URL\")\nE       TypeError: ValidationResult.__init__() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/validation.py:490: TypeError\n___________________ test_URL_validate[www.example.com-False] ___________________\n\nvalue = 'www.example.com', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7fa01207e110>\nvalue = 'www.example.com'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        if not value.startswith((\"http://\", \"https://\")):\n>           return ValidationResult(False, \"URL must start with http:// or https://\")\nE           TypeError: ValidationResult.__init__() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/validation.py:489: TypeError\n___________________ test_URL_validate[://example.com-False] ____________________\n\nvalue = '://example.com', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7fa01222ea40>\nvalue = '://example.com'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        if not value.startswith((\"http://\", \"https://\")):\n>           return ValidationResult(False, \"URL must start with http:// or https://\")\nE           TypeError: ValidationResult.__init__() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/validation.py:489: TypeError\n____________________ test_URL_validate[https:///path-False] ____________________\n\nvalue = 'https:///path', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7fa011f9c0a0>\nvalue = 'https:///path'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        if not value.startswith((\"http://\", \"https://\")):\n            return ValidationResult(False, \"URL must start with http:// or https://\")\n>       return ValidationResult(True, \"Valid URL\")\nE       TypeError: ValidationResult.__init__() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/validation.py:490: TypeError\n_____ test_URL_validate[redis://username:pass[word@localhost:6379/0-False] _____\n\nvalue = 'redis://username:pass[word@localhost:6379/0', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7fa01222d720>\nvalue = 'redis://username:pass[word@localhost:6379/0'\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        if not value.startswith((\"http://\", \"https://\")):\n>           return ValidationResult(False, \"URL must start with http:// or https://\")\nE           TypeError: ValidationResult.__init__() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/validation.py:489: TypeError\n__________________________ test_URL_validate[-False] ___________________________\n\nvalue = '', expected_result = False\n\n    @pytest.mark.parametrize(\n        \"value, expected_result\",\n        [\n            (\"http://example.com\", True),  # valid URL\n            (\"https://example.com\", True),  # valid URL with https\n            (\"www.example.com\", False),  # missing scheme\n            (\"://example.com\", False),  # invalid URL (no scheme)\n            (\"https:///path\", False),  # missing netloc\n            (\n                \"redis://username:pass[word@localhost:6379/0\",\n                False,\n            ),  # invalid URL characters\n            (\"\", False),  # empty string\n        ],\n    )\n    def test_URL_validate(value, expected_result):\n        validator = URL()\n>       result = validator.validate(value)\n\ntests/test_validation.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.validation.URL object at 0x7fa01222d9f0>, value = ''\n\n    def validate(self, value: str) -> ValidationResult:\n        \"\"\"Validates that `value` is a valid URL (contains a scheme).\n    \n        Args:\n            value: The value to validate.\n    \n        Returns:\n            The result of the validation.\n        \"\"\"\n        if not value.startswith((\"http://\", \"https://\")):\n>           return ValidationResult(False, \"URL must start with http:// or https://\")\nE           TypeError: ValidationResult.__init__() takes from 1 to 2 positional arguments but 3 were given\n\nsrc/textual/validation.py:489: TypeError\n=========================== short test summary info ============================\nFAILED tests/test_validation.py::test_URL_validate[http://example.com-True]\nFAILED tests/test_validation.py::test_URL_validate[https://example.com-True]\nFAILED tests/test_validation.py::test_URL_validate[www.example.com-False] - T...\nFAILED tests/test_validation.py::test_URL_validate[://example.com-False] - Ty...\nFAILED tests/test_validation.py::test_URL_validate[https:///path-False] - Typ...\nFAILED tests/test_validation.py::test_URL_validate[redis://username:pass[word@localhost:6379/0-False]\nFAILED tests/test_validation.py::test_URL_validate[-False] - TypeError: Valid...\n========================= 7 failed, 38 passed in 0.16s =========================\n\n"], "textual-src/textual/geometry.py-clamp": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 1 item\n\ntests/test_geometry.py .                                                 [100%]\n\n============================== 1 passed in 0.10s ===============================\n\n"], "textual-src/textual/constants.py-_get_textual_animations": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 1 error\n\n==================================== ERRORS ====================================\n________ ERROR collecting tests/animations/test_environment_variable.py ________\ntests/animations/test_environment_variable.py:3: in <module>\n    from textual import constants\nsrc/textual/__init__.py:9: in <module>\n    from . import constants\nsrc/textual/constants.py:121: in <module>\n    TEXTUAL_ANIMATIONS: AnimationLevel = _get_textual_animations()\nsrc/textual/constants.py:75: in _get_textual_animations\n    if env_value in AnimationLevel.__members__:\n/usr/local/lib/python3.10/typing.py:970: in __getattr__\n    raise AttributeError(attr)\nE   AttributeError: __members__\n=========================== short test summary info ============================\nERROR tests/animations/test_environment_variable.py - AttributeError: __membe...\n=============================== 1 error in 0.08s ===============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_environment_variable.py::test__get_textual_animations\n\n"], "textual-src/textual/color.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items / 14 errors\n\n==================================== ERRORS ====================================\n_____________________ ERROR collecting tests/test_color.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_color.py:4: in <module>\n    from textual.color import Color, Gradient, Lab, lab_to_rgb, rgb_to_lab\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n_______________ ERROR collecting tests/test_style_importance.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_style_importance.py:1: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n________ ERROR collecting tests/animations/test_disabling_animations.py ________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/animations/test_disabling_animations.py:5: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n________________ ERROR collecting tests/css/test_nested_css.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_nested_css.py:5: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n___________________ ERROR collecting tests/css/test_parse.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_parse.py:5: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n__________________ ERROR collecting tests/css/test_styles.py ___________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_styles.py:6: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n___________ ERROR collecting docs/examples/guide/testing/test_rgb.py ___________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ndocs/examples/guide/testing/test_rgb.py:1: in <module>\n    from rgb import RGBApp\ndocs/examples/guide/testing/rgb.py:1: in <module>\n    from textual import on\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n__________________ ERROR collecting tests/css/test_initial.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_initial.py:1: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n________________ ERROR collecting tests/css/test_inheritance.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_inheritance.py:3: in <module>\n    from textual.app import App, ComposeResult\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n__________________ ERROR collecting tests/test_line_filter.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_line_filter.py:4: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n_________________ ERROR collecting tests/test_styles_cache.py __________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_styles_cache.py:7: in <module>\n    from textual._styles_cache import StylesCache\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n________________ ERROR collecting tests/css/test_stylesheet.py _________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/css/test_stylesheet.py:5: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n_____________________ ERROR collecting tests/test_strip.py _____________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_strip.py:5: in <module>\n    from textual._segment_tools import NoCellPositionForIndex\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n_______________ ERROR collecting tests/test_style_properties.py ________________\n/usr/local/lib/python3.10/site-packages/_pytest/python.py:492: in importtestmodule\n    mod = import_path(\n/usr/local/lib/python3.10/site-packages/_pytest/pathlib.py:591: in import_path\n    importlib.import_module(module_name)\n/usr/local/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1050: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1027: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1006: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:688: in _load_unlocked\n    ???\n/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py:178: in exec_module\n    exec(co, module.__dict__)\ntests/test_style_properties.py:4: in <module>\n    from textual.color import Color\nsrc/textual/__init__.py:12: in <module>\n    from ._on import on\nsrc/textual/_on.py:5: in <module>\n    from .css.model import SelectorSet\nsrc/textual/css/model.py:11: in <module>\n    from .styles import Styles\nsrc/textual/css/styles.py:15: in <module>\n    from ..color import Color\nE     File \"/root/repos/py_data/textual/src/textual/color.py\", line 556\nE       Uses the standard RGB color space with a D65/2\u2070 standard illuminant.\nE                                                    ^\nE   SyntaxError: invalid decimal literal\n=========================== short test summary info ============================\nERROR tests/test_color.py\nERROR tests/test_style_importance.py\nERROR tests/animations/test_disabling_animations.py\nERROR tests/css/test_nested_css.py\nERROR tests/css/test_parse.py\nERROR tests/css/test_styles.py\nERROR docs/examples/guide/testing/test_rgb.py\nERROR tests/css/test_initial.py\nERROR tests/css/test_inheritance.py\nERROR tests/test_line_filter.py\nERROR tests/test_styles_cache.py\nERROR tests/css/test_stylesheet.py\nERROR tests/test_strip.py\nERROR tests/test_style_properties.py\n============================== 14 errors in 0.81s ==============================\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_input_has_spaces\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_importance.py::test_outline_importance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_rule_declaration_after_nested\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_render_styles_border\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_clamp\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_hsla_negative_degrees\n\nERROR: found no collectors for /root/repos/py_data/textual/docs/examples/guide/testing/test_rgb.py::test_keys\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial_default\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_merge\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_animate_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_inheritance.py::test_inheritance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_line_filter.py::test_dim_apply\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_crop\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_none\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_outline\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_did_you_mean_for_css_property_names\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_hsl_negative_degrees\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_did_you_mean_for_color_names\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_set_rule\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_dirty_cache\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_work_on_full\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_merge_rules\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_color_parse_color\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_get_rules\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_border\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_color_property_parsing\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_strip.py::test_apply_filter\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/animations/test_disabling_animations.py::test_style_animations_via_transition_are_disabled_on_basic\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_padding_border\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_parse_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_importance.py::test_border_importance\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_color.py::test_gradient_errors\n\nERROR: found no collectors for /root/repos/py_data/textual/docs/examples/guide/testing/test_rgb.py::test_buttons\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_no_styles\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_styles_cache.py::test_padding\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_styles.py::test_reset\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_nested_css.py::test_nest_app\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_initial.py::test_initial\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_parse_bad_pseudo_selector\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_stylesheet.py::test_did_you_mean_for_property_names_in_nested_css\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/css/test_parse.py::test_parse_bad_pseudo_selector_with_suggestion\n\nERROR: found no collectors for /root/repos/py_data/textual/tests/test_style_properties.py::test_box_normalization\n\n"], "textual-src/textual/_slug.py-slug": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 34 items\n\ntests/test_slug.py ...................FFFFFFFFFFFFFFF                    [100%]\n\n=================================== FAILURES ===================================\n_______________________ test_tracked_slugs[test-test-1] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = 'test'\nexpected = 'test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-2' == 'test-1'\nE         \nE         - test-1\nE         ?      ^\nE         + test-2\nE         ?      ^\n\ntests/test_slug.py:62: AssertionError\n_______________________ test_tracked_slugs[test-test-2] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = 'test'\nexpected = 'test-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-3' == 'test-2'\nE         \nE         - test-2\nE         ?      ^\nE         + test-3\nE         ?      ^\n\ntests/test_slug.py:62: AssertionError\n______________________ test_tracked_slugs[-test---test-] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = '-test-'\nexpected = '-test-'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-4' == '-test-'\nE         \nE         - -test-\nE         ? -\nE         + test-4\nE         ?      +\n\ntests/test_slug.py:62: AssertionError\n_____________________ test_tracked_slugs[-test---test--1] ______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = '-test-'\nexpected = '-test--1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-5' == '-test--1'\nE         \nE         - -test--1\nE         + test-5\n\ntests/test_slug.py:62: AssertionError\n____ test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test] ____\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test', expected = 'test-_test'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'testtest' == 'test-_test'\nE         \nE         - test-_test\nE         ?     --\nE         + testtest\n\ntests/test_slug.py:62: AssertionError\n___ test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1] ___\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>\ntext = 'test!\"#$%&\\'()*+,-./:;<=>?@[]^_`{|}~test', expected = 'test-_test-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'testtest-2' == 'test-_test-1'\nE         \nE         - test-_test-1\nE         + testtest-2\n\ntests/test_slug.py:62: AssertionError\n____________________ test_tracked_slugs[t\\xebst-t%C3%ABst] _____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = 't\u00ebst'\nexpected = 't%C3%ABst'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'tst' == 't%C3%ABst'\nE         \nE         - t%C3%ABst\nE         + tst\n\ntests/test_slug.py:62: AssertionError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-1] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = 't\u00ebst'\nexpected = 't%C3%ABst-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'tst-2' == 't%C3%ABst-1'\nE         \nE         - t%C3%ABst-1\nE         + tst-2\n\ntests/test_slug.py:62: AssertionError\n___________________ test_tracked_slugs[t\\xebst-t%C3%ABst-2] ____________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = 't\u00ebst'\nexpected = 't%C3%ABst-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'tst-3' == 't%C3%ABst-2'\nE         \nE         - t%C3%ABst-2\nE         + tst-3\n\ntests/test_slug.py:62: AssertionError\n_______________ test_tracked_slugs[test\\U0001f642test-testtest] ________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>\ntext = 'test\ud83d\ude42test', expected = 'testtest'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'testtest-3' == 'testtest'\nE         \nE         - testtest\nE         + testtest-3\nE         ?         ++\n\ntests/test_slug.py:62: AssertionError\n______________ test_tracked_slugs[test\\U0001f937test-testtest-1] _______________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>\ntext = 'test\ud83e\udd37test', expected = 'testtest-1'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'testtest-4' == 'testtest-1'\nE         \nE         - testtest-1\nE         ?          ^\nE         + testtest-4\nE         ?          ^\n\ntests/test_slug.py:62: AssertionError\n_ test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2] _\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>\ntext = 'test\ud83e\udd37\ud83c\udffb\\u200d\u2640\ufe0ftest', expected = 'testtest-2'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'testtest-5' == 'testtest-2'\nE         \nE         - testtest-2\nE         ?          ^\nE         + testtest-5\nE         ?          ^\n\ntests/test_slug.py:62: AssertionError\n_______________________ test_tracked_slugs[test-test-3] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = 'test'\nexpected = 'test-3'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-6' == 'test-3'\nE         \nE         - test-3\nE         ?      ^\nE         + test-6\nE         ?      ^\n\ntests/test_slug.py:62: AssertionError\n_______________________ test_tracked_slugs[test-test-4] ________________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = 'test'\nexpected = 'test-4'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-7' == 'test-4'\nE         \nE         - test-4\nE         ?      ^\nE         + test-7\nE         ?      ^\n\ntests/test_slug.py:62: AssertionError\n______________________ test_tracked_slugs[ test -test-5] _______________________\n\ntracker = <textual._slug.TrackedSlugs object at 0x7fa3da217970>, text = ' test '\nexpected = 'test-5'\n\n    @pytest.mark.parametrize(\n        \"text, expected\",\n        [\n            (\"test\", \"test\"),\n            (\"test\", \"test-1\"),\n            (\"test\", \"test-2\"),\n            (\"-test-\", \"-test-\"),\n            (\"-test-\", \"-test--1\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test\"),\n            (\"test!\\\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test\", \"test-_test-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst\"),\n            (\"t\u00ebst\", \"t%C3%ABst-1\"),\n            (\"t\u00ebst\", \"t%C3%ABst-2\"),\n            (\"test\ud83d\ude42test\", \"testtest\"),\n            (\"test\ud83e\udd37test\", \"testtest-1\"),\n            (\"test\ud83e\udd37\ud83c\udffb\u200d\u2640\ufe0ftest\", \"testtest-2\"),\n            (\"test\", \"test-3\"),\n            (\"test\", \"test-4\"),\n            (\" test \", \"test-5\"),\n        ],\n    )\n    def test_tracked_slugs(tracker: TrackedSlugs, text: str, expected: str) -> None:\n        \"\"\"The tracked slugging class should produce the expected slugs.\"\"\"\n>       assert tracker.slug(text) == expected\nE       AssertionError: assert 'test-8' == 'test-5'\nE         \nE         - test-5\nE         ?      ^\nE         + test-8\nE         ?      ^\n\ntests/test_slug.py:62: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-1] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-2] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test-] - AssertionError...\nFAILED tests/test_slug.py::test_tracked_slugs[-test---test--1] - AssertionErr...\nFAILED tests/test_slug.py::test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test]\nFAILED tests/test_slug.py::test_tracked_slugs[test!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~test-test-_test-1]\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst] - AssertionE...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-1] - Assertio...\nFAILED tests/test_slug.py::test_tracked_slugs[t\\xebst-t%C3%ABst-2] - Assertio...\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f642test-testtest] - ...\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937test-testtest-1]\nFAILED tests/test_slug.py::test_tracked_slugs[test\\U0001f937\\U0001f3fb\\u200d\\u2640\\ufe0ftest-testtest-2]\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-3] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[test-test-4] - AssertionError: ...\nFAILED tests/test_slug.py::test_tracked_slugs[ test -test-5] - AssertionError...\n======================== 15 failed, 19 passed in 0.14s =========================\n\n"], "textual-src/textual/_styles_cache.py-render": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 7 items\n\ntests/test_styles_cache.py FFFFFFF                                       [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_no_styles ________________________________\n\n    def test_no_styles():\n        \"\"\"Test that empty style returns the content un-altered\"\"\"\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            \"\",\n            \"\",\n            content_size=Size(3, 3),\n        )\n        style = Style.from_color(bgcolor=Color.parse(\"green\").rich_color)\n        expected = [\n            Strip([Segment(\"foo\", style)], 3),\n            Strip([Segment(\"bar\", style)], 3),\n            Strip([Segment(\"baz\", style)], 3),\n        ]\n    \n>       assert lines == expected\nE       AssertionError: assert None == [Strip([Segment('foo', Style(bgcolor=Color('#008000', ColorType.TRUECOLOR, triplet=ColorTriplet(red=0, green=128, blue...ment('baz', Style(bgcolor=Color('#008000', ColorType.TRUECOLOR, triplet=ColorTriplet(red=0, green=128, blue=0))))], 3)]\n\ntests/test_styles_cache.py:56: AssertionError\n_________________________________ test_padding _________________________________\n\n    def test_padding():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n    \n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n_________________________________ test_border __________________________________\n\n    def test_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(5, 5),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n    \n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n_____________________________ test_padding_border ______________________________\n\n    def test_padding_border():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n    \n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n__________________________________ test_crop ___________________________________\n\n    def test_crop():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n            crop=Region(2, 2, 3, 3),\n        )\n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n_________________________________ test_outline _________________________________\n\n    def test_outline():\n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        styles = Styles()\n        styles.outline = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(3, 3),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            content.__getitem__,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n    \n>       text_content = _extract_content(lines)\n\ntests/test_styles_cache.py:185: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nlines = None\n\n    def _extract_content(lines: list[Strip]) -> list[str]:\n        \"\"\"Extract the text content from lines.\"\"\"\n>       content = [\"\".join(segment.text for segment in line) for line in lines]\nE       TypeError: 'NoneType' object is not iterable\n\ntests/test_styles_cache.py:16: TypeError\n_______________________________ test_dirty_cache _______________________________\n\n    def test_dirty_cache() -> None:\n        \"\"\"Check that we only render content once or if it has been marked as dirty.\"\"\"\n    \n        content = [\n            Strip([Segment(\"foo\")]),\n            Strip([Segment(\"bar\")]),\n            Strip([Segment(\"baz\")]),\n        ]\n        rendered_lines: list[int] = []\n    \n        def get_content_line(y: int) -> Strip:\n            rendered_lines.append(y)\n            return content[y]\n    \n        styles = Styles()\n        styles.padding = 1\n        styles.border = (\"heavy\", \"white\")\n        cache = StylesCache()\n        lines = cache.render(\n            styles,\n            Size(7, 7),\n            Color.parse(\"blue\"),\n            Color.parse(\"green\"),\n            get_content_line,\n            Console(),\n            None,\n            None,\n            content_size=Size(3, 3),\n        )\n>       assert rendered_lines == [0, 1, 2]\nE       assert [] == [0, 1, 2]\nE         \nE         Right contains 3 more items, first extra item: 0\nE         Use -v to get more diff\n\ntests/test_styles_cache.py:254: AssertionError\n=========================== short test summary info ============================\nFAILED tests/test_styles_cache.py::test_no_styles - AssertionError: assert No...\nFAILED tests/test_styles_cache.py::test_padding - TypeError: 'NoneType' objec...\nFAILED tests/test_styles_cache.py::test_border - TypeError: 'NoneType' object...\nFAILED tests/test_styles_cache.py::test_padding_border - TypeError: 'NoneType...\nFAILED tests/test_styles_cache.py::test_crop - TypeError: 'NoneType' object i...\nFAILED tests/test_styles_cache.py::test_outline - TypeError: 'NoneType' objec...\nFAILED tests/test_styles_cache.py::test_dirty_cache - assert [] == [0, 1, 2]\n============================== 7 failed in 0.13s ===============================\n\n"], "textual-src/textual/document/_document.py-replace_range": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n>       edit_result = document.replace_range(\n            start_location, old_end_location, \"12 34567 8901\"\n        )\n\ntests/document/test_wrapped_document.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f0b60273370>\nstart = (1, 0), end = (3, 0), text = '12 34567 8901'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        \"\"\"Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        top, bottom = sorted((start, end))\n    \n        # An optimization would be finding the byte offsets as a single operation rather\n        # than doing two passes over the document content.\n>       start_byte = self._location_to_byte_offset(top)\nE       AttributeError: 'Document' object has no attribute '_location_to_byte_offset'\n\nsrc/textual/document/_document.py:272: AttributeError\n______ test_refresh_range_wrapping_disabled_previously_unavailable_range _______\n\n    def test_refresh_range_wrapping_disabled_previously_unavailable_range():\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)  # wrapping disabled\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f0b5b3cfca0>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        \"\"\"Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        top, bottom = sorted((start, end))\n    \n        # An optimization would be finding the byte offsets as a single operation rather\n        # than doing two passes over the document content.\n>       start_byte = self._location_to_byte_offset(top)\nE       AttributeError: 'Document' object has no attribute '_location_to_byte_offset'\n\nsrc/textual/document/_document.py:272: AttributeError\n_________ test_refresh_range_wrapping_at_previously_unavailable_range __________\n\n    def test_refresh_range_wrapping_at_previously_unavailable_range():\n        \"\"\"When we insert new content at the end of the document, ensure it wraps correctly.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n\ntests/document/test_wrapped_document.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f0b5b3e69b0>\nstart = (3, 0), end = (3, 0), text = '012 3456\\n78 90123\\n45'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        \"\"\"Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        top, bottom = sorted((start, end))\n    \n        # An optimization would be finding the byte offsets as a single operation rather\n        # than doing two passes over the document content.\n>       start_byte = self._location_to_byte_offset(top)\nE       AttributeError: 'Document' object has no attribute '_location_to_byte_offset'\n\nsrc/textual/document/_document.py:272: AttributeError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n>       edit_result = document.replace_range(start_location, old_end_location, \"123\")\n\ntests/document/test_wrapped_document.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f0b5b3d2da0>\nstart = (1, 0), end = (3, 0), text = '123'\n\n    def replace_range(self, start: Location, end: Location, text: str) -> EditResult:\n        \"\"\"Replace text at the given range.\n    \n        This is the only method by which a document may be updated.\n    \n        Args:\n            start: A tuple (row, column) where the edit starts.\n            end: A tuple (row, column) where the edit ends.\n            text: The text to insert between start and end.\n    \n        Returns:\n            The EditResult containing information about the completed\n                replace operation.\n        \"\"\"\n        top, bottom = sorted((start, end))\n    \n        # An optimization would be finding the byte offsets as a single operation rather\n        # than doing two passes over the document content.\n>       start_byte = self._location_to_byte_offset(top)\nE       AttributeError: 'Document' object has no attribute '_location_to_byte_offset'\n\nsrc/textual/document/_document.py:272: AttributeError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - Attribut...\n============================== 4 failed in 0.13s ===============================\n\n"], "textual-src/textual/document/_wrapped_document.py-wrap_range": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/document/test_wrapped_document.py FFFF                             [100%]\n\n=================================== FAILURES ===================================\n_____________________ test_refresh_range_new_text_wrapped ______________________\n\n    def test_refresh_range_new_text_wrapped():\n        \"\"\"The post-edit content itself must be wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(\n            start_location, old_end_location, \"12 34567 8901\"\n        )\n    \n        # Inform the wrapped document about the range impacted by the edit\n>       wrapped_document.wrap_range(\n            start_location, old_end_location, edit_result.end_location\n        )\n\ntests/document/test_wrapped_document.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/document/_wrapped_document.py:181: in wrap_range\n    line = self.document[row]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f6070f0f460>\nline_index = 2\n\n    def __getitem__(self, line_index: int | slice) -> str | list[str]:\n        \"\"\"Return the content of a line as a string, excluding newline characters.\n    \n        Args:\n            line_index: The index or slice of the line(s) to retrieve.\n    \n        Returns:\n            The line or list of lines requested.\n        \"\"\"\n>       return self._lines[line_index]\nE       IndexError: list index out of range\n\nsrc/textual/document/_document.py:421: IndexError\n______ test_refresh_range_wrapping_disabled_previously_unavailable_range _______\n\n    def test_refresh_range_wrapping_disabled_previously_unavailable_range():\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)  # wrapping disabled\n    \n        edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n>       wrapped_document.wrap_range((3, 0), (3, 0), edit_result.end_location)\n\ntests/document/test_wrapped_document.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f606c079e70>\nstart = (3, 0), old_end = (3, 0), new_end = (5, 2)\n\n    def wrap_range(\n        self,\n        start: Location,\n        old_end: Location,\n        new_end: Location,\n    ) -> None:\n        \"\"\"Incrementally recompute wrapping based on a performed edit.\n    \n        This must be called *after* the source document has been edited.\n    \n        Args:\n            start: The start location of the edit that was performed in document-space.\n            old_end: The old end location of the edit in document-space.\n            new_end: The new end location of the edit in document-space.\n        \"\"\"\n        # Extract the row indices from the locations\n        start_row, _ = start\n        old_end_row, _ = old_end\n        new_end_row, _ = new_end\n    \n        # Determine the range of rows affected by the edit\n        affected_rows = range(start_row, max(old_end_row, new_end_row) + 1)\n    \n        # Recompute the wrapping for the affected rows\n        for row in affected_rows:\n            line = self.document[row]\n            tab_sections = get_tab_widths(line, self._tab_width)\n            wrap_offsets = (\n                compute_wrap_offsets(\n                    line,\n                    self._width,\n                    tab_size=self._tab_width,\n                    precomputed_tab_sections=tab_sections,\n                )\n                if self._width\n                else []\n            )\n>           self._wrap_offsets[row] = wrap_offsets\nE           IndexError: list assignment index out of range\n\nsrc/textual/document/_wrapped_document.py:193: IndexError\n_________ test_refresh_range_wrapping_at_previously_unavailable_range __________\n\n    def test_refresh_range_wrapping_at_previously_unavailable_range():\n        \"\"\"When we insert new content at the end of the document, ensure it wraps correctly.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        edit_result = document.replace_range((3, 0), (3, 0), \"012 3456\\n78 90123\\n45\")\n>       wrapped_document.wrap_range((3, 0), (3, 0), edit_result.end_location)\n\ntests/document/test_wrapped_document.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f606c23d660>\nstart = (3, 0), old_end = (3, 0), new_end = (5, 2)\n\n    def wrap_range(\n        self,\n        start: Location,\n        old_end: Location,\n        new_end: Location,\n    ) -> None:\n        \"\"\"Incrementally recompute wrapping based on a performed edit.\n    \n        This must be called *after* the source document has been edited.\n    \n        Args:\n            start: The start location of the edit that was performed in document-space.\n            old_end: The old end location of the edit in document-space.\n            new_end: The new end location of the edit in document-space.\n        \"\"\"\n        # Extract the row indices from the locations\n        start_row, _ = start\n        old_end_row, _ = old_end\n        new_end_row, _ = new_end\n    \n        # Determine the range of rows affected by the edit\n        affected_rows = range(start_row, max(old_end_row, new_end_row) + 1)\n    \n        # Recompute the wrapping for the affected rows\n        for row in affected_rows:\n            line = self.document[row]\n            tab_sections = get_tab_widths(line, self._tab_width)\n            wrap_offsets = (\n                compute_wrap_offsets(\n                    line,\n                    self._width,\n                    tab_size=self._tab_width,\n                    precomputed_tab_sections=tab_sections,\n                )\n                if self._width\n                else []\n            )\n>           self._wrap_offsets[row] = wrap_offsets\nE           IndexError: list assignment index out of range\n\nsrc/textual/document/_wrapped_document.py:193: IndexError\n______________________________ test_refresh_range ______________________________\n\n    def test_refresh_range():\n        \"\"\"The post-edit content is not wrapped.\"\"\"\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n        start_location = (1, 0)\n        old_end_location = (3, 0)\n    \n        edit_result = document.replace_range(start_location, old_end_location, \"123\")\n    \n        # Inform the wrapped document about the range impacted by the edit\n>       wrapped_document.wrap_range(\n            start_location,\n            old_end_location,\n            edit_result.end_location,\n        )\n\ntests/document/test_wrapped_document.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/document/_wrapped_document.py:181: in wrap_range\n    line = self.document[row]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._document.Document object at 0x7f606c078460>\nline_index = 2\n\n    def __getitem__(self, line_index: int | slice) -> str | list[str]:\n        \"\"\"Return the content of a line as a string, excluding newline characters.\n    \n        Args:\n            line_index: The index or slice of the line(s) to retrieve.\n    \n        Returns:\n            The line or list of lines requested.\n        \"\"\"\n>       return self._lines[line_index]\nE       IndexError: list index out of range\n\nsrc/textual/document/_document.py:421: IndexError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_new_text_wrapped\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_disabled_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range_wrapping_at_previously_unavailable_range\nFAILED tests/document/test_wrapped_document.py::test_refresh_range - IndexErr...\n============================== 4 failed in 0.13s ===============================\n\n"], "textual-src/textual/document/_wrapped_document.py-offset_to_location": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 18 items\n\ntests/document/test_wrapped_document.py ........F.F......F               [100%]\n\n=================================== FAILURES ===================================\n_________ test_offset_to_location_wrapping_enabled[offset8-location8] __________\n\noffset = Offset(x=0, y=1000), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (0, 6)),\n            (Offset(x=0, y=3), (1, 4)),\n            (Offset(x=1, y=3), (1, 5)),\n            (Offset(x=200, y=3), (1, 5)),\n            (Offset(x=0, y=6), (2, 8)),\n            (Offset(x=0, y=7), (3, 0)),  # Clicking on the final, empty line\n            (Offset(x=0, y=1000), (3, 0)),\n        ],\n    )\n    def test_offset_to_location_wrapping_enabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f381e5e4190>\noffset = Offset(x=0, y=1000)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        y_offset = offset.y\n        offset_to_line_info = self._offset_to_line_info\n    \n        if y_offset < 0 or y_offset >= len(offset_to_line_info):\n>           raise ValueError(\n                f\"The offset {y_offset!r} is out of bounds. \"\n                f\"The document contains {len(offset_to_line_info)!r} lines.\"\n            )\nE           ValueError: The offset 1000 is out of bounds. The document contains 8 lines.\n\nsrc/textual/document/_wrapped_document.py:295: ValueError\n_ test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1] _\n\noffset = Offset(x=0, y=-10), location = (0, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",\n        [\n            [Offset(-3, 0), (0, 0)],\n            [Offset(0, -10), (0, 0)],\n        ],\n    )\n    def test_offset_to_location_invalid_offset_clamps_to_valid_offset(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=4)\n    \n>       result = wrapped_document.offset_to_location(offset)\n\ntests/document/test_wrapped_document.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f381e5e7970>\noffset = Offset(x=0, y=-10)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        y_offset = offset.y\n        offset_to_line_info = self._offset_to_line_info\n    \n        if y_offset < 0 or y_offset >= len(offset_to_line_info):\n>           raise ValueError(\n                f\"The offset {y_offset!r} is out of bounds. \"\n                f\"The document contains {len(offset_to_line_info)!r} lines.\"\n            )\nE           ValueError: The offset -10 is out of bounds. The document contains 8 lines.\n\nsrc/textual/document/_wrapped_document.py:295: ValueError\n_________ test_offset_to_location_wrapping_disabled[offset6-location6] _________\n\noffset = Offset(x=200, y=200), location = (3, 0)\n\n    @pytest.mark.parametrize(\n        \"offset,location\",  # location is (row, column)\n        [\n            (Offset(x=0, y=0), (0, 0)),\n            (Offset(x=1, y=0), (0, 1)),\n            (Offset(x=2, y=1), (1, 2)),\n            (Offset(x=0, y=3), (3, 0)),\n            (Offset(x=1, y=3), (3, 0)),\n            (Offset(x=200, y=3), (3, 0)),\n            (Offset(x=200, y=200), (3, 0)),  # Clicking below the document\n        ],\n    )\n    def test_offset_to_location_wrapping_disabled(offset, location):\n        document = Document(SIMPLE_TEXT)\n        wrapped_document = WrappedDocument(document, width=0)\n    \n>       assert wrapped_document.offset_to_location(offset) == location\n\ntests/document/test_wrapped_document.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.document._wrapped_document.WrappedDocument object at 0x7f381e6039a0>\noffset = Offset(x=200, y=200)\n\n    def offset_to_location(self, offset: Offset) -> Location:\n        \"\"\"Given an offset within the wrapped/visual display of the document,\n        return the corresponding location in the document.\n    \n        Args:\n            offset: The y-offset within the document.\n    \n        Raises:\n            ValueError: When the given offset does not correspond to a line\n                in the document.\n    \n        Returns:\n            The Location in the document corresponding to the given offset.\n        \"\"\"\n        y_offset = offset.y\n        offset_to_line_info = self._offset_to_line_info\n    \n        if y_offset < 0 or y_offset >= len(offset_to_line_info):\n>           raise ValueError(\n                f\"The offset {y_offset!r} is out of bounds. \"\n                f\"The document contains {len(offset_to_line_info)!r} lines.\"\n            )\nE           ValueError: The offset 200 is out of bounds. The document contains 4 lines.\n\nsrc/textual/document/_wrapped_document.py:295: ValueError\n=========================== short test summary info ============================\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_enabled[offset8-location8]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_invalid_offset_clamps_to_valid_offset[offset1-location1]\nFAILED tests/document/test_wrapped_document.py::test_offset_to_location_wrapping_disabled[offset6-location6]\n========================= 3 failed, 15 passed in 0.13s =========================\n\n"], "textual-src/textual/css/parse.py-substitute_references": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_multi_value_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_reference_whitespace_trimming\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_transitive_reference\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_simple_reference_no_whitespace\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_definition_eof\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_empty_variable\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_variable_used_inside_property_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_undefined_variable\n(no match in any of [<Module test_parse.py>])\n\n"], "textual-src/textual/css/parse.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 14 items\n\ntests/css/test_nested_css.py FFFFFFFFFFFFFF                              [100%]\n\n=================================== FAILURES ===================================\n________________________________ test_nest_app _________________________________\n\n    async def test_nest_app():\n        \"\"\"Test nested CSS works as expected.\"\"\"\n        app = NestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e            \u2502\n\u2502 \u2502  event = Compose()                                            \u2502            \u2502\n\u2502 \u2502 screen = Screen(id='_default')                                \u2502            \u2502\n\u2502 \u2502   self = NestedApp(title='NestedApp', classes={'-dark-mode'}) \u2502            \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f            \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'NestedApp.CSS'),                                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502             self = NestedApp(title='NestedApp', classes={'-dark-mode'})  \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'NestedApp.CSS'                            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'NestedApp.CSS'                                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'NestedApp.CSS'                                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fe5f6045e40>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'NestedApp.CSS'                           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_pseudo_classes_work_in_nested_css ____________________\n\n    async def test_pseudo_classes_work_in_nested_css() -> None:\n        \"\"\"Makes sure pseudo-classes are correctly understood in nested TCSS.\n    \n        Regression test for https://github.com/Textualize/textual/issues/4039.\n        \"\"\"\n    \n        app = PseudoClassesInNestedApp()\n        green = Color.parse(\"green\")\n        red = Color.parse(\"red\")\n>       async with app.run_test() as pilot:\n\ntests/css/test_nested_css.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = PseudoClassesInNestedApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='PseudoClassesInNestedApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'PseudoClassesInNestedApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = PseudoClassesInNestedApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='PseudoClassesInNestedApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fe5f5a1f1c0>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'PseudoClassesInNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n______________________ test_rule_declaration_after_nested ______________________\n\n    async def test_rule_declaration_after_nested() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3999.\"\"\"\n        app = DeclarationAfterNestedApp()\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                          \u2502\n\u2502 \u2502  event = Compose()                              \u2502                          \u2502\n\u2502 \u2502 screen = Screen(id='_default')                  \u2502                          \u2502\n\u2502 \u2502   self = DeclarationAfterNestedApp(             \u2502                          \u2502\n\u2502 \u2502          \u2502   title='DeclarationAfterNestedApp', \u2502                          \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}             \u2502                          \u2502\n\u2502 \u2502          )                                      \u2502                          \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                          \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'DeclarationAfterNestedApp.CSS'),                     \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = DeclarationAfterNestedApp(                            \u2502 \u2502\n\u2502 \u2502                    \u2502   title='DeclarationAfterNestedApp',                \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'            \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'                       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fe5f6047140>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'DeclarationAfterNestedApp.CSS'           \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_lists_of_selectors_in_nested_css _____________________\n\n    async def test_lists_of_selectors_in_nested_css() -> None:\n        \"\"\"Regression test for https://github.com/Textualize/textual/issues/3969.\"\"\"\n        app = ListOfNestedSelectorsApp()\n        red = Color.parse(\"red\")\n>       async with app.run_test():\n\ntests/css/test_nested_css.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/contextlib.py:199: in __aenter__\n    return await anext(self.gen)\nsrc/textual/app.py:1492: in run_test\n    raise self._exception\nsrc/textual/app.py:2588: in _process_messages\n    await run_process_messages()\nsrc/textual/app.py:2533: in run_process_messages\n    await self._dispatch_message(events.Compose())\nsrc/textual/message_pump.py:653: in _dispatch_message\n    await self.on_event(message)\nsrc/textual/app.py:3053: in on_event\n    self._register(self, screen)\nsrc/textual/app.py:2752: in _register\n    apply_stylesheet(widget, cache=cache)\nsrc/textual/css/stylesheet.py:461: in apply\n    rules_map = self.rules_map\nsrc/textual/css/stylesheet.py:184: in rules_map\n    for rule in self.rules:\nsrc/textual/css/stylesheet.py:170: in rules\n    self.parse()\nsrc/textual/css/stylesheet.py:368: in parse\n    css_rules = self._parse_rules(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Stylesheet [('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS'), ('/root/repos/py_data/textual/test...extual/screen.py', 'Screen.DEFAULT_CSS'), ('/root/repos/py_data/textual/src/textual/widget.py', 'Widget.DEFAULT_CSS')]>\ncss = '\\n    App {\\n        background: $background;\\n        color: $text;\\n    }\\n    *:disabled:can-focus {\\n        opacity: 0.7;\\n    }\\n    '\nread_from = ('/root/repos/py_data/textual/src/textual/app.py', 'App.DEFAULT_CSS')\nis_default_rules = True, tie_breaker = -1, scope = 'App'\n\n    def _parse_rules(\n        self,\n        css: str,\n        read_from: CSSLocation,\n        is_default_rules: bool = False,\n        tie_breaker: int = 0,\n        scope: str = \"\",\n    ) -> list[RuleSet]:\n        \"\"\"Parse CSS and return rules.\n    \n        Args:\n            css: String containing Textual CSS.\n            read_from: Original CSS location.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n            scope: Scope of rules, or empty string for global scope.\n    \n        Raises:\n            StylesheetError: If the CSS is invalid.\n    \n        Returns:\n            List of RuleSets.\n        \"\"\"\n        cache_key = (css, read_from, is_default_rules, tie_breaker, scope)\n        try:\n            return self._parse_cache[cache_key]\n        except KeyError:\n            pass\n        try:\n            rules = list(\n                parse(\n                    scope,\n                    css,\n                    read_from,\n                    variable_tokens=self._variable_tokens,\n                    is_default_rules=is_default_rules,\n                    tie_breaker=tie_breaker,\n                )\n            )\n        except TokenError:\n            raise\n        except Exception as error:\n>           raise StylesheetError(f\"failed to parse css; {error}\") from None\nE           textual.css.errors.StylesheetError: failed to parse css; parse() got an unexpected keyword argument 'variable_tokens'\n\nsrc/textual/css/stylesheet.py:261: StylesheetError\n----------------------------- Captured stderr call -----------------------------\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Traceback (most recent call last) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 /root/repos/py_data/textual/src/textual/app.py:3053 in on_event              \u2502\n\u2502                                                                              \u2502\n\u2502   3050 \u2502   \u2502   # If the event has been forwarded it may have bubbled up back \u2502\n\u2502   3051 \u2502   \u2502   if isinstance(event, events.Compose):                         \u2502\n\u2502   3052 \u2502   \u2502   \u2502   screen: Screen[Any] = self.get_default_screen()           \u2502\n\u2502 \u2771 3053 \u2502   \u2502   \u2502   self._register(self, screen)                              \u2502\n\u2502   3054 \u2502   \u2502   \u2502   self._screen_stack.append(screen)                         \u2502\n\u2502   3055 \u2502   \u2502   \u2502   screen.post_message(events.ScreenResume())                \u2502\n\u2502   3056 \u2502   \u2502   \u2502   await super().on_event(event)                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e                           \u2502\n\u2502 \u2502  event = Compose()                             \u2502                           \u2502\n\u2502 \u2502 screen = Screen(id='_default')                 \u2502                           \u2502\n\u2502 \u2502   self = ListOfNestedSelectorsApp(             \u2502                           \u2502\n\u2502 \u2502          \u2502   title='ListOfNestedSelectorsApp', \u2502                           \u2502\n\u2502 \u2502          \u2502   classes={'-dark-mode'}            \u2502                           \u2502\n\u2502 \u2502          )                                     \u2502                           \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f                           \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/app.py:2752 in _register             \u2502\n\u2502                                                                              \u2502\n\u2502   2749 \u2502   \u2502   \u2502   \u2502   self._register_child(parent, widget, before, after)   \u2502\n\u2502   2750 \u2502   \u2502   \u2502   \u2502   if widget._nodes:                                     \u2502\n\u2502   2751 \u2502   \u2502   \u2502   \u2502   \u2502   self._register(widget, *widget._nodes, cache=cach \u2502\n\u2502 \u2771 2752 \u2502   \u2502   \u2502   \u2502   apply_stylesheet(widget, cache=cache)                 \u2502\n\u2502   2753 \u2502   \u2502                                                                 \u2502\n\u2502   2754 \u2502   \u2502   if not self._running:                                         \u2502\n\u2502   2755 \u2502   \u2502   \u2502   # If the app is not running, prevent awaiting of the widg \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502            after = None                                                  \u2502 \u2502\n\u2502 \u2502 apply_stylesheet = <bound method Stylesheet.apply of <Stylesheet         \u2502 \u2502\n\u2502 \u2502                    [('/root/repos/py_data/textual/src/textual/app.py',   \u2502 \u2502\n\u2502 \u2502                    'App.DEFAULT_CSS'),                                   \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/tests/css/test_nested_\u2026 \u2502 \u2502\n\u2502 \u2502                    'ListOfNestedSelectorsApp.CSS'),                      \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/screen.py', \u2502 \u2502\n\u2502 \u2502                    'Screen.DEFAULT_CSS'),                                \u2502 \u2502\n\u2502 \u2502                    ('/root/repos/py_data/textual/src/textual/widget.py', \u2502 \u2502\n\u2502 \u2502                    'Widget.DEFAULT_CSS')]>>                              \u2502 \u2502\n\u2502 \u2502           before = None                                                  \u2502 \u2502\n\u2502 \u2502            cache = {}                                                    \u2502 \u2502\n\u2502 \u2502           parent = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502             self = ListOfNestedSelectorsApp(                             \u2502 \u2502\n\u2502 \u2502                    \u2502   title='ListOfNestedSelectorsApp',                 \u2502 \u2502\n\u2502 \u2502                    \u2502   classes={'-dark-mode'}                            \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502           widget = Screen(id='_default')                                 \u2502 \u2502\n\u2502 \u2502      widget_list = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2502          widgets = (Screen(id='_default'),)                              \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:461 in apply       \u2502\n\u2502                                                                              \u2502\n\u2502   458 \u2502   \u2502   rule_attributes: defaultdict[str, list[tuple[Specificity6, obj \u2502\n\u2502   459 \u2502   \u2502   rule_attributes = defaultdict(list)                            \u2502\n\u2502   460 \u2502   \u2502                                                                  \u2502\n\u2502 \u2771 461 \u2502   \u2502   rules_map = self.rules_map                                     \u2502\n\u2502   462 \u2502   \u2502                                                                  \u2502\n\u2502   463 \u2502   \u2502   # Discard rules which are not applicable early                 \u2502\n\u2502   464 \u2502   \u2502   limit_rules = {                                                \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502         animate = False                                                  \u2502 \u2502\n\u2502 \u2502           cache = {}                                                     \u2502 \u2502\n\u2502 \u2502            node = Screen(id='_default')                                  \u2502 \u2502\n\u2502 \u2502 rule_attributes = defaultdict(<class 'list'>, {})                        \u2502 \u2502\n\u2502 \u2502            self = <Stylesheet                                            \u2502 \u2502\n\u2502 \u2502                   \u2502   [                                                  \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/app.py',      \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                          \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/tests/css/test_nested_cs\u2026 \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/screen.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   ),                                             \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   (                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502                                              \u2502 \u2502\n\u2502 \u2502                   '/root/repos/py_data/textual/src/textual/widget.py',   \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                       \u2502 \u2502\n\u2502 \u2502                   \u2502   \u2502   )                                              \u2502 \u2502\n\u2502 \u2502                   \u2502   ]                                                  \u2502 \u2502\n\u2502 \u2502                   >                                                      \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:184 in rules_map   \u2502\n\u2502                                                                              \u2502\n\u2502   181 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   182 \u2502   \u2502   if self._rules_map is None:                                    \u2502\n\u2502   183 \u2502   \u2502   \u2502   rules_map: dict[str, list[RuleSet]] = defaultdict(list)    \u2502\n\u2502 \u2771 184 \u2502   \u2502   \u2502   for rule in self.rules:                                    \u2502\n\u2502   185 \u2502   \u2502   \u2502   \u2502   for name in rule.selector_names:                       \u2502\n\u2502   186 \u2502   \u2502   \u2502   \u2502   \u2502   rules_map[name].append(rule)                       \u2502\n\u2502   187 \u2502   \u2502   \u2502   self._rules_map = dict(rules_map)                          \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 rules_map = defaultdict(<class 'list'>, {})                              \u2502 \u2502\n\u2502 \u2502      self = <Stylesheet                                                  \u2502 \u2502\n\u2502 \u2502             \u2502   [                                                        \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/app.py',            \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/tests/css/test_nested_css.py',  \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/screen.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   ),                                                   \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   (                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502                                                    \u2502 \u2502\n\u2502 \u2502             '/root/repos/py_data/textual/src/textual/widget.py',         \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502             \u2502   \u2502   )                                                    \u2502 \u2502\n\u2502 \u2502             \u2502   ]                                                        \u2502 \u2502\n\u2502 \u2502             >                                                            \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:170 in rules       \u2502\n\u2502                                                                              \u2502\n\u2502   167 \u2502   \u2502   \u2502   List of rules sets for this stylesheet.                    \u2502\n\u2502   168 \u2502   \u2502   \"\"\"                                                            \u2502\n\u2502   169 \u2502   \u2502   if self._require_parse:                                        \u2502\n\u2502 \u2771 170 \u2502   \u2502   \u2502   self.parse()                                               \u2502\n\u2502   171 \u2502   \u2502   \u2502   self._require_parse = False                                \u2502\n\u2502   172 \u2502   \u2502   assert self._rules is not None                                 \u2502\n\u2502   173 \u2502   \u2502   return self._rules                                             \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502 self = <Stylesheet                                                       \u2502 \u2502\n\u2502 \u2502        \u2502   [                                                             \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                                     \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502                                                         \u2502 \u2502\n\u2502 \u2502        '/root/repos/py_data/textual/tests/css/test_nested_css.py',       \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   ),                                                        \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   (                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                                  \u2502 \u2502\n\u2502 \u2502        \u2502   \u2502   )                                                         \u2502 \u2502\n\u2502 \u2502        \u2502   ]                                                             \u2502 \u2502\n\u2502 \u2502        >                                                                 \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:368 in parse       \u2502\n\u2502                                                                              \u2502\n\u2502   365 \u2502   \u2502   \u2502   if css in self._invalid_css:                               \u2502\n\u2502   366 \u2502   \u2502   \u2502   \u2502   continue                                               \u2502\n\u2502   367 \u2502   \u2502   \u2502   try:                                                       \u2502\n\u2502 \u2771 368 \u2502   \u2502   \u2502   \u2502   css_rules = self._parse_rules(                         \u2502\n\u2502   369 \u2502   \u2502   \u2502   \u2502   \u2502   css,                                               \u2502\n\u2502   370 \u2502   \u2502   \u2502   \u2502   \u2502   read_from=read_from,                               \u2502\n\u2502   371 \u2502   \u2502   \u2502   \u2502   \u2502   is_default_rules=is_default_rules,                 \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        add_rules = <built-in method extend of list object at             \u2502 \u2502\n\u2502 \u2502                    0x7fe5f5bec4c0>                                       \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            rules = []                                                    \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2502                                                                              \u2502\n\u2502 /root/repos/py_data/textual/src/textual/css/stylesheet.py:261 in             \u2502\n\u2502 _parse_rules                                                                 \u2502\n\u2502                                                                              \u2502\n\u2502   258 \u2502   \u2502   except TokenError:                                             \u2502\n\u2502   259 \u2502   \u2502   \u2502   raise                                                      \u2502\n\u2502   260 \u2502   \u2502   except Exception as error:                                     \u2502\n\u2502 \u2771 261 \u2502   \u2502   \u2502   raise StylesheetError(f\"failed to parse css; {error}\") fro \u2502\n\u2502   262 \u2502   \u2502                                                                  \u2502\n\u2502   263 \u2502   \u2502   self._parse_cache[cache_key] = rules                           \u2502\n\u2502   264 \u2502   \u2502   return rules                                                   \u2502\n\u2502                                                                              \u2502\n\u2502 \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 locals \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502\n\u2502 \u2502        cache_key = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '\\n    App {\\n        background: $background;\\n  \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51,                   \u2502 \u2502\n\u2502 \u2502                    \u2502   (                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502                                                 \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   'App.DEFAULT_CSS'                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ),                                                \u2502 \u2502\n\u2502 \u2502                    \u2502   True,                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   -1,                                               \u2502 \u2502\n\u2502 \u2502                    \u2502   'App'                                             \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502              css = '\\n    App {\\n        background: $background;\\n      \u2502 \u2502\n\u2502 \u2502                    color: $text;\\n    }\\n    *:di'+51                    \u2502 \u2502\n\u2502 \u2502 is_default_rules = True                                                  \u2502 \u2502\n\u2502 \u2502        read_from = (                                                     \u2502 \u2502\n\u2502 \u2502                    \u2502   '/root/repos/py_data/textual/src/textual/app.py', \u2502 \u2502\n\u2502 \u2502                    \u2502   'App.DEFAULT_CSS'                                 \u2502 \u2502\n\u2502 \u2502                    )                                                     \u2502 \u2502\n\u2502 \u2502            scope = 'App'                                                 \u2502 \u2502\n\u2502 \u2502             self = <Stylesheet                                           \u2502 \u2502\n\u2502 \u2502                    \u2502   [                                                 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/app.py',     \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'App.DEFAULT_CSS'                         \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/tests/css/test_nested_c\u2026 \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'ListOfNestedSelectorsApp.CSS'            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/screen.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Screen.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   ),                                            \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   (                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502                                             \u2502 \u2502\n\u2502 \u2502                    '/root/repos/py_data/textual/src/textual/widget.py',  \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   \u2502   'Widget.DEFAULT_CSS'                      \u2502 \u2502\n\u2502 \u2502                    \u2502   \u2502   )                                             \u2502 \u2502\n\u2502 \u2502                    \u2502   ]                                                 \u2502 \u2502\n\u2502 \u2502                    >                                                     \u2502 \u2502\n\u2502 \u2502      tie_breaker = -1                                                    \u2502 \u2502\n\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\nStylesheetError: failed to parse css; parse() got an unexpected keyword argument\n'variable_tokens'\n____________________ test_parse_errors[Selector {-EOFError] ____________________\n\nscope = '', css = 'Selector {', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n>               token = next(tokens)\n\nsrc/textual/css/parse.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/tokenize.py:215: in __call__\n    token = get_token(expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.css.tokenizer.Tokenizer object at 0x7fe5f68de050>\nexpect = Expect(nested='\\\\&', whitespace='\\\\s+', comment_start='\\\\/\\\\*', comment_line='\\\\# .*$', declaration_name='[a-z][a-zA-Z...or_start_class='\\\\.[a-zA-Z_\\\\-][a-zA-Z0-9_\\\\-]*', selector_start_universal='\\\\*', selector_start='[A-Z_][a-zA-Z0-9_]*')\n\n    def get_token(self, expect: Expect) -> Token:\n        \"\"\"Get the next token.\n    \n        Args:\n            expect: Expect object which describes which tokens may be read.\n    \n        Raises:\n            EOFError: If there is an unexpected end of file.\n            TokenError: If there is an error with the token.\n    \n        Returns:\n            A new Token.\n        \"\"\"\n    \n        line_no = self.line_no\n        col_no = self.col_no\n        if line_no >= len(self.lines):\n            if expect._expect_eof:\n                return Token(\n                    \"eof\",\n                    \"\",\n                    self.read_from,\n                    self.code,\n                    (line_no, col_no),\n                    None,\n                )\n            else:\n>               raise EOFError(\n                    self.read_from,\n                    self.code,\n                    (line_no + 1, col_no + 1),\n                    \"Unexpected end of file; did you forget a '}' ?\",\n                )\nE               textual.css.tokenizer.EOFError: Unexpected end of file; did you forget a '}' ?\n\nsrc/textual/css/tokenizer.py:242: EOFError\n\nDuring handling of the above exception, another exception occurred:\n\ncss = 'Selector {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscope = '', css = 'Selector {', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n                token = next(tokens)\n            except TokenError as error:\n>               errors.append((error.token, str(error)))\nE               AttributeError: 'EOFError' object has no attribute 'token'\n\nsrc/textual/css/parse.py:470: AttributeError\n_________________ test_parse_errors[Selector{ Foo {-EOFError] __________________\n\nscope = '', css = 'Selector{ Foo {', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n>               token = next(tokens)\n\nsrc/textual/css/parse.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/tokenize.py:215: in __call__\n    token = get_token(expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.css.tokenizer.Tokenizer object at 0x7fe5f5de9a20>\nexpect = Expect(nested='\\\\&', whitespace='\\\\s+', comment_start='\\\\/\\\\*', comment_line='\\\\# .*$', declaration_name='[a-z][a-zA-Z...or_start_class='\\\\.[a-zA-Z_\\\\-][a-zA-Z0-9_\\\\-]*', selector_start_universal='\\\\*', selector_start='[A-Z_][a-zA-Z0-9_]*')\n\n    def get_token(self, expect: Expect) -> Token:\n        \"\"\"Get the next token.\n    \n        Args:\n            expect: Expect object which describes which tokens may be read.\n    \n        Raises:\n            EOFError: If there is an unexpected end of file.\n            TokenError: If there is an error with the token.\n    \n        Returns:\n            A new Token.\n        \"\"\"\n    \n        line_no = self.line_no\n        col_no = self.col_no\n        if line_no >= len(self.lines):\n            if expect._expect_eof:\n                return Token(\n                    \"eof\",\n                    \"\",\n                    self.read_from,\n                    self.code,\n                    (line_no, col_no),\n                    None,\n                )\n            else:\n>               raise EOFError(\n                    self.read_from,\n                    self.code,\n                    (line_no + 1, col_no + 1),\n                    \"Unexpected end of file; did you forget a '}' ?\",\n                )\nE               textual.css.tokenizer.EOFError: Unexpected end of file; did you forget a '}' ?\n\nsrc/textual/css/tokenizer.py:242: EOFError\n\nDuring handling of the above exception, another exception occurred:\n\ncss = 'Selector{ Foo {', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscope = '', css = 'Selector{ Foo {', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n                token = next(tokens)\n            except TokenError as error:\n>               errors.append((error.token, str(error)))\nE               AttributeError: 'EOFError' object has no attribute 'token'\n\nsrc/textual/css/parse.py:470: AttributeError\n_________________ test_parse_errors[Selector{ Foo {}-EOFError] _________________\n\ncss = 'Selector{ Foo {}', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/parse.py:505: in parse\n    rule_set._post_parse()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = RuleSet(selector_set=[<SelectorSet '' (0, 0, 0)>], styles=Styles(), errors=[], is_default_rules=False, tie_breaker=0, selector_names=set(), pseudo_classes=set())\n\n    def _post_parse(self) -> None:\n        \"\"\"Called after the RuleSet is parsed.\"\"\"\n        # Build a set of the class names that have been updated\n    \n        class_type = SelectorType.CLASS\n        id_type = SelectorType.ID\n        type_type = SelectorType.TYPE\n        universal_type = SelectorType.UNIVERSAL\n    \n        add_selector = self.selector_names.add\n        add_pseudo_classes = self.pseudo_classes.update\n    \n        for selector_set in self.selector_set:\n            for selector in selector_set.selectors:\n                add_pseudo_classes(selector.pseudo_classes)\n    \n>           selector = selector_set.selectors[-1]\nE           IndexError: list index out of range\n\nsrc/textual/css/model.py:288: IndexError\n______________________ test_parse_errors[> {}-TokenError] ______________________\n\nscope = '', css = '> {}', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n>               token = next(tokens)\n\nsrc/textual/css/parse.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/tokenize.py:215: in __call__\n    token = get_token(expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.css.tokenizer.Tokenizer object at 0x7fe5f6194d60>\nexpect = Expect(whitespace='\\\\s+', comment_start='\\\\/\\\\*', comment_line='\\\\# .*$', selector_start_id='\\\\#[a-zA-Z_\\\\-][a-zA-Z0-9...universal='\\\\*', selector_start='[A-Z_][a-zA-Z0-9_]*', variable_name='\\\\$[a-zA-Z0-9_\\\\-]+:', declaration_set_end='\\\\}')\n\n    def get_token(self, expect: Expect) -> Token:\n        \"\"\"Get the next token.\n    \n        Args:\n            expect: Expect object which describes which tokens may be read.\n    \n        Raises:\n            EOFError: If there is an unexpected end of file.\n            TokenError: If there is an error with the token.\n    \n        Returns:\n            A new Token.\n        \"\"\"\n    \n        line_no = self.line_no\n        col_no = self.col_no\n        if line_no >= len(self.lines):\n            if expect._expect_eof:\n                return Token(\n                    \"eof\",\n                    \"\",\n                    self.read_from,\n                    self.code,\n                    (line_no, col_no),\n                    None,\n                )\n            else:\n                raise EOFError(\n                    self.read_from,\n                    self.code,\n                    (line_no + 1, col_no + 1),\n                    \"Unexpected end of file; did you forget a '}' ?\",\n                )\n        line = self.lines[line_no]\n        match = expect.match(line, col_no)\n        if match is None:\n            error_line = line[col_no:].rstrip()\n            error_message = (\n                f\"{expect.description} (found {error_line.split(';')[0]!r}).\"\n            )\n            if not error_line.endswith(\";\"):\n                error_message += \"; Did you forget a semicolon at the end of a line?\"\n>           raise TokenError(\n                self.read_from, self.code, (line_no + 1, col_no + 1), error_message\n            )\nE           textual.css.tokenizer.TokenError: Expected selector or end of file (found '> {}').; Did you forget a semicolon at the end of a line?\n\nsrc/textual/css/tokenizer.py:257: TokenError\n\nDuring handling of the above exception, another exception occurred:\n\ncss = '> {}', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscope = '', css = '> {}', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n                token = next(tokens)\n            except TokenError as error:\n>               errors.append((error.token, str(error)))\nE               AttributeError: 'TokenError' object has no attribute 'token'\n\nsrc/textual/css/parse.py:470: AttributeError\n_______________________ test_parse_errors[&-TokenError] ________________________\n\nscope = '', css = '&', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n>               token = next(tokens)\n\nsrc/textual/css/parse.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/tokenize.py:215: in __call__\n    token = get_token(expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.css.tokenizer.Tokenizer object at 0x7fe5f5e85d20>\nexpect = Expect(whitespace='\\\\s+', comment_start='\\\\/\\\\*', comment_line='\\\\# .*$', selector_start_id='\\\\#[a-zA-Z_\\\\-][a-zA-Z0-9...universal='\\\\*', selector_start='[A-Z_][a-zA-Z0-9_]*', variable_name='\\\\$[a-zA-Z0-9_\\\\-]+:', declaration_set_end='\\\\}')\n\n    def get_token(self, expect: Expect) -> Token:\n        \"\"\"Get the next token.\n    \n        Args:\n            expect: Expect object which describes which tokens may be read.\n    \n        Raises:\n            EOFError: If there is an unexpected end of file.\n            TokenError: If there is an error with the token.\n    \n        Returns:\n            A new Token.\n        \"\"\"\n    \n        line_no = self.line_no\n        col_no = self.col_no\n        if line_no >= len(self.lines):\n            if expect._expect_eof:\n                return Token(\n                    \"eof\",\n                    \"\",\n                    self.read_from,\n                    self.code,\n                    (line_no, col_no),\n                    None,\n                )\n            else:\n                raise EOFError(\n                    self.read_from,\n                    self.code,\n                    (line_no + 1, col_no + 1),\n                    \"Unexpected end of file; did you forget a '}' ?\",\n                )\n        line = self.lines[line_no]\n        match = expect.match(line, col_no)\n        if match is None:\n            error_line = line[col_no:].rstrip()\n            error_message = (\n                f\"{expect.description} (found {error_line.split(';')[0]!r}).\"\n            )\n            if not error_line.endswith(\";\"):\n                error_message += \"; Did you forget a semicolon at the end of a line?\"\n>           raise TokenError(\n                self.read_from, self.code, (line_no + 1, col_no + 1), error_message\n            )\nE           textual.css.tokenizer.TokenError: Expected selector or end of file (found '&').; Did you forget a semicolon at the end of a line?\n\nsrc/textual/css/tokenizer.py:257: TokenError\n\nDuring handling of the above exception, another exception occurred:\n\ncss = '&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscope = '', css = '&', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n                token = next(tokens)\n            except TokenError as error:\n>               errors.append((error.token, str(error)))\nE               AttributeError: 'TokenError' object has no attribute 'token'\n\nsrc/textual/css/parse.py:470: AttributeError\n_______________________ test_parse_errors[&&-TokenError] _______________________\n\nscope = '', css = '&&', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n>               token = next(tokens)\n\nsrc/textual/css/parse.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/tokenize.py:215: in __call__\n    token = get_token(expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.css.tokenizer.Tokenizer object at 0x7fe5f5cc4a60>\nexpect = Expect(whitespace='\\\\s+', comment_start='\\\\/\\\\*', comment_line='\\\\# .*$', selector_start_id='\\\\#[a-zA-Z_\\\\-][a-zA-Z0-9...universal='\\\\*', selector_start='[A-Z_][a-zA-Z0-9_]*', variable_name='\\\\$[a-zA-Z0-9_\\\\-]+:', declaration_set_end='\\\\}')\n\n    def get_token(self, expect: Expect) -> Token:\n        \"\"\"Get the next token.\n    \n        Args:\n            expect: Expect object which describes which tokens may be read.\n    \n        Raises:\n            EOFError: If there is an unexpected end of file.\n            TokenError: If there is an error with the token.\n    \n        Returns:\n            A new Token.\n        \"\"\"\n    \n        line_no = self.line_no\n        col_no = self.col_no\n        if line_no >= len(self.lines):\n            if expect._expect_eof:\n                return Token(\n                    \"eof\",\n                    \"\",\n                    self.read_from,\n                    self.code,\n                    (line_no, col_no),\n                    None,\n                )\n            else:\n                raise EOFError(\n                    self.read_from,\n                    self.code,\n                    (line_no + 1, col_no + 1),\n                    \"Unexpected end of file; did you forget a '}' ?\",\n                )\n        line = self.lines[line_no]\n        match = expect.match(line, col_no)\n        if match is None:\n            error_line = line[col_no:].rstrip()\n            error_message = (\n                f\"{expect.description} (found {error_line.split(';')[0]!r}).\"\n            )\n            if not error_line.endswith(\";\"):\n                error_message += \"; Did you forget a semicolon at the end of a line?\"\n>           raise TokenError(\n                self.read_from, self.code, (line_no + 1, col_no + 1), error_message\n            )\nE           textual.css.tokenizer.TokenError: Expected selector or end of file (found '&&').; Did you forget a semicolon at the end of a line?\n\nsrc/textual/css/tokenizer.py:257: TokenError\n\nDuring handling of the above exception, another exception occurred:\n\ncss = '&&', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscope = '', css = '&&', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n                token = next(tokens)\n            except TokenError as error:\n>               errors.append((error.token, str(error)))\nE               AttributeError: 'TokenError' object has no attribute 'token'\n\nsrc/textual/css/parse.py:470: AttributeError\n_____________________ test_parse_errors[&.foo-TokenError] ______________________\n\nscope = '', css = '&.foo', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n>               token = next(tokens)\n\nsrc/textual/css/parse.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/tokenize.py:215: in __call__\n    token = get_token(expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.css.tokenizer.Tokenizer object at 0x7fe5f68c7520>\nexpect = Expect(whitespace='\\\\s+', comment_start='\\\\/\\\\*', comment_line='\\\\# .*$', selector_start_id='\\\\#[a-zA-Z_\\\\-][a-zA-Z0-9...universal='\\\\*', selector_start='[A-Z_][a-zA-Z0-9_]*', variable_name='\\\\$[a-zA-Z0-9_\\\\-]+:', declaration_set_end='\\\\}')\n\n    def get_token(self, expect: Expect) -> Token:\n        \"\"\"Get the next token.\n    \n        Args:\n            expect: Expect object which describes which tokens may be read.\n    \n        Raises:\n            EOFError: If there is an unexpected end of file.\n            TokenError: If there is an error with the token.\n    \n        Returns:\n            A new Token.\n        \"\"\"\n    \n        line_no = self.line_no\n        col_no = self.col_no\n        if line_no >= len(self.lines):\n            if expect._expect_eof:\n                return Token(\n                    \"eof\",\n                    \"\",\n                    self.read_from,\n                    self.code,\n                    (line_no, col_no),\n                    None,\n                )\n            else:\n                raise EOFError(\n                    self.read_from,\n                    self.code,\n                    (line_no + 1, col_no + 1),\n                    \"Unexpected end of file; did you forget a '}' ?\",\n                )\n        line = self.lines[line_no]\n        match = expect.match(line, col_no)\n        if match is None:\n            error_line = line[col_no:].rstrip()\n            error_message = (\n                f\"{expect.description} (found {error_line.split(';')[0]!r}).\"\n            )\n            if not error_line.endswith(\";\"):\n                error_message += \"; Did you forget a semicolon at the end of a line?\"\n>           raise TokenError(\n                self.read_from, self.code, (line_no + 1, col_no + 1), error_message\n            )\nE           textual.css.tokenizer.TokenError: Expected selector or end of file (found '&.foo').; Did you forget a semicolon at the end of a line?\n\nsrc/textual/css/tokenizer.py:257: TokenError\n\nDuring handling of the above exception, another exception occurred:\n\ncss = '&.foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscope = '', css = '&.foo', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n                token = next(tokens)\n            except TokenError as error:\n>               errors.append((error.token, str(error)))\nE               AttributeError: 'TokenError' object has no attribute 'token'\n\nsrc/textual/css/parse.py:470: AttributeError\n_____________________ test_parse_errors[& .foo-TokenError] _____________________\n\nscope = '', css = '& .foo', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n>               token = next(tokens)\n\nsrc/textual/css/parse.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/tokenize.py:215: in __call__\n    token = get_token(expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.css.tokenizer.Tokenizer object at 0x7fe5f5f1ffa0>\nexpect = Expect(whitespace='\\\\s+', comment_start='\\\\/\\\\*', comment_line='\\\\# .*$', selector_start_id='\\\\#[a-zA-Z_\\\\-][a-zA-Z0-9...universal='\\\\*', selector_start='[A-Z_][a-zA-Z0-9_]*', variable_name='\\\\$[a-zA-Z0-9_\\\\-]+:', declaration_set_end='\\\\}')\n\n    def get_token(self, expect: Expect) -> Token:\n        \"\"\"Get the next token.\n    \n        Args:\n            expect: Expect object which describes which tokens may be read.\n    \n        Raises:\n            EOFError: If there is an unexpected end of file.\n            TokenError: If there is an error with the token.\n    \n        Returns:\n            A new Token.\n        \"\"\"\n    \n        line_no = self.line_no\n        col_no = self.col_no\n        if line_no >= len(self.lines):\n            if expect._expect_eof:\n                return Token(\n                    \"eof\",\n                    \"\",\n                    self.read_from,\n                    self.code,\n                    (line_no, col_no),\n                    None,\n                )\n            else:\n                raise EOFError(\n                    self.read_from,\n                    self.code,\n                    (line_no + 1, col_no + 1),\n                    \"Unexpected end of file; did you forget a '}' ?\",\n                )\n        line = self.lines[line_no]\n        match = expect.match(line, col_no)\n        if match is None:\n            error_line = line[col_no:].rstrip()\n            error_message = (\n                f\"{expect.description} (found {error_line.split(';')[0]!r}).\"\n            )\n            if not error_line.endswith(\";\"):\n                error_message += \"; Did you forget a semicolon at the end of a line?\"\n>           raise TokenError(\n                self.read_from, self.code, (line_no + 1, col_no + 1), error_message\n            )\nE           textual.css.tokenizer.TokenError: Expected selector or end of file (found '& .foo').; Did you forget a semicolon at the end of a line?\n\nsrc/textual/css/tokenizer.py:257: TokenError\n\nDuring handling of the above exception, another exception occurred:\n\ncss = '& .foo', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscope = '', css = '& .foo', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n                token = next(tokens)\n            except TokenError as error:\n>               errors.append((error.token, str(error)))\nE               AttributeError: 'TokenError' object has no attribute 'token'\n\nsrc/textual/css/parse.py:470: AttributeError\n_______________________ test_parse_errors[{-TokenError] ________________________\n\nscope = '', css = '{', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n>               token = next(tokens)\n\nsrc/textual/css/parse.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/tokenize.py:215: in __call__\n    token = get_token(expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.css.tokenizer.Tokenizer object at 0x7fe5f68df970>\nexpect = Expect(whitespace='\\\\s+', comment_start='\\\\/\\\\*', comment_line='\\\\# .*$', selector_start_id='\\\\#[a-zA-Z_\\\\-][a-zA-Z0-9...universal='\\\\*', selector_start='[A-Z_][a-zA-Z0-9_]*', variable_name='\\\\$[a-zA-Z0-9_\\\\-]+:', declaration_set_end='\\\\}')\n\n    def get_token(self, expect: Expect) -> Token:\n        \"\"\"Get the next token.\n    \n        Args:\n            expect: Expect object which describes which tokens may be read.\n    \n        Raises:\n            EOFError: If there is an unexpected end of file.\n            TokenError: If there is an error with the token.\n    \n        Returns:\n            A new Token.\n        \"\"\"\n    \n        line_no = self.line_no\n        col_no = self.col_no\n        if line_no >= len(self.lines):\n            if expect._expect_eof:\n                return Token(\n                    \"eof\",\n                    \"\",\n                    self.read_from,\n                    self.code,\n                    (line_no, col_no),\n                    None,\n                )\n            else:\n                raise EOFError(\n                    self.read_from,\n                    self.code,\n                    (line_no + 1, col_no + 1),\n                    \"Unexpected end of file; did you forget a '}' ?\",\n                )\n        line = self.lines[line_no]\n        match = expect.match(line, col_no)\n        if match is None:\n            error_line = line[col_no:].rstrip()\n            error_message = (\n                f\"{expect.description} (found {error_line.split(';')[0]!r}).\"\n            )\n            if not error_line.endswith(\";\"):\n                error_message += \"; Did you forget a semicolon at the end of a line?\"\n>           raise TokenError(\n                self.read_from, self.code, (line_no + 1, col_no + 1), error_message\n            )\nE           textual.css.tokenizer.TokenError: Expected selector or end of file (found '{').; Did you forget a semicolon at the end of a line?\n\nsrc/textual/css/tokenizer.py:257: TokenError\n\nDuring handling of the above exception, another exception occurred:\n\ncss = '{', exception = <class 'textual.css.tokenizer.TokenError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscope = '', css = '{', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n                token = next(tokens)\n            except TokenError as error:\n>               errors.append((error.token, str(error)))\nE               AttributeError: 'TokenError' object has no attribute 'token'\n\nsrc/textual/css/parse.py:470: AttributeError\n________________________ test_parse_errors[*{-EOFError] ________________________\n\nscope = '', css = '*{', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n>               token = next(tokens)\n\nsrc/textual/css/parse.py:468: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/textual/css/tokenize.py:215: in __call__\n    token = get_token(expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <textual.css.tokenizer.Tokenizer object at 0x7fe5f5da5420>\nexpect = Expect(nested='\\\\&', whitespace='\\\\s+', comment_start='\\\\/\\\\*', comment_line='\\\\# .*$', declaration_name='[a-z][a-zA-Z...or_start_class='\\\\.[a-zA-Z_\\\\-][a-zA-Z0-9_\\\\-]*', selector_start_universal='\\\\*', selector_start='[A-Z_][a-zA-Z0-9_]*')\n\n    def get_token(self, expect: Expect) -> Token:\n        \"\"\"Get the next token.\n    \n        Args:\n            expect: Expect object which describes which tokens may be read.\n    \n        Raises:\n            EOFError: If there is an unexpected end of file.\n            TokenError: If there is an error with the token.\n    \n        Returns:\n            A new Token.\n        \"\"\"\n    \n        line_no = self.line_no\n        col_no = self.col_no\n        if line_no >= len(self.lines):\n            if expect._expect_eof:\n                return Token(\n                    \"eof\",\n                    \"\",\n                    self.read_from,\n                    self.code,\n                    (line_no, col_no),\n                    None,\n                )\n            else:\n>               raise EOFError(\n                    self.read_from,\n                    self.code,\n                    (line_no + 1, col_no + 1),\n                    \"Unexpected end of file; did you forget a '}' ?\",\n                )\nE               textual.css.tokenizer.EOFError: Unexpected end of file; did you forget a '}' ?\n\nsrc/textual/css/tokenizer.py:242: EOFError\n\nDuring handling of the above exception, another exception occurred:\n\ncss = '*{', exception = <class 'textual.css.tokenizer.EOFError'>\n\n    @pytest.mark.parametrize(\n        (\"css\", \"exception\"),\n        [\n            (\"Selector {\", EOFError),\n            (\"Selector{ Foo {\", EOFError),\n            (\"Selector{ Foo {}\", EOFError),\n            (\"> {}\", TokenError),\n            (\"&\", TokenError),\n            (\"&&\", TokenError),\n            (\"&.foo\", TokenError),\n            (\"& .foo\", TokenError),\n            (\"{\", TokenError),\n            (\"*{\", EOFError),\n        ],\n    )\n    def test_parse_errors(css: str, exception: type[Exception]) -> None:\n        \"\"\"Check some CSS which should fail.\"\"\"\n        with pytest.raises(exception):\n>           list(parse(\"\", css, (\"foo\", \"\")))\n\ntests/css/test_nested_css.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nscope = '', css = '*{', read_from = ('foo', ''), variables = {}\nis_default_rules = False\n\n    def parse(\n        scope: str,\n        css: str,\n        read_from: CSSLocation,\n        variables: dict[str, str] | None = None,\n        is_default_rules: bool = False,\n    ) -> Iterable[RuleSet]:\n        \"\"\"Parse CSS by tokenizing it, performing variable substitution,\n        and generating rule sets from it.\n    \n        Args:\n            scope: CSS type name.\n            css: The input CSS.\n            read_from: The source location of the CSS.\n            variables: Substitution variables to substitute tokens for.\n            is_default_rules: True if the rules we're extracting are\n                default (i.e. in Widget.DEFAULT_CSS) rules. False if they're from user defined CSS.\n        \"\"\"\n        from .tokenize import TokenizerState, tokenize_values\n        from .tokenizer import Token, TokenError\n        from .types import CSSLocation\n    \n        if variables is None:\n            variables = {}\n    \n        variable_tokens = tokenize_values(variables)\n    \n        tokenizer_state = TokenizerState()\n        tokens = iter(tokenizer_state(css, read_from))\n        styles_builder = StylesBuilder()\n    \n        declaration: Declaration | None = None\n        errors: list[tuple[Token, str | HelpText]] = []\n        nested_rules: list[RuleSet] = []\n    \n        while True:\n            try:\n                token = next(tokens)\n            except TokenError as error:\n>               errors.append((error.token, str(error)))\nE               AttributeError: 'EOFError' object has no attribute 'token'\n\nsrc/textual/css/parse.py:470: AttributeError\n=============================== warnings summary ===============================\ntests/css/test_nested_css.py::test_nest_app\ntests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\ntests/css/test_nested_css.py::test_rule_declaration_after_nested\ntests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css\n  /usr/local/lib/python3.10/site-packages/tornado/ioloop.py:274: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/css/test_nested_css.py::test_nest_app\n  /usr/local/lib/python3.10/site-packages/tornado/platform/asyncio.py:288: DeprecationWarning: There is no current event loop\n    super().initialize(asyncio.get_event_loop(), **kwargs)\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/css/test_nested_css.py::test_nest_app - textual.css.errors.Style...\nFAILED tests/css/test_nested_css.py::test_pseudo_classes_work_in_nested_css\nFAILED tests/css/test_nested_css.py::test_rule_declaration_after_nested - tex...\nFAILED tests/css/test_nested_css.py::test_lists_of_selectors_in_nested_css - ...\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[Selector{ Foo {}-EOFError]\nFAILED tests/css/test_nested_css.py::test_parse_errors[> {}-TokenError] - Att...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&-TokenError] - Attrib...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&&-TokenError] - Attri...\nFAILED tests/css/test_nested_css.py::test_parse_errors[&.foo-TokenError] - At...\nFAILED tests/css/test_nested_css.py::test_parse_errors[& .foo-TokenError] - A...\nFAILED tests/css/test_nested_css.py::test_parse_errors[{-TokenError] - Attrib...\nFAILED tests/css/test_nested_css.py::test_parse_errors[*{-EOFError] - Attribu...\n======================== 14 failed, 5 warnings in 1.95s ========================\n\n"], "textual-src/textual/css/stylesheet.py-_parse_rules": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 0 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\n"], "textual-src/textual/css/stylesheet.py-parse": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/textual\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\n============================ no tests ran in 0.08s =============================\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_opacity_invalid_value\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_unknown_easing_function\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_combined_type_starts_with_number\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_text_align_invalid\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_background\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_foreground\n(no match in any of [<Module test_parse.py>])\n\nERROR: not found: /root/repos/py_data/textual/tests/css/test_parse.py::test_invalid_layout_name\n(no match in any of [<Module test_parse.py>])\n\n"], "gpt-engineer-gpt_engineer/core/chat_to_files.py-parse_diffs": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 8 items\n\ntests/core/test_chat_to_files.py FFFF.F.F                                [100%]\n\n=================================== FAILURES ===================================\n_______________ test_correct_skipped_lines_and_number_correction _______________\n\n    def test_correct_skipped_lines_and_number_correction():\n        distorted_example = insert_string_in_lined_string(\n            file_example, \"#\\n#comment\\n#\\n#\", 14\n        )\n        diffs = parse_diffs(example_line_dist_diff)\n        # list(diffs.values())[0].validate_and_correct(file_to_lines_dict(distorted_example))\n        for diff in diffs.values():\n            problems = diff.validate_and_correct(file_to_lines_dict(distorted_example))\n            print(problems)\n        with open(\n            os.path.join(\n                THIS_FILE_DIR,\n                \"improve_function_test_cases\",\n                \"corrected_diff_from_missing_lines\",\n            ),\n            \"r\",\n        ) as f:\n            corrected_diff_from_missing_lines = f.read()\n>       assert (\n            diffs[\"example.txt\"].diff_to_string().strip()\n            == corrected_diff_from_missing_lines.strip()\n        )\nE       AssertionError: assert '--- example....f step Y\\n ``' == '--- example....ion of step Y'\nE         \nE           --- example.txt\nE           +++ example.txt\nE         - @@ -12,7 +12,8 @@\nE         -      sample text 1\nE         -      sample text 2\nE         - +    added extra line here...\nE         \nE         ...Full output truncated (20 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:257: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\nInvalid Hunk NO.0---\nIn @@ -10,4 +13,5 @@\n rrelevant line to be ignored\n \n nother irrelevant line to be ignored\n ``diff\n     sample text 1\n     sample text 2\n+    added extra line here\n-    original text A\n+    updated original text A with changes\n:The starting line of the diff @@ -10,4 +13,5 @@\n rrelevant line to be ignored\n \n nother irrelevant line to be ignored\n ``diff\n     sample text 1\n     sample text 2\n+    added extra line here\n-    original text A\n+    updated original text A with changes\n does not exist in the code\n---\n['In @@ -10,4 +13,5 @@\\n rrelevant line to be ignored\\n \\n nother irrelevant line to be ignored\\n ``diff\\n     sample text 1\\n     sample text 2\\n+    added extra line here\\n-    original text A\\n+    updated original text A with changes\\n:The starting line of the diff @@ -10,4 +13,5 @@\\n rrelevant line to be ignored\\n \\n nother irrelevant line to be ignored\\n ``diff\\n     sample text 1\\n     sample text 2\\n+    added extra line here\\n-    original text A\\n+    updated original text A with changes\\n does not exist in the code']\n__________________________ test_diff_adding_one_file ___________________________\n\n    def test_diff_adding_one_file():\n        add_diff = parse_diffs(add_example)\n        for filename, diff in add_diff.items():\n            string_add_diff = diff.diff_to_string()\n        correct_add_diff = \"\\n\".join(add_example.strip().split(\"\\n\")[2:-1])\n>       assert string_add_diff == correct_add_diff\nE       AssertionError: assert '--- /dev/nul...ple line\\n ``' == '--- /dev/nul... example line'\nE         \nE         Skipping 37 identical leading characters in diff, use -v to show\nE           0 +1,3 @@\nE         +  ninteresting stuff\nE         +  ``diff\nE           +First example line\nE           +...\nE         \nE         ...Full output truncated (4 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:191: AssertionError\n_________________________ test_diff_changing_two_files _________________________\n\n    def test_diff_changing_two_files():\n        merged_diff = parse_diffs(example_diff + add_example)\n        correct_diff = \"\\n\".join(example_diff.strip().split(\"\\n\")[4:-1])\n        correct_add_diff = \"\\n\".join(add_example.strip().split(\"\\n\")[2:-1])\n>       assert merged_diff[\"example.txt\"].diff_to_string() == correct_diff\nE       AssertionError: assert '--- example....tuff\\n ``diff' == '--- example....ion of step Y'\nE         \nE         Skipping 41 identical leading characters in diff, use -v to show\nE           +12,4 @@\nE         +  rrelevant line to be ignored\nE         +  \nE         +  nother irrelevant line to be ignored\nE         +  ``diff...\nE         \nE         ...Full output truncated (19 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:198: AssertionError\n________________________ test_correct_distorted_numbers ________________________\n\n    def test_correct_distorted_numbers():\n        lines_dict = file_to_lines_dict(file_example)\n        diffs = parse_diffs(example_line_dist_diff)\n        # This is a test in its own right since it full of exceptions, would something go wrong\n        list(diffs.values())[0].validate_and_correct(lines_dict)\n        correct_diff = \"\\n\".join(example_diff.strip().split(\"\\n\")[4:-1])\n>       assert diffs[\"example.txt\"].diff_to_string() == correct_diff\nE       AssertionError: assert '--- example....f step Y\\n ``' == '--- example....ion of step Y'\nE         \nE           --- example.txt\nE           +++ example.txt\nE         - @@ -12,3 +12,4 @@\nE         -      sample text 1\nE         -      sample text 2\nE         - +    added extra line here...\nE         \nE         ...Full output truncated (16 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:215: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\nInvalid Hunk NO.0---\nIn @@ -10,4 +13,5 @@\n rrelevant line to be ignored\n \n nother irrelevant line to be ignored\n ``diff\n     sample text 1\n     sample text 2\n+    added extra line here\n-    original text A\n+    updated original text A with changes\n:The starting line of the diff @@ -10,4 +13,5 @@\n rrelevant line to be ignored\n \n nother irrelevant line to be ignored\n ``diff\n     sample text 1\n     sample text 2\n+    added extra line here\n-    original text A\n+    updated original text A with changes\n does not exist in the code\n---\n__________________________ test_correct_skipped_lines __________________________\n\n    def test_correct_skipped_lines():\n        distorted_example = insert_string_in_lined_string(\n            file_example, \"#\\n#comment\\n#\\n#\", 14\n        )\n        diffs = parse_diffs(example_diff)\n        list(diffs.values())[0].validate_and_correct(file_to_lines_dict(distorted_example))\n        with open(\n            os.path.join(\n                THIS_FILE_DIR,\n                \"improve_function_test_cases\",\n                \"corrected_diff_from_missing_lines\",\n            ),\n            \"r\",\n        ) as f:\n            corrected_diff_from_missing_lines = f.read()\n>       assert (\n            diffs[\"example.txt\"].diff_to_string().strip()\n            == corrected_diff_from_missing_lines.strip()\n        )\nE       AssertionError: assert '--- example....f step Y\\n ``' == '--- example....ion of step Y'\nE         \nE           --- example.txt\nE           +++ example.txt\nE         - @@ -12,7 +12,8 @@\nE         -      sample text 1\nE         -      sample text 2\nE         - +    added extra line here...\nE         \nE         ...Full output truncated (20 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:233: AssertionError\n----------------------------- Captured stdout call -----------------------------\n\nInvalid Hunk NO.0---\nIn @@ -12,3 +12,4 @@\n rrelevant line to be ignored\n \n nother irrelevant line to be ignored\n ``diff\n     sample text 1\n     sample text 2\n+    added extra line here\n-    original text A\n+    updated original text A with changes\n:The starting line of the diff @@ -12,3 +12,4 @@\n rrelevant line to be ignored\n \n nother irrelevant line to be ignored\n ``diff\n     sample text 1\n     sample text 2\n+    added extra line here\n-    original text A\n+    updated original text A with changes\n does not exist in the code\n---\n_________________________ test_diff_changing_one_file __________________________\n\n    def test_diff_changing_one_file():\n        diffs = parse_diffs(example_diff)\n        for filename, diff in diffs.items():\n            string_diff = diff.diff_to_string()\n        correct_diff = \"\\n\".join(example_diff.strip().split(\"\\n\")[4:-1])\n>       assert string_diff == correct_diff\nE       AssertionError: assert '--- example....f step Y\\n ``' == '--- example....ion of step Y'\nE         \nE         Skipping 41 identical leading characters in diff, use -v to show\nE           +12,4 @@\nE         +  rrelevant line to be ignored\nE         +  \nE         +  nother irrelevant line to be ignored\nE         +  ``diff...\nE         \nE         ...Full output truncated (16 lines hidden), use '-vv' to show\n\ntests/core/test_chat_to_files.py:183: AssertionError\n=========================== short test summary info ============================\nFAILED tests/core/test_chat_to_files.py::test_correct_skipped_lines_and_number_correction\nFAILED tests/core/test_chat_to_files.py::test_diff_adding_one_file - Assertio...\nFAILED tests/core/test_chat_to_files.py::test_diff_changing_two_files - Asser...\nFAILED tests/core/test_chat_to_files.py::test_correct_distorted_numbers - Ass...\nFAILED tests/core/test_chat_to_files.py::test_correct_skipped_lines - Asserti...\nFAILED tests/core/test_chat_to_files.py::test_diff_changing_one_file - Assert...\n========================= 6 failed, 2 passed in 0.08s ==========================\n\n"], "gpt-engineer-gpt_engineer/core/ai.py-start": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 3 items\n\ntests/core/test_ai.py FFF                                                [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_start __________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f54d3fbc7c0>\n\n    def test_start(monkeypatch):\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:140: in start\n    messages.append(AIMessage(content=response))\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/ai.py:87: in __init__\n    super().__init__(content=content, **kwargs)\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/base.py:66: in __init__\n    super().__init__(content=content, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n__pydantic_self__ = AIMessage()\ndata = {'content': AIMessage(content='response1', id='run-828fe8a5-2032-4725-b33e-5a81d593c250-0')}\nvalues = {'additional_kwargs': {}, 'example': False, 'id': None, 'invalid_tool_calls': [], ...}\nfields_set = {'content'}\nvalidation_error = ValidationError(model='AIMessage', errors=[{'loc': ('content',), 'msg': 'str type expected', 'type': 'type_error.str'}, {'loc': ('content',), 'msg': 'value is not a valid list', 'type': 'type_error.list'}])\n\n    def __init__(__pydantic_self__, **data: Any) -> None:\n        \"\"\"\n        Create a new model by parsing and validating input data from keyword arguments.\n    \n        Raises ValidationError if the input data cannot be parsed to form a valid model.\n        \"\"\"\n        # Uses something other than `self` the first arg to allow \"self\" as a settable attribute\n        values, fields_set, validation_error = validate_model(__pydantic_self__.__class__, data)\n        if validation_error:\n>           raise validation_error\nE           pydantic.v1.error_wrappers.ValidationError: 2 validation errors for AIMessage\nE           content\nE             str type expected (type=type_error.str)\nE           content\nE             value is not a valid list (type=type_error.list)\n\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:341: ValidationError\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f54d3984d60>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:140: in start\n    messages.append(AIMessage(content=response))\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/ai.py:87: in __init__\n    super().__init__(content=content, **kwargs)\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/base.py:66: in __init__\n    super().__init__(content=content, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n__pydantic_self__ = AIMessage()\ndata = {'content': AIMessage(content='response1', id='run-e88a9446-701b-4db4-8f23-3e5199fde73a-0')}\nvalues = {'additional_kwargs': {}, 'example': False, 'id': None, 'invalid_tool_calls': [], ...}\nfields_set = {'content'}\nvalidation_error = ValidationError(model='AIMessage', errors=[{'loc': ('content',), 'msg': 'str type expected', 'type': 'type_error.str'}, {'loc': ('content',), 'msg': 'value is not a valid list', 'type': 'type_error.list'}])\n\n    def __init__(__pydantic_self__, **data: Any) -> None:\n        \"\"\"\n        Create a new model by parsing and validating input data from keyword arguments.\n    \n        Raises ValidationError if the input data cannot be parsed to form a valid model.\n        \"\"\"\n        # Uses something other than `self` the first arg to allow \"self\" as a settable attribute\n        values, fields_set, validation_error = validate_model(__pydantic_self__.__class__, data)\n        if validation_error:\n>           raise validation_error\nE           pydantic.v1.error_wrappers.ValidationError: 2 validation errors for AIMessage\nE           content\nE             str type expected (type=type_error.str)\nE           content\nE             value is not a valid list (type=type_error.list)\n\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:341: ValidationError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f54d32ebaf0>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:140: in start\n    messages.append(AIMessage(content=response))\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/ai.py:87: in __init__\n    super().__init__(content=content, **kwargs)\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/base.py:66: in __init__\n    super().__init__(content=content, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n__pydantic_self__ = AIMessage()\ndata = {'content': AIMessage(content='response1', id='run-32243cb0-b2d6-4843-bde4-6dcc50828fa9-0')}\nvalues = {'additional_kwargs': {}, 'example': False, 'id': None, 'invalid_tool_calls': [], ...}\nfields_set = {'content'}\nvalidation_error = ValidationError(model='AIMessage', errors=[{'loc': ('content',), 'msg': 'str type expected', 'type': 'type_error.str'}, {'loc': ('content',), 'msg': 'value is not a valid list', 'type': 'type_error.list'}])\n\n    def __init__(__pydantic_self__, **data: Any) -> None:\n        \"\"\"\n        Create a new model by parsing and validating input data from keyword arguments.\n    \n        Raises ValidationError if the input data cannot be parsed to form a valid model.\n        \"\"\"\n        # Uses something other than `self` the first arg to allow \"self\" as a settable attribute\n        values, fields_set, validation_error = validate_model(__pydantic_self__.__class__, data)\n        if validation_error:\n>           raise validation_error\nE           pydantic.v1.error_wrappers.ValidationError: 2 validation errors for AIMessage\nE           content\nE             str type expected (type=type_error.str)\nE           content\nE             value is not a valid list (type=type_error.list)\n\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:341: ValidationError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_start - pydantic.v1.error_wrappers.Validat...\nFAILED tests/core/test_ai.py::test_token_logging - pydantic.v1.error_wrappers...\nFAILED tests/core/test_ai.py::test_next - pydantic.v1.error_wrappers.Validati...\n============================== 3 failed in 0.89s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/ai.py-next": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 2 items\n\ntests/core/test_ai.py FF                                                 [100%]\n\n=================================== FAILURES ===================================\n______________________________ test_token_logging ______________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe3710284f0>\n\n    def test_token_logging(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n    \n        # act\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:143: in start\n    return self.next(messages, step_name=step_name)\ngpt_engineer/core/ai.py:238: in next\n    messages.append(AIMessage(content=response))\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/ai.py:87: in __init__\n    super().__init__(content=content, **kwargs)\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/base.py:66: in __init__\n    super().__init__(content=content, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n__pydantic_self__ = AIMessage()\ndata = {'content': AIMessage(content='response1', id='run-ad97f797-eb50-46aa-96f9-42845a1227fd-0')}\nvalues = {'additional_kwargs': {}, 'example': False, 'id': None, 'invalid_tool_calls': [], ...}\nfields_set = {'content'}\nvalidation_error = ValidationError(model='AIMessage', errors=[{'loc': ('content',), 'msg': 'str type expected', 'type': 'type_error.str'}, {'loc': ('content',), 'msg': 'value is not a valid list', 'type': 'type_error.list'}])\n\n    def __init__(__pydantic_self__, **data: Any) -> None:\n        \"\"\"\n        Create a new model by parsing and validating input data from keyword arguments.\n    \n        Raises ValidationError if the input data cannot be parsed to form a valid model.\n        \"\"\"\n        # Uses something other than `self` the first arg to allow \"self\" as a settable attribute\n        values, fields_set, validation_error = validate_model(__pydantic_self__.__class__, data)\n        if validation_error:\n>           raise validation_error\nE           pydantic.v1.error_wrappers.ValidationError: 2 validation errors for AIMessage\nE           content\nE             str type expected (type=type_error.str)\nE           content\nE             value is not a valid list (type=type_error.list)\n\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:341: ValidationError\n__________________________________ test_next ___________________________________\n\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fe37102b7f0>\n\n    def test_next(monkeypatch):\n        # arrange\n        monkeypatch.setattr(AI, \"_create_chat_model\", mock_create_chat_model)\n    \n        ai = AI(\"gpt-4\")\n>       response_messages = ai.start(\"system prompt\", \"user prompt\", step_name=\"step name\")\n\ntests/core/test_ai.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ngpt_engineer/core/ai.py:143: in start\n    return self.next(messages, step_name=step_name)\ngpt_engineer/core/ai.py:238: in next\n    messages.append(AIMessage(content=response))\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/ai.py:87: in __init__\n    super().__init__(content=content, **kwargs)\n/usr/local/lib/python3.10/site-packages/langchain_core/messages/base.py:66: in __init__\n    super().__init__(content=content, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n__pydantic_self__ = AIMessage()\ndata = {'content': AIMessage(content='response1', id='run-34de611b-b47c-4eac-b384-1332031b910f-0')}\nvalues = {'additional_kwargs': {}, 'example': False, 'id': None, 'invalid_tool_calls': [], ...}\nfields_set = {'content'}\nvalidation_error = ValidationError(model='AIMessage', errors=[{'loc': ('content',), 'msg': 'str type expected', 'type': 'type_error.str'}, {'loc': ('content',), 'msg': 'value is not a valid list', 'type': 'type_error.list'}])\n\n    def __init__(__pydantic_self__, **data: Any) -> None:\n        \"\"\"\n        Create a new model by parsing and validating input data from keyword arguments.\n    \n        Raises ValidationError if the input data cannot be parsed to form a valid model.\n        \"\"\"\n        # Uses something other than `self` the first arg to allow \"self\" as a settable attribute\n        values, fields_set, validation_error = validate_model(__pydantic_self__.__class__, data)\n        if validation_error:\n>           raise validation_error\nE           pydantic.v1.error_wrappers.ValidationError: 2 validation errors for AIMessage\nE           content\nE             str type expected (type=type_error.str)\nE           content\nE             value is not a valid list (type=type_error.list)\n\n/usr/local/lib/python3.10/site-packages/pydantic/v1/main.py:341: ValidationError\n=========================== short test summary info ============================\nFAILED tests/core/test_ai.py::test_token_logging - pydantic.v1.error_wrappers...\nFAILED tests/core/test_ai.py::test_next - pydantic.v1.error_wrappers.Validati...\n============================== 2 failed in 0.87s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/project_config.py-to_toml": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/test_project_config.py ....                                        [100%]\n\n============================== 4 passed in 0.04s ===============================\n\n"], "gpt-engineer-gpt_engineer/core/diff.py-is_similar": ["============================= test session starts ==============================\nplatform linux -- Python 3.10.1, pytest-8.2.2, pluggy-1.5.0\nbenchmark: 4.0.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)\nrootdir: /root/repos/py_data/gpt-engineer\nconfigfile: pytest.ini\nplugins: examples-0.0.13, mock-3.11.1, timeout-2.3.1, asyncio-0.23.7, tornasync-0.6.0.post2, anyio-4.4.0, lazy-fixtures-1.0.7, benchmark-4.0.0, xdist-3.6.1, Faker-26.0.0, time-machine-2.14.2\nasyncio: mode=strict\ncollected 4 items\n\ntests/core/test_chat_to_files.py ....                                    [100%]\n\n============================== 4 passed in 0.04s ===============================\n\n"]}